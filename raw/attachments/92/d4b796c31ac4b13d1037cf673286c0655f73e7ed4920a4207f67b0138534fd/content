{
  "pipelineId": "5dfc056f-d8e4-4151-a0a9-519bed442a8d",
  "buildNumber": {
    "type": "tekton",
    "buildNumber": 34
  },
  "status": {
    "state": "running"
  },
  "eventParams": {
    "triggered_at": "2023-02-22_05:21:03",
    "stage": "owasp-zap",
    "pipelinectl": [
      {
        "name": "cocoa.repo.app-repo",
        "props": [
          {
            "key": "branch",
            "value": "bWFzdGVy"
          },
          {
            "key": "buildnumber",
            "value": "MzM="
          },
          {
            "key": "commit",
            "value": "YjhlMzZmY2M4YTA4NzI1NDVjNzJiNTU2NGExMmQyZjc0OGVlOTVlMQ=="
          },
          {
            "key": "path",
            "value": "aGVsbG8tY29tcGxpYW5jZS1hcHAtMjAyMzAyMTdfMw=="
          },
          {
            "key": "url",
            "value": "aHR0cHM6Ly9naXRodWIuY29tL2t0YXRhdmFydGhpL2hlbGxvLWNvbXBsaWFuY2UtYXBwLTIwMjMwMjE3XzM="
          }
        ]
      },
      {
        "name": "cocoa.artifact.app-image",
        "props": [
          {
            "key": "digest",
            "value": "c2hhMjU2OjM1YmFkYTVjNDZlY2M1YjQwOTMwM2M1MTNjYWMxMDYxM2U4NmJlNjVmZjU1NDdjMDMxNjNhMjEyMmQ2MmEwNzk="
          },
          {
            "key": "name",
            "value": "dXMuaWNyLmlvL2NvY29hLWRldmVsb3BtZW50L2hlbGxvLWNvbXBsaWFuY2UtYXBwLTIwMjMwMjE3XzM6MjAyMzAyMjIwNDUxNDItbWFzdGVyLWI4ZTM2ZmNjOGEwODcyNTQ1YzcyYjU1NjRhMTJkMmY3NDhlZTk1ZTE="
          },
          {
            "key": "signature",
            "value": ""
          },
          {
            "key": "source",
            "value": "aHR0cHM6Ly9naXRodWIuY29tL2t0YXRhdmFydGhpL2hlbGxvLWNvbXBsaWFuY2UtYXBwLTIwMjMwMjE3XzMuZ2l0I2I4ZTM2ZmNjOGEwODcyNTQ1YzcyYjU1NjRhMTJkMmY3NDhlZTk1ZTE="
          },
          {
            "key": "tags",
            "value": "MjAyMzAyMjIwNDUxNDItbWFzdGVyLWI4ZTM2ZmNjOGEwODcyNTQ1YzcyYjU1NjRhMTJkMmY3NDhlZTk1ZTE="
          },
          {
            "key": "type",
            "value": "aW1hZ2U="
          }
        ]
      },
      {
        "name": "cocoa.string.ONE_PIPELINE_CONFIG_COMMIT",
        "props": [
          {
            "key": "value",
            "value": "YjhlMzZmY2M4YTA4NzI1NDVjNzJiNTU2NGExMmQyZjc0OGVlOTVlMQ=="
          }
        ]
      },
      {
        "name": "cocoa.string.ONE_PIPELINE_CONFIG_PATH",
        "props": [
          {
            "key": "value",
            "value": "LnBpcGVsaW5lLWNvbmZpZy55YW1s"
          }
        ]
      },
      {
        "name": "cocoa.string.ONE_PIPELINE_REPO",
        "props": [
          {
            "key": "value",
            "value": "aHR0cHM6Ly9naXRodWIuY29tL2t0YXRhdmFydGhpL2hlbGxvLWNvbXBsaWFuY2UtYXBwLTIwMjMwMjE3XzM="
          }
        ]
      },
      {
        "name": "cocoa.string.app-url",
        "props": [
          {
            "key": "value",
            "value": "aHR0cDovL2hlbGxvLWFwcC1kZWZhdWx0LmNvY29hLWRldi00NDgyNDgtMDYzNTJhZDc1YzdlOTM1MGY3MjRiM2FmNDYwYWY4MTItMDAwMC51cy1zb3V0aC5jb250YWluZXJzLmFwcGRvbWFpbi5jbG91ZA=="
          }
        ]
      },
      {
        "name": "cocoa.string.opt-in-dynamic-api-scan",
        "props": [
          {
            "key": "value",
            "value": "MQ=="
          }
        ]
      },
      {
        "name": "cocoa.string.opt-in-dynamic-ui-scan",
        "props": [
          {
            "key": "value",
            "value": "MQ=="
          }
        ]
      },
      {
        "name": "cocoa.string.parent_pipeline_url",
        "props": [
          {
            "key": "value",
            "value": "aHR0cHM6Ly9jbG91ZC5pYm0uY29tL2Rldm9wcy9waXBlbGluZXMvdGVrdG9uLzVkZmMwNTZmLWQ4ZTQtNDE1MS1hMGE5LTUxOWJlZDQ0MmE4ZC9ydW5zLzBkMGVjMGYwLTVmODctNGFjNi04YzRmLTkxMzMxOTU3YmFkND9lbnZfaWQ9aWJtOnlwOnVzLXNvdXRo"
          }
        ]
      },
      {
        "name": "cocoa.string.pipeline-debug",
        "props": [
          {
            "key": "value",
            "value": "MQ=="
          }
        ]
      },
      {
        "name": "cocoa.string.pipeline-name",
        "props": [
          {
            "key": "value",
            "value": "Y2ktcGlwZWxpbmU="
          }
        ]
      },
      {
        "name": "cocoa.string.pipeline_namespace",
        "props": [
          {
            "key": "value",
            "value": "Y2k="
          }
        ]
      },
      {
        "name": "cocoa.string.root_pipeline_run_id",
        "props": [
          {
            "key": "value",
            "value": "MGQwZWMwZjAtNWY4Ny00YWM2LThjNGYtOTEzMzE5NTdiYWQ0"
          }
        ]
      },
      {
        "name": "cocoa.string.target-application-server-url",
        "props": [
          {
            "key": "value",
            "value": "aHR0cDovL2hlbGxvLWFwcC1kZWZhdWx0LmNvY29hLWRldi00NDgyNDgtMDYzNTJhZDc1YzdlOTM1MGY3MjRiM2FmNDYwYWY4MTItMDAwMC51cy1zb3V0aC5jb250YWluZXJzLmFwcGRvbWFpbi5jbG91ZA=="
          }
        ]
      },
      {
        "name": "cocoa.string.use-v2-log-collector",
        "props": [
          {
            "key": "value",
            "value": "MQ=="
          }
        ]
      }
    ]
  },
  "eventHeaderParams": {
    "accept": "*/*",
    "x-forwarded-proto": "https",
    "user-agent": "curl/7.61.1",
    "x-async-stage-token": "****",
    "x-request-id": "e5281e25-b233-4719-9c83-11d622bce571",
    "transaction-id": "de075b31-2fc9-4ee9-8bdf-02a18a887e29",
    "traceparent": "00-dcbc5f3e113255e14218aafeacd2d349-f567c1dff92f7f08-01",
    "tracestate": "1592783@nr=0-0-1783376-381605170-f567c1dff92f7f08-fbba7406b3edec06-1-1.526244-1677043265921",
    "newrelic": "eyJ2IjpbMCwxXSwiZCI6eyJ0eSI6IkFwcCIsImFjIjoiMTc4MzM3NiIsImFwIjoiMzgxNjA1MTcwIiwidHgiOiJmYmJhNzQwNmIzZWRlYzA2IiwidHIiOiJkY2JjNWYzZTExMzI1NWUxNDIxOGFhZmVhY2QyZDM0OSIsInByIjoxLjUyNjI0NCwic2EiOnRydWUsInRpIjoxNjc3MDQzMjY1OTIxLCJpZCI6ImY1NjdjMWRmZjkyZjdmMDgiLCJ0ayI6IjE1OTI3ODMifX0=",
    "x-b3-traceid": "1a6eb69657227d10584f86e94d831997",
    "x-b3-spanid": "947b0b5082294bac",
    "x-b3-parentspanid": "dde8bc7b15f2c376",
    "x-b3-sampled": "0"
  },
  "envProperties": [
    {
      "name": "app-name",
      "value": "hello-compliance-app-2",
      "type": "TEXT"
    },
    {
      "name": "artifactory-dockerconfigjson",
      "value": "2e58dffe-e0ce-49e9-9156-798b062cbdb7",
      "type": "INTEGRATION",
      "path": "parameters.docker_config_json"
    },
    {
      "name": "cluster-name",
      "value": "cocoa-dev",
      "type": "TEXT"
    },
    {
      "name": "compliance-baseimage",
      "value": "docker-eu-public.artifactory.swg-devops.com/wcp-cd-noncontainerised-team-cd-non-container-base-docker-local/kalyan:kalyan-test-git-1@sha256:f9c5045ebc6afa517c3a63a8518ef2a8ecca8a009b8eff83c812d0f7f66989c1",
      "type": "TEXT"
    },
    {
      "name": "cos-api-key",
      "value": "hiEWkOb/j1LNQu3HXEA6/m5rC9XqyjqZhJO4RGol217uzmBZLx/pSuGZnnyqkKWjfLjEmOkox39xUMz+1CW9uHpuPvid1Nw4ZW+tetZm4HJN8NJudkkxHHHQKLdN7hTTmso/CpYujdG4OuelWHmodw==",
      "type": "SECURE"
    },
    {
      "name": "cos-bucket-name",
      "value": "cocoa-development",
      "type": "TEXT"
    },
    {
      "name": "cos-endpoint",
      "value": "s3.us-south.cloud-object-storage.appdomain.cloud",
      "type": "TEXT"
    },
    {
      "name": "cra-generate-cyclonedx-format",
      "value": "1",
      "type": "TEXT"
    },
    {
      "name": "custom-image-tag",
      "value": "",
      "type": "TEXT"
    },
    {
      "name": "dev-cluster-namespace",
      "value": "default",
      "type": "TEXT"
    },
    {
      "name": "dev-region",
      "value": "ibm:yp:us-south",
      "type": "TEXT"
    },
    {
      "name": "dev-resource-group",
      "value": "Default",
      "type": "TEXT"
    },
    {
      "name": "doi-environment",
      "value": "",
      "type": "TEXT"
    },
    {
      "name": "doi-toolchain-id",
      "value": "",
      "type": "TEXT"
    },
    {
      "name": "evidence-repo",
      "value": "ea9d7ff7-e9ae-48d4-9ded-eb2fe21746a1",
      "type": "INTEGRATION",
      "path": "parameters.repo_url"
    },
    {
      "name": "gara-signing-credential",
      "value": "sB5sb4+jabd2Qd9zCYrr0boMRDJtQKQsodGGL8PPeDjy8fzsCycm0MYx9QX6lPMzB6cyMQD0exMTTPAxe2rX+R+uqT01Jc6CW4vw6A//r/U=",
      "type": "SECURE"
    },
    {
      "name": "gara-signing-key",
      "value": "",
      "type": "SECURE"
    },
    {
      "name": "git-token",
      "value": "",
      "type": "SECURE"
    },
    {
      "name": "ibmcloud-api-key",
      "value": "ipmuc6KwU/nut1LXlR6ab9LGWeZYirFYB5VIQ3RqmCtV4lVnr4NRMYNB7XpyjAGKzYZMw3GSKK98g7CbxxaqlIxNz1P4wFE3aMgMEVb9DsRJ52ge26+RMu0nLWOK7tUa6hz4yOHhxkq0nog7QePxWg==",
      "type": "SECURE"
    },
    {
      "name": "incident-repo",
      "value": "1c9e5a02-3af7-4dc0-9ae0-0b03b5fb61be",
      "type": "INTEGRATION",
      "path": "parameters.repo_url"
    },
    {
      "name": "inventory-repo",
      "value": "c9b4e68f-fa67-44a1-8405-8e7601e7c780",
      "type": "INTEGRATION",
      "path": "parameters.repo_url"
    },
    {
      "name": "opt-in-dynamic-api-scan",
      "value": "1",
      "type": "TEXT"
    },
    {
      "name": "opt-in-dynamic-scan",
      "value": "1",
      "type": "TEXT"
    },
    {
      "name": "opt-in-dynamic-ui-scan",
      "value": "1",
      "type": "TEXT"
    },
    {
      "name": "opt-in-sonar",
      "value": "1",
      "type": "TEXT"
    },
    {
      "name": "opt-out-v1-evidence",
      "value": "1",
      "type": "TEXT"
    },
    {
      "name": "pipeline-config",
      "value": ".pipeline-config.yaml",
      "type": "TEXT"
    },
    {
      "name": "pipeline-config-branch",
      "value": "master",
      "type": "TEXT"
    },
    {
      "name": "pipeline-config-repo",
      "value": "",
      "type": "TEXT"
    },
    {
      "name": "pipeline-debug",
      "value": "1",
      "type": "SINGLE_SELECT"
    },
    {
      "name": "pipeline-dockerconfigjson",
      "value": "f0aa8709-abd2-49b1-af83-5c6fd1d55552",
      "type": "INTEGRATION",
      "path": "parameters.docker_config_json"
    },
    {
      "name": "pipeline-dockerconfigjson-orig",
      "value": "5LtqTcKqPvI5QGYr+a4U7GDlhs0Xl3QRAsaRt7Hv9Abqv3jNKlc6uUZ5rfCu7xXoO1v+HJS4caNMMeHHu1mZOQ==",
      "type": "SECURE"
    },
    {
      "name": "product-type",
      "value": "PRD",
      "type": "TEXT"
    },
    {
      "name": "registry-namespace",
      "value": "cocoa-development",
      "type": "TEXT"
    },
    {
      "name": "registry-region",
      "value": "ibm:yp:us-south",
      "type": "TEXT"
    },
    {
      "name": "slack-notifications",
      "value": "0",
      "type": "TEXT"
    },
    {
      "name": "sonarqube",
      "value": "sonarqube",
      "type": "INTEGRATION"
    },
    {
      "name": "sonarqube-config",
      "value": "default",
      "type": "TEXT"
    },
    {
      "name": "subpipeline-webhook-token",
      "value": "vlY2vnTZwIHX4odcB2WPm+rWvBZ/mupnDCuNOCbhN1DlCqDEtKnp1oMK/ODTyIl0B4ZAxNV/zNhybnejoG9HoGiYPWBgsifwTNfWnOuvIBqYE5viMrV1TppFJNqdon0Nl1FgBY/3Ip5YLz/6Reb2NKTI+qfJwtICgFHbSJLlbnI=",
      "type": "SECURE"
    },
    {
      "name": "version",
      "value": "v1",
      "type": "TEXT"
    }
  ],
  "listenerName": "async-stage-listener",
  "pipelineDefinitionId": "77ae2ec4-c40c-4c58-87a2-97b827c5e980",
  "trigger": {
    "type": "generic",
    "name": "Subpipeline Webhook Trigger",
    "properties": [],
    "secret": {
      "value": "vlY2vnTZwIHX4odcB2WPm+rWvBZ/mupnDCuNOCbhN1DlCqDEtKnp1oMK/ODTyIl0B4ZAxNV/zNhybnejoG9HoGiYPWBgsifwTNfWnOuvIBqYE5viMrV1TppFJNqdon0Nl1FgBY/3Ip5YLz/6Reb2NKTI+qfJwtICgFHbSJLlbnI=",
      "type": "tokenMatches",
      "source": "header",
      "keyName": "x-async-stage-token"
    },
    "eventListener": "async-stage-listener",
    "concurrency": {
      "limited": false
    },
    "id": "8bd5db39-0d27-493a-8693-32425d5229cb"
  },
  "workerId": "08936d23-cd83-49ba-8b9c-92e7ec29302c",
  "workerName": "public",
  "type": "pipeline_run",
  "created": "2023-02-22T05:21:08.285Z",
  "updated_at": "2023-02-22T05:21:09.766Z",
  "updated_at_timestamp": 1677043269766,
  "created_timestamp": 1677043268285,
  "resources": [
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "TriggerBinding",
      "metadata": {
        "name": "app-preview-pr-binding"
      },
      "spec": {
        "params": [
          {
            "name": "pipeline-name",
            "value": "app-preview-pr-pipeline"
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "Task",
      "metadata": {
        "name": "app-preview-pr-finish"
      },
      "spec": {
        "params": [
          {
            "name": "compliance-baseimage",
            "description": "base image to run most of the built-in pipeline code"
          },
          {
            "name": "unit-tests-state",
            "description": "Succeeded | Failed"
          },
          {
            "name": "containerize-state",
            "description": "Succeeded | Failed"
          },
          {
            "name": "scan-artifact-state",
            "description": "Succeeded | Failed"
          },
          {
            "name": "app-preview-state",
            "description": "Succeeded | Failed"
          },
          {
            "name": "acceptance-tests-state",
            "description": "Succeeded | Failed"
          },
          {
            "name": "pr-pipeline-state",
            "description": "Succeeded | Failed"
          },
          {
            "name": "pipeline-debug",
            "description": "Pipeline debug mode",
            "default": "0"
          }
        ],
        "workspaces": [
          {
            "name": "artifacts",
            "mountPath": "/artifacts"
          }
        ],
        "volumes": [
          {
            "name": "pipeline",
            "emptyDir": {}
          },
          {
            "name": "pipelinectl",
            "emptyDir": {}
          },
          {
            "name": "config",
            "emptyDir": {}
          },
          {
            "name": "dind-certs",
            "emptyDir": {}
          },
          {
            "name": "environment-properties",
            "configMap": {
              "name": "environment-properties"
            }
          },
          {
            "name": "secure-properties",
            "secret": {
              "secretName": "secure-properties"
            }
          },
          {
            "name": "toolchain",
            "configMap": {
              "name": "toolchain"
            }
          }
        ],
        "stepTemplate": {
          "env": [
            {
              "name": "ONE_PIPELINE_PATH",
              "value": "/opt/one-pipeline"
            },
            {
              "name": "WORKSPACE",
              "value": "$(workspaces.artifacts.path)"
            },
            {
              "name": "PIPELINE_RUN_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.labels['tekton.dev/pipelineRun']"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_ID",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_URL",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/pipeline-run-url']"
                }
              }
            },
            {
              "name": "BUILD_NUMBER",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/build-number']"
                }
              }
            },
            {
              "name": "PIPELINE_ID",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/pipeline-id']"
                }
              }
            },
            {
              "name": "TRIGGER_TYPE",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/trigger-type']"
                }
              }
            },
            {
              "name": "TRIGGER_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/trigger-name']"
                }
              }
            },
            {
              "name": "TRIGGERED_BY",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/triggered-by']"
                }
              }
            },
            {
              "name": "PIPELINE_DEBUG",
              "value": "$(params.pipeline-debug)"
            },
            {
              "name": "DOCKER_HOST",
              "value": "tcp://localhost:2376"
            },
            {
              "name": "DOCKER_TLS_VERIFY",
              "value": "1"
            },
            {
              "name": "DOCKER_CERT_PATH",
              "value": "/certs/client"
            },
            {
              "name": "TASK_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.labels['tekton.dev/pipelineTask']"
                }
              }
            }
          ]
        },
        "steps": [
          {
            "name": "prepare",
            "image": "$(params.compliance-baseimage)",
            "workingDir": "$(workspaces.artifacts.path)",
            "volumeMounts": [
              {
                "name": "pipeline",
                "mountPath": "/usr/share/one-pipeline"
              },
              {
                "name": "pipelinectl",
                "mountPath": "/usr/share/cocoa"
              },
              {
                "name": "config",
                "mountPath": "/config"
              },
              {
                "name": "environment-properties",
                "mountPath": "/config/environment-properties"
              },
              {
                "name": "secure-properties",
                "mountPath": "/config/secure-properties"
              },
              {
                "name": "toolchain",
                "mountPath": "/toolchain"
              }
            ],
            "env": [
              {
                "name": "STEP_NAME",
                "value": "prepare"
              }
            ],
            "script": "#!/bin/bash\n\nset -e\n\nif [[ \"$PIPELINE_DEBUG\" == 1 ]]; then\n  set -x\n  trap env EXIT\nfi\nwhile read file; do\n  ln -snf \"$file\" \"/config/$(basename \"$file\")\"\ndone < <(find '/config/environment-properties' -type f)\n\nwhile read file; do\n  ln -snf \"$file\" \"/config/$(basename \"$file\")\"\ndone < <(find '/config/secure-properties' -type f)\n\ncp -r /opt/one-pipeline /usr/share\ncp -r /opt/cocoa/bin /usr/share/cocoa\n"
          },
          {
            "name": "app-preview-steps-checks",
            "image": "$(params.compliance-baseimage)",
            "workingDir": "$(workspaces.artifacts.path)",
            "volumeMounts": [
              {
                "name": "pipeline",
                "mountPath": "/opt/one-pipeline"
              },
              {
                "name": "pipelinectl",
                "mountPath": "/opt/cocoa"
              },
              {
                "name": "config",
                "mountPath": "/config"
              },
              {
                "name": "environment-properties",
                "mountPath": "/config/environment-properties"
              },
              {
                "name": "secure-properties",
                "mountPath": "/config/secure-properties"
              },
              {
                "name": "toolchain",
                "mountPath": "/toolchain"
              }
            ],
            "env": [
              {
                "name": "CONTAINERIZE_STATE",
                "value": "$(params.containerize-state)"
              },
              {
                "name": "UNIT_TESTS_STATE",
                "value": "$(params.unit-tests-state)"
              },
              {
                "name": "SCAN_ARTIFACT_STATE",
                "value": "$(params.scan-artifact-state)"
              },
              {
                "name": "APP_PREVIEW_STATE",
                "value": "$(params.app-preview-state)"
              },
              {
                "name": "ACCEPTANCE_TESTS_STATE",
                "value": "$(params.acceptance-tests-state)"
              },
              {
                "name": "PR_PIPELINE_STATE",
                "value": "$(params.pr-pipeline-state)"
              },
              {
                "name": "STEP_NAME",
                "value": "app-preview-steps-checks"
              }
            ],
            "script": "#!/bin/bash\n\nset -e -o pipefail\n\nif [ \"$PIPELINE_DEBUG\" == 1 ]; then\n  pwd\n  env\n  trap env EXIT\n  set -x\nfi\npipeline_data=\"${WORKSPACE}/pipeline.data\"\n# shellcheck disable=SC1090\nsource \"$pipeline_data\"\n\nexport PATH=\"$PATH:/opt/cocoa/bin\"\n\ncd \"$WORKSPACE\"\n\nif [ \"${CONTAINERIZE_STATE}\" = \"Succeeded\" ]; then\n  CONTAINERIZE_STATE=\"success\"\nelse\n  CONTAINERIZE_STATE=\"failure\"\nfi\n\nif [ \"${UNIT_TESTS_STATE}\" = \"Succeeded\" ]; then\n  UNIT_TESTS_STATE=\"success\"\nelse\n  UNIT_TESTS_STATE=\"failure\"\nfi\n\nif [ \"${SCAN_ARTIFACT_STATE}\" = \"Succeeded\" ]; then\n  SCAN_ARTIFACT_STATE=\"success\"\nelse\n  SCAN_ARTIFACT_STATE=\"failure\"\nfi\n\nif [ \"${APP_PREVIEW_STATE}\" = \"Succeeded\" ]; then\n  APP_PREVIEW_STATE=\"success\"\nelse\n  APP_PREVIEW_STATE=\"failure\"\nfi\n\nif [ \"${ACCEPTANCE_TESTS_STATE}\" = \"Succeeded\" ]; then\n  ACCEPTANCE_TESTS_STATE=\"success\"\nelse\n  ACCEPTANCE_TESTS_STATE=\"failure\"\nfi\n\nif [ \"${PR_PIPELINE_STATE}\" = \"Succeeded\" ]; then\n  PR_PIPELINE_STATE=\"success\"\nelse\n  PR_PIPELINE_STATE=\"failure\"\nfi\n\n. \"${ONE_PIPELINE_PATH}\"/tools/retry\n\n# Add status checks for the additional tasks for the App review PR pipeline\n# build-containerize\n. \"${ONE_PIPELINE_PATH}\"/internal/github/set_status \\\n  \"${CONTAINERIZE_STATE}\"  \\\n  \"tekton/containerize\" \\\n  \"Containerization done.\" \\\n  \"build-containerize\" \\\n  \"run-stage\"\n\n# code-unit-tests\n. \"${ONE_PIPELINE_PATH}\"/internal/github/set_status \\\n  \"${UNIT_TESTS_STATE}\"  \\\n  \"tekton/code-unit-tests\" \\\n  \"Code unit tests done.\" \\\n  \"code-unit-tests\" \\\n  \"run-stage\"\n\n# build-scan-artifact\n. \"${ONE_PIPELINE_PATH}\"/internal/github/set_status \\\n  \"${SCAN_ARTIFACT_STATE}\"  \\\n  \"tekton/scan-artifact\" \\\n  \"Artifact(s) scanned.\" \\\n  \"build-scan-artifact\" \\\n  \"run-stage\"\n\n# deploy-app-preview\n. \"${ONE_PIPELINE_PATH}\"/internal/github/set_status \\\n  \"${APP_PREVIEW_STATE}\"  \\\n  \"tekton/app-preview\" \\\n  \"Application preview deployed.\" \\\n  \"deploy-app-preview\" \\\n  \"run-stage\"\n\n# deploy-acceptance-tests\n. \"${ONE_PIPELINE_PATH}\"/internal/github/set_status \\\n  \"${ACCEPTANCE_TESTS_STATE}\"  \\\n  \"tekton/acceptance-tests\" \\\n  \"Acceptance tests done.\" \\\n  \"deploy-acceptance-tests\" \\\n  \"run-stage\"\n\n# Send slack message using compliance-base-image script\ncat << EOF > /config/generate_app_preview_slack_message.py\n#!/usr/bin/env python3\nimport json, os\n\nresults = [\n    {\n      \"name\": \"build-containerize\",\n      \"expected\": \"success\",\n      \"actual\": os.getenv(\"CONTAINERIZE_STATE\"),\n    },\n    {\n      \"name\": \"code-unit-tests\",\n      \"expected\": \"success\",\n      \"actual\": os.getenv(\"UNIT_TESTS_STATE\"),\n    },\n    {\n      \"name\": \"build-scan-artifact\",\n      \"expected\": \"success\",\n      \"actual\": os.getenv(\"SCAN_ARTIFACT_STATE\"),\n    },\n    {\n      \"name\": \"deploy-app-preview\",\n      \"expected\": \"success\",\n      \"actual\": os.getenv(\"APP_PREVIEW_STATE\"),\n    },\n    {\n      \"name\": \"deploy-acceptance-tests\",\n      \"expected\": \"success\",\n      \"actual\": os.getenv(\"ACCEPTANCE_TESTS_STATE\"),\n    }\n]\n\nprint(\"Complementary Tasks in <\" + str(os.getenv(\"PIPELINE_RUN_URL\")) + \" | App Preview PR Pipeline>\")\n\nfor result in results:\n    if result[\"actual\"] != result[\"expected\"]:\n        print(\":x: Task \\`{taskName}\\` has failed.\".format(taskName=result[\"name\"]))\n    else:\n        print(\":white_check_mark: Task \\`{taskName}\\` was successful.\".format(taskName=result[\"name\"]))\n\nEOF\n\ncat /config/generate_app_preview_slack_message.py\nchmod +x /config/generate_app_preview_slack_message.py\n\n\"/config/generate_app_preview_slack_message.py\" | \"${ONE_PIPELINE_PATH}/internal/slack/post_message.py\"\n"
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "EventListener",
      "metadata": {
        "name": "app-preview-pr-listener"
      },
      "spec": {
        "triggers": [
          {
            "bindings": [
              {
                "name": "pr-binding"
              },
              {
                "name": "app-preview-pr-binding"
              }
            ],
            "template": {
              "name": "app-preview-pr-template"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "EventListener",
      "metadata": {
        "name": "app-preview-pr-listener-gitlab"
      },
      "spec": {
        "triggers": [
          {
            "bindings": [
              {
                "name": "pr-binding-gitlab"
              },
              {
                "name": "app-preview-pr-binding"
              }
            ],
            "template": {
              "name": "app-preview-pr-template"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "Pipeline",
      "metadata": {
        "name": "app-preview-pr-pipeline"
      },
      "spec": {
        "params": [
          {
            "name": "head-branch",
            "description": "source branch of the PR"
          },
          {
            "name": "head-sha",
            "description": "commit id"
          },
          {
            "name": "head-repo",
            "description": "the name of the PR's repo source"
          },
          {
            "name": "base-branch",
            "description": "target branch of the PR"
          },
          {
            "name": "base-repo",
            "description": "the name of the PR's repo target"
          },
          {
            "name": "base-repo-name",
            "description": "name of the base repo"
          },
          {
            "name": "base-repo-owner",
            "description": "owner of the base repo"
          },
          {
            "name": "pr-url",
            "description": "PR url"
          },
          {
            "name": "commit-timestamp",
            "description": "the timestamp of when the commit pushed"
          },
          {
            "name": "repository-integration",
            "description": "the repo integration name"
          },
          {
            "name": "compliance-baseimage",
            "description": "pipeline baseimage to run most of the built-in pipeline code"
          },
          {
            "name": "pipeline-debug",
            "description": "toggles debug mode for the pipeline",
            "default": "0"
          },
          {
            "name": "pipeline-name",
            "description": "The name of the pipeline to run",
            "default": "app-preview-pr-pipeline"
          },
          {
            "name": "dind-image",
            "description": "Base image to run sidecars"
          },
          {
            "name": "detect-secrets-image",
            "description": "Base image to detect Secrets"
          }
        ],
        "workspaces": [
          {
            "name": "artifacts"
          }
        ],
        "tasks": [
          {
            "name": "code-pr-start",
            "taskRef": {
              "name": "pr-start"
            },
            "workspaces": [
              {
                "name": "artifacts",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "head-branch",
                "value": "$(params.head-branch)"
              },
              {
                "name": "head-sha",
                "value": "$(params.head-sha)"
              },
              {
                "name": "head-repo",
                "value": "$(params.head-repo)"
              },
              {
                "name": "base-branch",
                "value": "$(params.base-branch)"
              },
              {
                "name": "base-repo",
                "value": "$(params.base-repo)"
              },
              {
                "name": "base-repo-name",
                "value": "$(params.base-repo-name)"
              },
              {
                "name": "base-repo-owner",
                "value": "$(params.base-repo-owner)"
              },
              {
                "name": "commit-timestamp",
                "value": "$(params.commit-timestamp)"
              },
              {
                "name": "pr-url",
                "value": "$(params.pr-url)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "next-stage",
                "value": "setup"
              }
            ]
          },
          {
            "name": "code-setup",
            "taskRef": {
              "name": "run-stage"
            },
            "runAfter": [
              "code-pr-start"
            ],
            "workspaces": [
              {
                "name": "app",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "stage",
                "value": "setup"
              },
              {
                "name": "image",
                "value": "$(tasks.code-pr-start.results.image)"
              },
              {
                "name": "script",
                "value": "$(tasks.code-pr-start.results.script)"
              },
              {
                "name": "configmap",
                "value": "$(tasks.code-pr-start.results.configmap)"
              },
              {
                "name": "secret",
                "value": "$(tasks.code-pr-start.results.secret)"
              },
              {
                "name": "abort-on-failure",
                "value": "$(tasks.code-pr-start.results.abort-on-failure)"
              },
              {
                "name": "dind",
                "value": "$(tasks.code-pr-start.results.dind)"
              },
              {
                "name": "image-pull-policy",
                "value": "$(tasks.code-pr-start.results.image-pull-policy)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "next-stage",
                "value": "test"
              },
              {
                "name": "head-branch",
                "value": "$(params.head-branch)"
              },
              {
                "name": "head-sha",
                "value": "$(params.head-sha)"
              },
              {
                "name": "head-repo",
                "value": "$(params.head-repo)"
              },
              {
                "name": "base-branch",
                "value": "$(params.base-branch)"
              },
              {
                "name": "base-repo",
                "value": "$(params.base-repo)"
              },
              {
                "name": "base-repo-name",
                "value": "$(params.base-repo-name)"
              },
              {
                "name": "base-repo-owner",
                "value": "$(params.base-repo-owner)"
              }
            ]
          },
          {
            "name": "code-unit-tests",
            "taskRef": {
              "name": "run-stage"
            },
            "runAfter": [
              "code-setup"
            ],
            "workspaces": [
              {
                "name": "app",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "stage",
                "value": "test"
              },
              {
                "name": "image",
                "value": "$(tasks.code-setup.results.image)"
              },
              {
                "name": "script",
                "value": "$(tasks.code-setup.results.script)"
              },
              {
                "name": "configmap",
                "value": "$(tasks.code-setup.results.configmap)"
              },
              {
                "name": "secret",
                "value": "$(tasks.code-setup.results.secret)"
              },
              {
                "name": "abort-on-failure",
                "value": "$(tasks.code-setup.results.abort-on-failure)"
              },
              {
                "name": "dind",
                "value": "$(tasks.code-setup.results.dind)"
              },
              {
                "name": "image-pull-policy",
                "value": "$(tasks.code-setup.results.image-pull-policy)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "head-branch",
                "value": "$(params.head-branch)"
              },
              {
                "name": "head-sha",
                "value": "$(params.head-sha)"
              },
              {
                "name": "head-repo",
                "value": "$(params.head-repo)"
              },
              {
                "name": "base-branch",
                "value": "$(params.base-branch)"
              },
              {
                "name": "base-repo",
                "value": "$(params.base-repo)"
              },
              {
                "name": "base-repo-name",
                "value": "$(params.base-repo-name)"
              },
              {
                "name": "base-repo-owner",
                "value": "$(params.base-repo-owner)"
              },
              {
                "name": "next-stage",
                "value": "compliance-checks"
              }
            ]
          },
          {
            "name": "code-compliance-checks",
            "taskRef": {
              "name": "run-stage"
            },
            "runAfter": [
              "code-unit-tests"
            ],
            "workspaces": [
              {
                "name": "app",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "workspace-mount-path",
                "value": "/artifacts"
              },
              {
                "name": "stage",
                "value": "compliance-checks"
              },
              {
                "name": "image",
                "value": "$(tasks.code-unit-tests.results.image)"
              },
              {
                "name": "script",
                "value": "$(tasks.code-unit-tests.results.script)"
              },
              {
                "name": "configmap",
                "value": "$(tasks.code-unit-tests.results.configmap)"
              },
              {
                "name": "secret",
                "value": "$(tasks.code-unit-tests.results.secret)"
              },
              {
                "name": "abort-on-failure",
                "value": "$(tasks.code-unit-tests.results.abort-on-failure)"
              },
              {
                "name": "dind",
                "value": "$(tasks.code-unit-tests.results.dind)"
              },
              {
                "name": "image-pull-policy",
                "value": "$(tasks.code-unit-tests.results.image-pull-policy)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "pipeline-name",
                "value": "$(params.pipeline-name)"
              },
              {
                "name": "next-stage",
                "value": "containerize"
              }
            ]
          },
          {
            "name": "build-containerize",
            "taskRef": {
              "name": "run-stage"
            },
            "runAfter": [
              "code-compliance-checks"
            ],
            "workspaces": [
              {
                "name": "app",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "stage",
                "value": "containerize"
              },
              {
                "name": "image",
                "value": "$(tasks.code-compliance-checks.results.image)"
              },
              {
                "name": "script",
                "value": "$(tasks.code-compliance-checks.results.script)"
              },
              {
                "name": "configmap",
                "value": "$(tasks.code-compliance-checks.results.configmap)"
              },
              {
                "name": "secret",
                "value": "$(tasks.code-compliance-checks.results.secret)"
              },
              {
                "name": "abort-on-failure",
                "value": "$(tasks.code-compliance-checks.results.abort-on-failure)"
              },
              {
                "name": "dind",
                "value": "$(tasks.code-compliance-checks.results.dind)"
              },
              {
                "name": "image-pull-policy",
                "value": "$(tasks.code-compliance-checks.results.image-pull-policy)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "head-branch",
                "value": "$(params.head-branch)"
              },
              {
                "name": "head-sha",
                "value": "$(params.head-sha)"
              },
              {
                "name": "head-repo",
                "value": "$(params.head-repo)"
              },
              {
                "name": "base-branch",
                "value": "$(params.base-branch)"
              },
              {
                "name": "base-repo",
                "value": "$(params.base-repo)"
              },
              {
                "name": "base-repo-name",
                "value": "$(params.base-repo-name)"
              },
              {
                "name": "base-repo-owner",
                "value": "$(params.base-repo-owner)"
              },
              {
                "name": "next-stage",
                "value": "scan-artifact"
              }
            ]
          },
          {
            "name": "build-scan-artifact",
            "taskRef": {
              "name": "run-stage"
            },
            "runAfter": [
              "build-containerize"
            ],
            "workspaces": [
              {
                "name": "app",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "stage",
                "value": "scan-artifact"
              },
              {
                "name": "image",
                "value": "$(tasks.build-containerize.results.image)"
              },
              {
                "name": "script",
                "value": "$(tasks.build-containerize.results.script)"
              },
              {
                "name": "configmap",
                "value": "$(tasks.build-containerize.results.configmap)"
              },
              {
                "name": "secret",
                "value": "$(tasks.build-containerize.results.secret)"
              },
              {
                "name": "abort-on-failure",
                "value": "$(tasks.build-containerize.results.abort-on-failure)"
              },
              {
                "name": "dind",
                "value": "$(tasks.build-containerize.results.dind)"
              },
              {
                "name": "image-pull-policy",
                "value": "$(tasks.build-containerize.results.image-pull-policy)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "head-branch",
                "value": "$(params.head-branch)"
              },
              {
                "name": "head-sha",
                "value": "$(params.head-sha)"
              },
              {
                "name": "head-repo",
                "value": "$(params.head-repo)"
              },
              {
                "name": "base-branch",
                "value": "$(params.base-branch)"
              },
              {
                "name": "base-repo",
                "value": "$(params.base-repo)"
              },
              {
                "name": "base-repo-name",
                "value": "$(params.base-repo-name)"
              },
              {
                "name": "base-repo-owner",
                "value": "$(params.base-repo-owner)"
              },
              {
                "name": "next-stage",
                "value": "deploy"
              }
            ]
          },
          {
            "name": "deploy-app-preview",
            "taskRef": {
              "name": "run-stage"
            },
            "runAfter": [
              "build-scan-artifact"
            ],
            "workspaces": [
              {
                "name": "app",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "stage",
                "value": "deploy-app-preview"
              },
              {
                "name": "image",
                "value": "$(tasks.build-scan-artifact.results.image)"
              },
              {
                "name": "script",
                "value": "$(tasks.build-scan-artifact.results.script)"
              },
              {
                "name": "configmap",
                "value": "$(tasks.build-scan-artifact.results.configmap)"
              },
              {
                "name": "secret",
                "value": "$(tasks.build-scan-artifact.results.secret)"
              },
              {
                "name": "abort-on-failure",
                "value": "$(tasks.build-scan-artifact.results.abort-on-failure)"
              },
              {
                "name": "dind",
                "value": "$(tasks.build-scan-artifact.results.dind)"
              },
              {
                "name": "image-pull-policy",
                "value": "$(tasks.build-scan-artifact.results.image-pull-policy)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "head-branch",
                "value": "$(params.head-branch)"
              },
              {
                "name": "head-sha",
                "value": "$(params.head-sha)"
              },
              {
                "name": "head-repo",
                "value": "$(params.head-repo)"
              },
              {
                "name": "base-branch",
                "value": "$(params.base-branch)"
              },
              {
                "name": "base-repo",
                "value": "$(params.base-repo)"
              },
              {
                "name": "base-repo-name",
                "value": "$(params.base-repo-name)"
              },
              {
                "name": "base-repo-owner",
                "value": "$(params.base-repo-owner)"
              },
              {
                "name": "next-stage",
                "value": "acceptance-test"
              }
            ]
          },
          {
            "name": "deploy-acceptance-tests",
            "taskRef": {
              "name": "run-stage"
            },
            "runAfter": [
              "deploy-app-preview"
            ],
            "workspaces": [
              {
                "name": "app",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "stage",
                "value": "acceptance-test"
              },
              {
                "name": "image",
                "value": "$(tasks.deploy-app-preview.results.image)"
              },
              {
                "name": "script",
                "value": "$(tasks.deploy-app-preview.results.script)"
              },
              {
                "name": "configmap",
                "value": "$(tasks.deploy-app-preview.results.configmap)"
              },
              {
                "name": "secret",
                "value": "$(tasks.deploy-app-preview.results.secret)"
              },
              {
                "name": "abort-on-failure",
                "value": "$(tasks.deploy-app-preview.results.abort-on-failure)"
              },
              {
                "name": "dind",
                "value": "$(tasks.deploy-app-preview.results.dind)"
              },
              {
                "name": "image-pull-policy",
                "value": "$(tasks.deploy-app-preview.results.image-pull-policy)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "head-branch",
                "value": "$(params.head-branch)"
              },
              {
                "name": "head-sha",
                "value": "$(params.head-sha)"
              },
              {
                "name": "head-repo",
                "value": "$(params.head-repo)"
              },
              {
                "name": "base-branch",
                "value": "$(params.base-branch)"
              },
              {
                "name": "base-repo",
                "value": "$(params.base-repo)"
              },
              {
                "name": "base-repo-name",
                "value": "$(params.base-repo-name)"
              },
              {
                "name": "base-repo-owner",
                "value": "$(params.base-repo-owner)"
              }
            ]
          },
          {
            "name": "code-pr-finish",
            "runAfter": [
              "deploy-acceptance-tests"
            ],
            "taskRef": {
              "name": "pr-finish"
            },
            "workspaces": [
              {
                "name": "artifacts",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "detect-secrets-image",
                "value": "$(params.detect-secrets-image)"
              },
              {
                "name": "dind-image",
                "value": "$(params.dind-image)"
              }
            ]
          }
        ],
        "finally": [
          {
            "name": "app-preview-pr-finish",
            "taskRef": {
              "name": "app-preview-pr-finish"
            },
            "workspaces": [
              {
                "name": "artifacts",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "unit-tests-state",
                "value": "$(tasks.code-unit-tests.status)"
              },
              {
                "name": "containerize-state",
                "value": "$(tasks.build-containerize.status)"
              },
              {
                "name": "scan-artifact-state",
                "value": "$(tasks.build-scan-artifact.status)"
              },
              {
                "name": "app-preview-state",
                "value": "$(tasks.deploy-app-preview.status)"
              },
              {
                "name": "acceptance-tests-state",
                "value": "$(tasks.deploy-acceptance-tests.status)"
              },
              {
                "name": "pr-pipeline-state",
                "value": "$(tasks.code-pr-finish.status)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              }
            ]
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "TriggerTemplate",
      "metadata": {
        "name": "app-preview-pr-template"
      },
      "spec": {
        "params": [
          {
            "name": "app-name",
            "description": "The name of your app"
          },
          {
            "name": "registry-region",
            "description": "The IBM Cloud region for image registry"
          },
          {
            "name": "head-branch",
            "description": "source branch of the PR"
          },
          {
            "name": "head-sha",
            "description": "commit id"
          },
          {
            "name": "head-repo",
            "description": "the name of the PR's repo source"
          },
          {
            "name": "base-branch",
            "description": "target branch of the PR"
          },
          {
            "name": "base-repo",
            "description": "the url of the PR's repo target"
          },
          {
            "name": "base-repo-name",
            "description": "the name of the PR's repo target"
          },
          {
            "name": "base-repo-owner",
            "description": "the owner of the PR's repo target"
          },
          {
            "name": "pr-url",
            "description": "url of the PR"
          },
          {
            "name": "commit-timestamp",
            "description": "the timestamp of when the commit pushed"
          },
          {
            "name": "event-payload",
            "description": "event payload from the trigger webhook",
            "default": ""
          },
          {
            "name": "repository-integration",
            "description": "the repo integration name"
          },
          {
            "name": "artifactory-dockerconfigjson",
            "description": "dockerconfigjson for pullsecrets",
            "default": "eyJhdXRocyI6e319"
          },
          {
            "name": "onepipeline-dockerconfigjson",
            "description": "dockerconfigjson for images used in .pipeline-config.yaml",
            "default": "eyJhdXRocyI6e319"
          },
          {
            "name": "one-pipeline-dockerconfigjson",
            "description": "dockerconfigjson for images used in .pipeline-config.yaml",
            "default": "eyJhdXRocyI6e319"
          },
          {
            "name": "pipeline-dockerconfigjson",
            "description": "dockerconfigjson for images used in .pipeline-config.yaml",
            "default": "eyJhdXRocyI6e319"
          },
          {
            "name": "pipeline-debug",
            "description": "toggles debug mode for the pipeline"
          },
          {
            "name": "compliance-baseimage",
            "description": "one-pipeline baseimage to run most of the built-in pipeline code",
            "default": "icr.io/continuous-delivery/toolchains/devsecops/baseimage:2.65.4_commons-0.12.8@sha256:e972b0ced98ac9b0cca1f827fada26a272b96debed88e129aace0d672f6bc213"
          },
          {
            "name": "pipeline-name",
            "description": "The name of the pipeline to run",
            "default": "pr-pipeline"
          },
          {
            "name": "dind-image",
            "description": "Base image to run sidecars",
            "default": "icr.io/continuous-delivery/toolchains/devsecops/docker:20.10.16-dind@sha256:6eee20328dac9957475004b572de59d205a200f12f798fb16fd87c19b8604ce7"
          },
          {
            "name": "detect-secrets-image",
            "description": "Base image to detect Secrets",
            "default": "icr.io/continuous-delivery/toolchains/devsecops/detect-secrets:0.13.1.ibm.51.dss@sha256:9f3591c902191b79217b092e585fa1d095def20dce1239b70204aa6c7a22a803"
          },
          {
            "name": "cos-bucket-name",
            "description": "Bucket name in your Cloud Object Storage instance, used as an Evidence Locker",
            "default": ""
          },
          {
            "name": "cos-endpoint",
            "description": "Endpoint of your Cloud Object Storage instance, used as an Evidence Locker",
            "default": ""
          },
          {
            "name": "doi-toolchain-id",
            "description": "toolchain ID"
          },
          {
            "name": "doi-environment",
            "description": "doi target environment, this can be overridden",
            "default": ""
          }
        ],
        "resourcetemplates": [
          {
            "apiVersion": "v1",
            "kind": "Secret",
            "data": {
              ".dockerconfigjson": "$(tt.params.artifactory-dockerconfigjson)"
            },
            "metadata": {
              "name": "artifactory-pull-secret"
            },
            "type": "kubernetes.io/dockerconfigjson"
          },
          {
            "apiVersion": "v1",
            "kind": "Secret",
            "data": {
              ".dockerconfigjson": "$(tt.params.onepipeline-dockerconfigjson)"
            },
            "metadata": {
              "name": "onepipeline-pull-secret"
            },
            "type": "kubernetes.io/dockerconfigjson"
          },
          {
            "apiVersion": "v1",
            "kind": "Secret",
            "data": {
              ".dockerconfigjson": "$(tt.params.one-pipeline-dockerconfigjson)"
            },
            "metadata": {
              "name": "one-pipeline-pull-secret"
            },
            "type": "kubernetes.io/dockerconfigjson"
          },
          {
            "apiVersion": "v1",
            "kind": "Secret",
            "data": {
              ".dockerconfigjson": "$(tt.params.pipeline-dockerconfigjson)"
            },
            "metadata": {
              "name": "pipeline-pull-secret"
            },
            "type": "kubernetes.io/dockerconfigjson"
          },
          {
            "apiVersion": "v1",
            "kind": "ConfigMap",
            "metadata": {
              "name": "trigger",
              "labels": {
                "app.kubernetes.io/version": "1.0.0"
              }
            },
            "data": {
              "payload.json": "$(tt.params.event-payload)"
            }
          },
          {
            "apiVersion": "tekton.dev/v1beta1",
            "kind": "PipelineRun",
            "metadata": {
              "name": "app-preview-pr-pipelinerun"
            },
            "spec": {
              "pipelineRef": {
                "name": "$(tt.params.pipeline-name)"
              },
              "workspaces": [
                {
                  "name": "artifacts",
                  "volumeClaimTemplate": {
                    "spec": {
                      "resources": {
                        "requests": {
                          "storage": "5Gi"
                        }
                      },
                      "volumeMode": "Filesystem",
                      "accessModes": [
                        "ReadWriteOnce"
                      ]
                    }
                  }
                }
              ],
              "params": [
                {
                  "name": "app-name",
                  "value": "$(tt.params.app-name)"
                },
                {
                  "name": "registry-region",
                  "value": "$(tt.params.registry-region)"
                },
                {
                  "name": "head-branch",
                  "value": "$(tt.params.head-branch)"
                },
                {
                  "name": "head-sha",
                  "value": "$(tt.params.head-sha)"
                },
                {
                  "name": "head-repo",
                  "value": "$(tt.params.head-repo)"
                },
                {
                  "name": "base-branch",
                  "value": "$(tt.params.base-branch)"
                },
                {
                  "name": "base-repo",
                  "value": "$(tt.params.base-repo)"
                },
                {
                  "name": "base-repo-name",
                  "value": "$(tt.params.base-repo-name)"
                },
                {
                  "name": "base-repo-owner",
                  "value": "$(tt.params.base-repo-owner)"
                },
                {
                  "name": "commit-timestamp",
                  "value": "$(tt.params.commit-timestamp)"
                },
                {
                  "name": "pr-url",
                  "value": "$(tt.params.pr-url)"
                },
                {
                  "name": "repository-integration",
                  "value": "$(tt.params.repository-integration)"
                },
                {
                  "name": "pipeline-debug",
                  "value": "$(tt.params.pipeline-debug)"
                },
                {
                  "name": "pipeline-name",
                  "value": "$(tt.params.pipeline-name)"
                },
                {
                  "name": "cos-bucket-name",
                  "value": "$(tt.params.cos-bucket-name)"
                },
                {
                  "name": "cos-endpoint",
                  "value": "$(tt.params.cos-endpoint)"
                },
                {
                  "name": "doi-toolchain-id",
                  "value": "$(tt.params.doi-toolchain-id)"
                },
                {
                  "name": "doi-environment",
                  "value": "$(tt.params.doi-environment)"
                },
                {
                  "name": "compliance-baseimage",
                  "value": "$(tt.params.compliance-baseimage)"
                },
                {
                  "name": "dind-image",
                  "value": "$(tt.params.dind-image)"
                },
                {
                  "name": "detect-secrets-image",
                  "value": "$(tt.params.detect-secrets-image)"
                }
              ],
              "podTemplate": {
                "imagePullSecrets": [
                  {
                    "name": "artifactory-pull-secret"
                  },
                  {
                    "name": "onepipeline-pull-secret"
                  },
                  {
                    "name": "one-pipeline-pull-secret"
                  },
                  {
                    "name": "pipeline-pull-secret"
                  }
                ]
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "TriggerBinding",
      "metadata": {
        "name": "async-stage-binding"
      },
      "spec": {
        "params": [
          {
            "name": "event-payload",
            "value": "$(body)"
          },
          {
            "name": "stage",
            "value": "$(body.stage)"
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "EventListener",
      "metadata": {
        "name": "async-stage-listener"
      },
      "spec": {
        "triggers": [
          {
            "binding": {
              "name": "async-stage-binding"
            },
            "template": {
              "name": "async-stage-template"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "Pipeline",
      "metadata": {
        "name": "async-stage-pipeline"
      },
      "spec": {
        "params": [
          {
            "name": "stage",
            "description": "Stage in the config file"
          },
          {
            "name": "pipeline-debug",
            "description": "toggles debug mode for the pipeline",
            "default": "0"
          },
          {
            "name": "compliance-baseimage",
            "description": "pipeline baseimage to run most of the built-in pipeline code"
          },
          {
            "name": "pipeline-name",
            "description": "The name of the pipeline to run",
            "default": "async-stage-pipeline"
          },
          {
            "name": "dind-image",
            "description": "Base image to run sidecars"
          }
        ],
        "workspaces": [
          {
            "name": "artifacts"
          }
        ],
        "tasks": [
          {
            "name": "setup",
            "taskRef": {
              "name": "async-stage-setup"
            },
            "workspaces": [
              {
                "name": "artifacts",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              }
            ]
          },
          {
            "name": "run",
            "taskRef": {
              "name": "run-stage"
            },
            "runAfter": [
              "setup"
            ],
            "workspaces": [
              {
                "name": "app",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "stage",
                "value": "$(params.stage)"
              },
              {
                "name": "image",
                "value": "$(tasks.setup.results.image)"
              },
              {
                "name": "script",
                "value": "$(tasks.setup.results.script)"
              },
              {
                "name": "configmap",
                "value": "$(tasks.setup.results.configmap)"
              },
              {
                "name": "secret",
                "value": "$(tasks.setup.results.secret)"
              },
              {
                "name": "abort-on-failure",
                "value": "$(tasks.setup.results.abort-on-failure)"
              },
              {
                "name": "dind",
                "value": "$(tasks.setup.results.dind)"
              },
              {
                "name": "image-pull-policy",
                "value": "$(tasks.setup.results.image-pull-policy)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "dind-image",
                "value": "$(params.dind-image)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              }
            ]
          },
          {
            "name": "finish",
            "runAfter": [
              "run"
            ],
            "taskRef": {
              "name": "async-stage-finish"
            },
            "workspaces": [
              {
                "name": "artifacts",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              }
            ]
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "TriggerTemplate",
      "metadata": {
        "name": "async-stage-template"
      },
      "spec": {
        "params": [
          {
            "name": "stage",
            "description": "stage task that will run here"
          },
          {
            "name": "event-payload",
            "description": "event payload from the trigger webhook"
          },
          {
            "name": "pipeline-debug",
            "description": "toggles debug mode for the pipeline"
          },
          {
            "name": "artifactory-dockerconfigjson",
            "description": "dockerconfigjson for pullsecrets",
            "default": "eyJhdXRocyI6e319"
          },
          {
            "name": "onepipeline-dockerconfigjson",
            "description": "dockerconfigjson for images used in .one-pipeline.yaml",
            "default": "eyJhdXRocyI6e319"
          },
          {
            "name": "one-pipeline-dockerconfigjson",
            "description": "dockerconfigjson for images used in .pipeline-config.yaml",
            "default": "eyJhdXRocyI6e319"
          },
          {
            "name": "pipeline-dockerconfigjson",
            "description": "dockerconfigjson for images used in .pipeline-config.yaml",
            "default": "eyJhdXRocyI6e319"
          },
          {
            "name": "compliance-baseimage",
            "description": "one-pipeline baseimage to run most of the built-in pipeline code",
            "default": "icr.io/continuous-delivery/toolchains/devsecops/baseimage:2.73.1_commons-0.22.2@sha256:7ff5a67737b3b106d48bd6cd77b1ceb1539d16eba045062f5e30916c186333ae"
          },
          {
            "name": "dind-image",
            "description": "Base image to run sidecars",
            "default": "icr.io/continuous-delivery/toolchains/devsecops/docker:20.10.21-dind@sha256:7abbf564024e76ee5fc2b055b2a0790db660080bf35a7f827739df76c5622044"
          }
        ],
        "resourcetemplates": [
          {
            "apiVersion": "v1",
            "kind": "Secret",
            "data": {
              ".dockerconfigjson": "$(tt.params.artifactory-dockerconfigjson)"
            },
            "metadata": {
              "name": "artifactory-pull-secret"
            },
            "type": "kubernetes.io/dockerconfigjson"
          },
          {
            "apiVersion": "v1",
            "kind": "Secret",
            "data": {
              ".dockerconfigjson": "$(tt.params.onepipeline-dockerconfigjson)"
            },
            "metadata": {
              "name": "onepipeline-pull-secret"
            },
            "type": "kubernetes.io/dockerconfigjson"
          },
          {
            "apiVersion": "v1",
            "kind": "Secret",
            "data": {
              ".dockerconfigjson": "$(tt.params.one-pipeline-dockerconfigjson)"
            },
            "metadata": {
              "name": "one-pipeline-pull-secret"
            },
            "type": "kubernetes.io/dockerconfigjson"
          },
          {
            "apiVersion": "v1",
            "kind": "Secret",
            "data": {
              ".dockerconfigjson": "$(tt.params.pipeline-dockerconfigjson)"
            },
            "metadata": {
              "name": "pipeline-pull-secret"
            },
            "type": "kubernetes.io/dockerconfigjson"
          },
          {
            "apiVersion": "v1",
            "kind": "ConfigMap",
            "metadata": {
              "name": "trigger",
              "labels": {
                "app.kubernetes.io/version": "1.0.0"
              }
            },
            "data": {
              "payload.json": "$(tt.params.event-payload)"
            }
          },
          {
            "apiVersion": "tekton.dev/v1beta1",
            "kind": "PipelineRun",
            "metadata": {
              "name": "stage-$(tt.params.stage)"
            },
            "spec": {
              "pipelineRef": {
                "name": "async-stage-pipeline"
              },
              "workspaces": [
                {
                  "name": "artifacts",
                  "volumeClaimTemplate": {
                    "spec": {
                      "resources": {
                        "requests": {
                          "storage": "5Gi"
                        }
                      },
                      "volumeMode": "Filesystem",
                      "accessModes": [
                        "ReadWriteOnce"
                      ]
                    }
                  }
                }
              ],
              "params": [
                {
                  "name": "stage",
                  "value": "$(tt.params.stage)"
                },
                {
                  "name": "pipeline-debug",
                  "value": "$(tt.params.pipeline-debug)"
                },
                {
                  "name": "compliance-baseimage",
                  "value": "$(tt.params.compliance-baseimage)"
                },
                {
                  "name": "dind-image",
                  "value": "$(tt.params.dind-image)"
                }
              ],
              "podTemplate": {
                "imagePullSecrets": [
                  {
                    "name": "artifactory-pull-secret"
                  },
                  {
                    "name": "onepipeline-pull-secret"
                  },
                  {
                    "name": "one-pipeline-pull-secret"
                  },
                  {
                    "name": "pipeline-pull-secret"
                  }
                ]
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "TriggerBinding",
      "metadata": {
        "name": "cc-binding"
      },
      "spec": {
        "params": [
          {
            "name": "event-payload",
            "value": "$(body)"
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "EventListener",
      "metadata": {
        "name": "cc-listener"
      },
      "spec": {
        "triggers": [
          {
            "binding": {
              "name": "cc-binding"
            },
            "template": {
              "name": "cc-template"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "Pipeline",
      "metadata": {
        "name": "cc-pipeline"
      },
      "spec": {
        "params": [
          {
            "name": "branch",
            "description": "the branch for the git repo",
            "default": "master"
          },
          {
            "name": "commit-id",
            "description": "commit id"
          },
          {
            "name": "commit-timestamp",
            "description": "the timestamp of when the commit pushed"
          },
          {
            "name": "pr-url",
            "description": "pr url",
            "default": ""
          },
          {
            "name": "repository-integration",
            "description": "the repo integration name"
          },
          {
            "name": "repository",
            "description": "app repository owner and name"
          },
          {
            "name": "compliance-baseimage",
            "description": "one-pipeline baseimage to run most of the built-in pipeline code"
          },
          {
            "name": "dind-image",
            "description": "Base image to run sidecars"
          },
          {
            "name": "detect-secrets-image",
            "description": "Base image to detect Secrets"
          },
          {
            "name": "pipeline-name",
            "description": "The name of the pipeline to run",
            "default": "cc-pipeline"
          },
          {
            "name": "pipeline-debug",
            "description": "toggles debug mode for the pipeline",
            "default": "0"
          }
        ],
        "workspaces": [
          {
            "name": "artifacts"
          }
        ],
        "tasks": [
          {
            "name": "cc-start",
            "taskRef": {
              "name": "cc-start"
            },
            "workspaces": [
              {
                "name": "artifacts",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "branch",
                "value": "$(params.branch)"
              },
              {
                "name": "repository-integration",
                "value": "$(params.repository-integration)"
              },
              {
                "name": "commit-id",
                "value": "$(params.commit-id)"
              },
              {
                "name": "commit-timestamp",
                "value": "$(params.commit-timestamp)"
              },
              {
                "name": "pr-url",
                "value": "$(params.pr-url)"
              },
              {
                "name": "repository",
                "value": "$(params.repository)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "next-stage",
                "value": "setup"
              }
            ]
          },
          {
            "name": "cc-setup",
            "taskRef": {
              "name": "run-stage"
            },
            "runAfter": [
              "cc-start"
            ],
            "workspaces": [
              {
                "name": "app",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "stage",
                "value": "setup"
              },
              {
                "name": "image",
                "value": "$(tasks.cc-start.results.image)"
              },
              {
                "name": "script",
                "value": "$(tasks.cc-start.results.script)"
              },
              {
                "name": "configmap",
                "value": "$(tasks.cc-start.results.configmap)"
              },
              {
                "name": "secret",
                "value": "$(tasks.cc-start.results.secret)"
              },
              {
                "name": "abort-on-failure",
                "value": "$(tasks.cc-start.results.abort-on-failure)"
              },
              {
                "name": "dind",
                "value": "$(tasks.cc-start.results.dind)"
              },
              {
                "name": "image-pull-policy",
                "value": "$(tasks.cc-start.results.image-pull-policy)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "pipeline-name",
                "value": "$(params.pipeline-name)"
              },
              {
                "name": "next-stage",
                "value": "static-scan"
              }
            ]
          },
          {
            "name": "cc-static-scan",
            "taskRef": {
              "name": "run-stage"
            },
            "runAfter": [
              "cc-setup"
            ],
            "workspaces": [
              {
                "name": "app",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "stage",
                "value": "static-scan"
              },
              {
                "name": "image",
                "value": "$(tasks.cc-setup.results.image)"
              },
              {
                "name": "script",
                "value": "$(tasks.cc-setup.results.script)"
              },
              {
                "name": "configmap",
                "value": "$(tasks.cc-setup.results.configmap)"
              },
              {
                "name": "secret",
                "value": "$(tasks.cc-setup.results.secret)"
              },
              {
                "name": "abort-on-failure",
                "value": "$(tasks.cc-setup.results.abort-on-failure)"
              },
              {
                "name": "dind",
                "value": "$(tasks.cc-setup.results.dind)"
              },
              {
                "name": "image-pull-policy",
                "value": "$(tasks.cc-setup.results.image-pull-policy)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "pipeline-name",
                "value": "$(params.pipeline-name)"
              },
              {
                "name": "next-stage",
                "value": "dynamic-scan"
              }
            ]
          },
          {
            "name": "cc-dynamic-scan",
            "taskRef": {
              "name": "run-stage"
            },
            "runAfter": [
              "cc-static-scan"
            ],
            "workspaces": [
              {
                "name": "app",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "stage",
                "value": "dynamic-scan"
              },
              {
                "name": "image",
                "value": "$(tasks.cc-static-scan.results.image)"
              },
              {
                "name": "script",
                "value": "$(tasks.cc-static-scan.results.script)"
              },
              {
                "name": "configmap",
                "value": "$(tasks.cc-static-scan.results.configmap)"
              },
              {
                "name": "secret",
                "value": "$(tasks.cc-static-scan.results.secret)"
              },
              {
                "name": "abort-on-failure",
                "value": "$(tasks.cc-static-scan.results.abort-on-failure)"
              },
              {
                "name": "dind",
                "value": "$(tasks.cc-static-scan.results.dind)"
              },
              {
                "name": "image-pull-policy",
                "value": "$(tasks.cc-static-scan.results.image-pull-policy)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "pipeline-name",
                "value": "$(params.pipeline-name)"
              },
              {
                "name": "next-stage",
                "value": "compliance-checks"
              }
            ]
          },
          {
            "name": "cc-compliance-checks",
            "taskRef": {
              "name": "run-stage"
            },
            "runAfter": [
              "cc-dynamic-scan"
            ],
            "workspaces": [
              {
                "name": "app",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "workspace-mount-path",
                "value": "/artifacts"
              },
              {
                "name": "stage",
                "value": "compliance-checks"
              },
              {
                "name": "image",
                "value": "$(tasks.cc-dynamic-scan.results.image)"
              },
              {
                "name": "script",
                "value": "$(tasks.cc-dynamic-scan.results.script)"
              },
              {
                "name": "configmap",
                "value": "$(tasks.cc-dynamic-scan.results.configmap)"
              },
              {
                "name": "secret",
                "value": "$(tasks.cc-dynamic-scan.results.secret)"
              },
              {
                "name": "abort-on-failure",
                "value": "$(tasks.cc-dynamic-scan.results.abort-on-failure)"
              },
              {
                "name": "dind",
                "value": "$(tasks.cc-dynamic-scan.results.dind)"
              },
              {
                "name": "image-pull-policy",
                "value": "$(tasks.cc-dynamic-scan.results.image-pull-policy)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "pipeline-name",
                "value": "$(params.pipeline-name)"
              },
              {
                "name": "next-stage",
                "value": "scan-artifact"
              }
            ]
          },
          {
            "name": "cc-scan-artifact",
            "taskRef": {
              "name": "run-stage"
            },
            "runAfter": [
              "cc-compliance-checks"
            ],
            "workspaces": [
              {
                "name": "app",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "stage",
                "value": "scan-artifact"
              },
              {
                "name": "image",
                "value": "$(tasks.cc-compliance-checks.results.image)"
              },
              {
                "name": "script",
                "value": "$(tasks.cc-compliance-checks.results.script)"
              },
              {
                "name": "configmap",
                "value": "$(tasks.cc-compliance-checks.results.configmap)"
              },
              {
                "name": "secret",
                "value": "$(tasks.cc-compliance-checks.results.secret)"
              },
              {
                "name": "abort-on-failure",
                "value": "$(tasks.cc-compliance-checks.results.abort-on-failure)"
              },
              {
                "name": "dind",
                "value": "$(tasks.cc-compliance-checks.results.dind)"
              },
              {
                "name": "image-pull-policy",
                "value": "$(tasks.cc-compliance-checks.results.image-pull-policy)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "pipeline-name",
                "value": "$(params.pipeline-name)"
              },
              {
                "name": "next-stage",
                "value": "release"
              }
            ]
          },
          {
            "name": "cc-finish",
            "taskRef": {
              "name": "cc-finish"
            },
            "runAfter": [
              "cc-scan-artifact"
            ],
            "workspaces": [
              {
                "name": "artifacts",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              }
            ]
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "TriggerTemplate",
      "metadata": {
        "name": "cc-template"
      },
      "spec": {
        "params": [
          {
            "name": "app-name",
            "description": "The name of your app"
          },
          {
            "name": "registry-region",
            "description": "The IBM Cloud region for image registry"
          },
          {
            "name": "branch",
            "description": "the branch for the git repo",
            "default": "master"
          },
          {
            "name": "repository-integration",
            "description": "the repo integration name"
          },
          {
            "name": "commit-id",
            "description": "commit id"
          },
          {
            "name": "commit-timestamp",
            "description": "the timestamp of when the commit pushed"
          },
          {
            "name": "slack-notifications",
            "description": "toggles slack notifications"
          },
          {
            "name": "pipeline-debug",
            "description": "toggles debug mode for the pipeline"
          },
          {
            "name": "artifactory-dockerconfigjson",
            "description": "dockerconfigjson for pullsecrets",
            "default": "eyJhdXRocyI6e319"
          },
          {
            "name": "onepipeline-dockerconfigjson",
            "description": "dockerconfigjson for images used in .one-pipeline.yaml",
            "default": "eyJhdXRocyI6e319"
          },
          {
            "name": "one-pipeline-dockerconfigjson",
            "description": "dockerconfigjson for images used in .one-pipeline.yaml",
            "default": "eyJhdXRocyI6e319"
          },
          {
            "name": "pipeline-dockerconfigjson",
            "description": "dockerconfigjson for images used in .pipeline-config.yaml",
            "default": "eyJhdXRocyI6e319"
          },
          {
            "name": "cos-bucket-name",
            "description": "Bucket name in your Cloud Object Storage instance, used as an Evidence Locker",
            "default": ""
          },
          {
            "name": "cos-endpoint",
            "description": "Endpoint of your Cloud Object Storage instance, used as an Evidence Locker",
            "default": ""
          },
          {
            "name": "doi-toolchain-id",
            "description": "toolchain ID"
          },
          {
            "name": "doi-environment",
            "description": "doi target environment, this can be overridden",
            "default": ""
          },
          {
            "name": "one-pipeline-config",
            "description": "Configuration file to be used to customize pipeline behavior",
            "default": ".one-pipeline.yaml"
          },
          {
            "name": "one-pipeline-config-repo",
            "description": "repository url of the one-pipeline config"
          },
          {
            "name": "one-pipeline-config-branch",
            "description": "the branch of the one-pipeline config"
          },
          {
            "name": "pipeline-name",
            "description": "The name of the pipeline to run",
            "default": "cc-pipeline"
          },
          {
            "name": "repository",
            "description": "app repo url"
          },
          {
            "name": "event-payload",
            "description": "event payload from the trigger webhook",
            "default": ""
          },
          {
            "name": "compliance-baseimage",
            "description": "one-pipeline baseimage to run most of the built-in pipeline code",
            "default": "icr.io/continuous-delivery/toolchains/devsecops/baseimage:2.73.1_commons-0.22.2@sha256:7ff5a67737b3b106d48bd6cd77b1ceb1539d16eba045062f5e30916c186333ae"
          },
          {
            "name": "dind-image",
            "description": "Base image to run sidecars",
            "default": "icr.io/continuous-delivery/toolchains/devsecops/docker:20.10.21-dind@sha256:7abbf564024e76ee5fc2b055b2a0790db660080bf35a7f827739df76c5622044"
          },
          {
            "name": "detect-secrets-image",
            "default": "icr.io/continuous-delivery/toolchains/devsecops/detect-secrets:0.13.1.ibm.55.dss@sha256:b932a494898b0db8e45de09a066c4dbfc780be4ee51797ae31b1c8934be8a386"
          }
        ],
        "resourcetemplates": [
          {
            "apiVersion": "v1",
            "kind": "Secret",
            "data": {
              ".dockerconfigjson": "$(tt.params.artifactory-dockerconfigjson)"
            },
            "metadata": {
              "name": "artifactory-pull-secret"
            },
            "type": "kubernetes.io/dockerconfigjson"
          },
          {
            "apiVersion": "v1",
            "kind": "Secret",
            "data": {
              ".dockerconfigjson": "$(tt.params.onepipeline-dockerconfigjson)"
            },
            "metadata": {
              "name": "onepipeline-pull-secret"
            },
            "type": "kubernetes.io/dockerconfigjson"
          },
          {
            "apiVersion": "v1",
            "kind": "Secret",
            "data": {
              ".dockerconfigjson": "$(tt.params.one-pipeline-dockerconfigjson)"
            },
            "metadata": {
              "name": "one-pipeline-pull-secret"
            },
            "type": "kubernetes.io/dockerconfigjson"
          },
          {
            "apiVersion": "v1",
            "kind": "Secret",
            "data": {
              ".dockerconfigjson": "$(tt.params.pipeline-dockerconfigjson)"
            },
            "metadata": {
              "name": "pipeline-pull-secret"
            },
            "type": "kubernetes.io/dockerconfigjson"
          },
          {
            "apiVersion": "v1",
            "kind": "ConfigMap",
            "metadata": {
              "name": "trigger",
              "labels": {
                "app.kubernetes.io/version": "1.0.0"
              }
            },
            "data": {
              "payload.json": "$(tt.params.event-payload)"
            }
          },
          {
            "apiVersion": "tekton.dev/v1beta1",
            "kind": "PipelineRun",
            "metadata": {
              "name": "cc-pipelinerun"
            },
            "spec": {
              "pipelineRef": {
                "name": "$(tt.params.pipeline-name)"
              },
              "workspaces": [
                {
                  "name": "artifacts",
                  "volumeClaimTemplate": {
                    "spec": {
                      "resources": {
                        "requests": {
                          "storage": "5Gi"
                        }
                      },
                      "volumeMode": "Filesystem",
                      "accessModes": [
                        "ReadWriteOnce"
                      ]
                    }
                  }
                }
              ],
              "params": [
                {
                  "name": "app-name",
                  "value": "$(tt.params.app-name)"
                },
                {
                  "name": "registry-region",
                  "value": "$(tt.params.registry-region)"
                },
                {
                  "name": "branch",
                  "value": "$(tt.params.branch)"
                },
                {
                  "name": "repository-integration",
                  "value": "$(tt.params.repository-integration)"
                },
                {
                  "name": "slack-notifications",
                  "value": "$(tt.params.slack-notifications)"
                },
                {
                  "name": "pipeline-debug",
                  "value": "$(tt.params.pipeline-debug)"
                },
                {
                  "name": "pipeline-name",
                  "value": "$(tt.params.pipeline-name)"
                },
                {
                  "name": "commit-id",
                  "value": "$(tt.params.commit-id)"
                },
                {
                  "name": "commit-timestamp",
                  "value": "$(tt.params.commit-timestamp)"
                },
                {
                  "name": "cos-bucket-name",
                  "value": "$(tt.params.cos-bucket-name)"
                },
                {
                  "name": "cos-endpoint",
                  "value": "$(tt.params.cos-endpoint)"
                },
                {
                  "name": "doi-toolchain-id",
                  "value": "$(tt.params.doi-toolchain-id)"
                },
                {
                  "name": "doi-environment",
                  "value": "$(tt.params.doi-environment)"
                },
                {
                  "name": "one-pipeline-config",
                  "value": "$(tt.params.one-pipeline-config)"
                },
                {
                  "name": "one-pipeline-config-repo",
                  "value": "$(tt.params.one-pipeline-config-repo)"
                },
                {
                  "name": "one-pipeline-config-branch",
                  "value": "$(tt.params.one-pipeline-config-branch)"
                },
                {
                  "name": "repository",
                  "value": "$(tt.params.repository)"
                },
                {
                  "name": "compliance-baseimage",
                  "value": "$(tt.params.compliance-baseimage)"
                },
                {
                  "name": "dind-image",
                  "value": "$(tt.params.dind-image)"
                },
                {
                  "name": "detect-secrets-image",
                  "value": "$(tt.params.detect-secrets-image)"
                }
              ],
              "podTemplate": {
                "imagePullSecrets": [
                  {
                    "name": "artifactory-pull-secret"
                  },
                  {
                    "name": "onepipeline-pull-secret"
                  },
                  {
                    "name": "one-pipeline-pull-secret"
                  },
                  {
                    "name": "pipeline-pull-secret"
                  }
                ]
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "TriggerBinding",
      "metadata": {
        "name": "cd-binding"
      },
      "spec": {
        "params": [
          {
            "name": "event-payload",
            "value": "$(body)"
          },
          {
            "name": "target-environment-ref",
            "value": "$(body.ref)"
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "EventListener",
      "metadata": {
        "name": "cd-listener"
      },
      "spec": {
        "triggers": [
          {
            "binding": {
              "name": "cd-binding"
            },
            "template": {
              "name": "cd-template"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "Pipeline",
      "metadata": {
        "name": "cd-pipeline"
      },
      "spec": {
        "params": [
          {
            "name": "pipeline-debug",
            "description": "toggles debug mode for the pipeline"
          },
          {
            "name": "pipeline-name",
            "description": "The name of the pipeline to run",
            "default": "cd-pipeline"
          },
          {
            "name": "compliance-baseimage",
            "description": "base image to run most of the built-in pipeline code"
          },
          {
            "name": "dind-image",
            "description": "Base image to run sidecars"
          }
        ],
        "workspaces": [
          {
            "name": "artifacts"
          }
        ],
        "tasks": [
          {
            "name": "prod-start",
            "taskRef": {
              "name": "cd-start"
            },
            "workspaces": [
              {
                "name": "artifacts",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "next-stage",
                "value": "setup"
              }
            ]
          },
          {
            "name": "prod-setup",
            "taskRef": {
              "name": "run-stage"
            },
            "runAfter": [
              "prod-start"
            ],
            "workspaces": [
              {
                "name": "app",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "stage",
                "value": "setup"
              },
              {
                "name": "image",
                "value": "$(tasks.prod-start.results.image)"
              },
              {
                "name": "script",
                "value": "$(tasks.prod-start.results.script)"
              },
              {
                "name": "configmap",
                "value": "$(tasks.prod-start.results.configmap)"
              },
              {
                "name": "secret",
                "value": "$(tasks.prod-start.results.secret)"
              },
              {
                "name": "abort-on-failure",
                "value": "$(tasks.prod-start.results.abort-on-failure)"
              },
              {
                "name": "dind",
                "value": "$(tasks.prod-start.results.dind)"
              },
              {
                "name": "image-pull-policy",
                "value": "$(tasks.prod-start.results.image-pull-policy)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "pipeline-name",
                "value": "$(params.pipeline-name)"
              },
              {
                "name": "dind-image",
                "value": "$(params.dind-image)"
              }
            ]
          },
          {
            "name": "prod-change-request",
            "runAfter": [
              "prod-setup"
            ],
            "taskRef": {
              "name": "cd-change-request"
            },
            "workspaces": [
              {
                "name": "artifacts",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "next-stage",
                "value": "deploy"
              }
            ]
          },
          {
            "name": "prod-deployment",
            "taskRef": {
              "name": "run-stage"
            },
            "runAfter": [
              "prod-change-request"
            ],
            "workspaces": [
              {
                "name": "app",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "stage",
                "value": "deploy"
              },
              {
                "name": "image",
                "value": "$(tasks.prod-change-request.results.image)"
              },
              {
                "name": "script",
                "value": "$(tasks.prod-change-request.results.script)"
              },
              {
                "name": "configmap",
                "value": "$(tasks.prod-change-request.results.configmap)"
              },
              {
                "name": "secret",
                "value": "$(tasks.prod-change-request.results.secret)"
              },
              {
                "name": "abort-on-failure",
                "value": "$(tasks.prod-change-request.results.abort-on-failure)"
              },
              {
                "name": "dind",
                "value": "$(tasks.prod-change-request.results.dind)"
              },
              {
                "name": "image-pull-policy",
                "value": "$(tasks.prod-change-request.results.image-pull-policy)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "pipeline-name",
                "value": "$(params.pipeline-name)"
              },
              {
                "name": "next-stage",
                "value": "acceptance-test"
              },
              {
                "name": "dind-image",
                "value": "$(params.dind-image)"
              }
            ]
          },
          {
            "name": "prod-acceptance-tests",
            "runAfter": [
              "prod-deployment"
            ],
            "taskRef": {
              "name": "run-stage"
            },
            "workspaces": [
              {
                "name": "app",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "stage",
                "value": "acceptance-test"
              },
              {
                "name": "image",
                "value": "$(tasks.prod-deployment.results.image)"
              },
              {
                "name": "script",
                "value": "$(tasks.prod-deployment.results.script)"
              },
              {
                "name": "configmap",
                "value": "$(tasks.prod-deployment.results.configmap)"
              },
              {
                "name": "secret",
                "value": "$(tasks.prod-deployment.results.secret)"
              },
              {
                "name": "abort-on-failure",
                "value": "$(tasks.prod-deployment.results.abort-on-failure)"
              },
              {
                "name": "dind",
                "value": "$(tasks.prod-deployment.results.dind)"
              },
              {
                "name": "image-pull-policy",
                "value": "$(tasks.prod-deployment.results.image-pull-policy)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "pipeline-name",
                "value": "$(params.pipeline-name)"
              },
              {
                "name": "dind-image",
                "value": "$(params.dind-image)"
              }
            ]
          },
          {
            "name": "prod-finish",
            "runAfter": [
              "prod-acceptance-tests"
            ],
            "taskRef": {
              "name": "cd-finish"
            },
            "workspaces": [
              {
                "name": "artifacts",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              }
            ]
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "TriggerTemplate",
      "metadata": {
        "name": "cd-template"
      },
      "spec": {
        "params": [
          {
            "name": "artifactory-dockerconfigjson",
            "description": "dockerconfigjson for pullsecrets",
            "default": "eyJhdXRocyI6e319"
          },
          {
            "name": "onepipeline-dockerconfigjson",
            "description": "dockerconfigjson for images used in .pipeline-config.yaml",
            "default": "eyJhdXRocyI6e319"
          },
          {
            "name": "one-pipeline-dockerconfigjson",
            "description": "dockerconfigjson for images used in .pipeline-config.yaml",
            "default": "eyJhdXRocyI6e319"
          },
          {
            "name": "pipeline-dockerconfigjson",
            "description": "dockerconfigjson for images used in .pipeline-config.yaml",
            "default": "eyJhdXRocyI6e319"
          },
          {
            "name": "pipeline-debug",
            "description": "toggles debug mode for the pipeline"
          },
          {
            "name": "pipeline-name",
            "description": "The name of the pipeline to run",
            "default": "cd-pipeline"
          },
          {
            "name": "event-payload",
            "description": "event payload from the trigger webhook",
            "default": ""
          },
          {
            "name": "compliance-baseimage",
            "description": "one-pipeline baseimage to run most of the built-in pipeline code",
            "default": "icr.io/continuous-delivery/toolchains/devsecops/baseimage:2.73.1_commons-0.22.2@sha256:7ff5a67737b3b106d48bd6cd77b1ceb1539d16eba045062f5e30916c186333ae"
          },
          {
            "name": "dind-image",
            "description": "Base image to run sidecars",
            "default": "icr.io/continuous-delivery/toolchains/devsecops/docker:20.10.21-dind@sha256:7abbf564024e76ee5fc2b055b2a0790db660080bf35a7f827739df76c5622044"
          }
        ],
        "resourcetemplates": [
          {
            "apiVersion": "v1",
            "kind": "Secret",
            "data": {
              ".dockerconfigjson": "$(tt.params.artifactory-dockerconfigjson)"
            },
            "metadata": {
              "name": "artifactory-pull-secret"
            },
            "type": "kubernetes.io/dockerconfigjson"
          },
          {
            "apiVersion": "v1",
            "kind": "Secret",
            "data": {
              ".dockerconfigjson": "$(tt.params.onepipeline-dockerconfigjson)"
            },
            "metadata": {
              "name": "onepipeline-pull-secret"
            },
            "type": "kubernetes.io/dockerconfigjson"
          },
          {
            "apiVersion": "v1",
            "kind": "Secret",
            "data": {
              ".dockerconfigjson": "$(tt.params.one-pipeline-dockerconfigjson)"
            },
            "metadata": {
              "name": "one-pipeline-pull-secret"
            },
            "type": "kubernetes.io/dockerconfigjson"
          },
          {
            "apiVersion": "v1",
            "kind": "Secret",
            "data": {
              ".dockerconfigjson": "$(tt.params.pipeline-dockerconfigjson)"
            },
            "metadata": {
              "name": "pipeline-pull-secret"
            },
            "type": "kubernetes.io/dockerconfigjson"
          },
          {
            "apiVersion": "v1",
            "kind": "ConfigMap",
            "metadata": {
              "name": "trigger",
              "labels": {
                "app.kubernetes.io/version": "1.0.0"
              }
            },
            "data": {
              "payload.json": "$(tt.params.event-payload)\n"
            }
          },
          {
            "apiVersion": "tekton.dev/v1beta1",
            "kind": "PipelineRun",
            "metadata": {
              "name": "cd-pipelinerun"
            },
            "spec": {
              "pipelineRef": {
                "name": "$(tt.params.pipeline-name)"
              },
              "workspaces": [
                {
                  "name": "artifacts",
                  "volumeClaimTemplate": {
                    "spec": {
                      "resources": {
                        "requests": {
                          "storage": "5Gi"
                        }
                      },
                      "volumeMode": "Filesystem",
                      "accessModes": [
                        "ReadWriteOnce"
                      ]
                    }
                  }
                }
              ],
              "params": [
                {
                  "name": "pipeline-debug",
                  "value": "$(tt.params.pipeline-debug)"
                },
                {
                  "name": "pipeline-name",
                  "value": "$(tt.params.pipeline-name)"
                },
                {
                  "name": "compliance-baseimage",
                  "value": "$(tt.params.compliance-baseimage)"
                },
                {
                  "name": "dind-image",
                  "value": "$(tt.params.dind-image)"
                }
              ],
              "podTemplate": {
                "imagePullSecrets": [
                  {
                    "name": "artifactory-pull-secret"
                  },
                  {
                    "name": "onepipeline-pull-secret"
                  },
                  {
                    "name": "one-pipeline-pull-secret"
                  },
                  {
                    "name": "pipeline-pull-secret"
                  }
                ]
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "TriggerBinding",
      "metadata": {
        "name": "ci-binding-gitlab"
      },
      "spec": {
        "params": [
          {
            "name": "event-payload",
            "value": "$(body)"
          },
          {
            "name": "branch",
            "value": "$(body.ref)"
          },
          {
            "name": "commit-id",
            "value": "$(body.checkout_sha)"
          },
          {
            "name": "repository",
            "value": "$(body.repository.git_http_url)"
          },
          {
            "name": "commit-timestamp",
            "value": "$(body.commits[0].timestamp)"
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "TriggerBinding",
      "metadata": {
        "name": "ci-binding"
      },
      "spec": {
        "params": [
          {
            "name": "event-payload",
            "value": "$(body)"
          },
          {
            "name": "branch",
            "value": "$(body.ref)"
          },
          {
            "name": "commit-id",
            "value": "$(body.head_commit.id)"
          },
          {
            "name": "commit-timestamp",
            "value": "$(body.repository.updated_at)"
          },
          {
            "name": "repository",
            "value": "$(body.repository.html_url)"
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "EventListener",
      "metadata": {
        "name": "ci-listener-gitlab"
      },
      "spec": {
        "triggers": [
          {
            "binding": {
              "name": "ci-binding-gitlab"
            },
            "template": {
              "name": "ci-template"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "EventListener",
      "metadata": {
        "name": "ci-listener"
      },
      "spec": {
        "triggers": [
          {
            "binding": {
              "name": "ci-binding"
            },
            "template": {
              "name": "ci-template"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "Pipeline",
      "metadata": {
        "name": "ci-pipeline"
      },
      "spec": {
        "params": [
          {
            "name": "branch",
            "description": "the branch for the git repo",
            "default": "master"
          },
          {
            "name": "commit-id",
            "description": "commit id"
          },
          {
            "name": "commit-timestamp",
            "description": "the timestamp of when the commit pushed"
          },
          {
            "name": "pr-url",
            "description": "pr url",
            "default": ""
          },
          {
            "name": "repository-integration",
            "description": "the repo integration name"
          },
          {
            "name": "repository",
            "description": "app repository owner and name"
          },
          {
            "name": "compliance-baseimage",
            "description": "Pipeline baseimage to run most of the built-in pipeline code"
          },
          {
            "name": "dind-image",
            "description": "Base image to run sidecars"
          },
          {
            "name": "detect-secrets-image",
            "description": "Base image to detect Secrets"
          },
          {
            "name": "pipeline-debug",
            "description": "toggles debug mode for the pipeline",
            "default": "0"
          },
          {
            "name": "pipeline-name",
            "description": "The name of the pipeline to run",
            "default": "ci-pipeline"
          }
        ],
        "workspaces": [
          {
            "name": "artifacts"
          }
        ],
        "tasks": [
          {
            "name": "code-ci-start",
            "taskRef": {
              "name": "ci-start"
            },
            "workspaces": [
              {
                "name": "artifacts",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "branch",
                "value": "$(params.branch)"
              },
              {
                "name": "repository-integration",
                "value": "$(params.repository-integration)"
              },
              {
                "name": "commit-id",
                "value": "$(params.commit-id)"
              },
              {
                "name": "commit-timestamp",
                "value": "$(params.commit-timestamp)"
              },
              {
                "name": "pr-url",
                "value": "$(params.pr-url)"
              },
              {
                "name": "repository",
                "value": "$(params.repository)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "next-stage",
                "value": "setup"
              }
            ]
          },
          {
            "name": "code-setup",
            "taskRef": {
              "name": "run-stage"
            },
            "runAfter": [
              "code-ci-start"
            ],
            "workspaces": [
              {
                "name": "app",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "stage",
                "value": "setup"
              },
              {
                "name": "image",
                "value": "$(tasks.code-ci-start.results.image)"
              },
              {
                "name": "script",
                "value": "$(tasks.code-ci-start.results.script)"
              },
              {
                "name": "configmap",
                "value": "$(tasks.code-ci-start.results.configmap)"
              },
              {
                "name": "secret",
                "value": "$(tasks.code-ci-start.results.secret)"
              },
              {
                "name": "abort-on-failure",
                "value": "$(tasks.code-ci-start.results.abort-on-failure)"
              },
              {
                "name": "dind",
                "value": "$(tasks.code-ci-start.results.dind)"
              },
              {
                "name": "image-pull-policy",
                "value": "$(tasks.code-ci-start.results.image-pull-policy)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "pipeline-name",
                "value": "$(params.pipeline-name)"
              },
              {
                "name": "dind-image",
                "value": "$(params.dind-image)"
              },
              {
                "name": "next-stage",
                "value": "test"
              }
            ]
          },
          {
            "name": "code-unit-tests",
            "taskRef": {
              "name": "run-stage"
            },
            "runAfter": [
              "code-setup"
            ],
            "workspaces": [
              {
                "name": "app",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "stage",
                "value": "test"
              },
              {
                "name": "image",
                "value": "$(tasks.code-setup.results.image)"
              },
              {
                "name": "script",
                "value": "$(tasks.code-setup.results.script)"
              },
              {
                "name": "configmap",
                "value": "$(tasks.code-setup.results.configmap)"
              },
              {
                "name": "secret",
                "value": "$(tasks.code-setup.results.secret)"
              },
              {
                "name": "abort-on-failure",
                "value": "$(tasks.code-setup.results.abort-on-failure)"
              },
              {
                "name": "dind",
                "value": "$(tasks.code-setup.results.dind)"
              },
              {
                "name": "image-pull-policy",
                "value": "$(tasks.code-setup.results.image-pull-policy)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "pipeline-name",
                "value": "$(params.pipeline-name)"
              },
              {
                "name": "next-stage",
                "value": "peer-review"
              }
            ]
          },
          {
            "name": "code-peer-review",
            "taskRef": {
              "name": "run-stage"
            },
            "runAfter": [
              "code-unit-tests"
            ],
            "workspaces": [
              {
                "name": "app",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "stage",
                "value": "peer-review"
              },
              {
                "name": "image",
                "value": "$(tasks.code-unit-tests.results.image)"
              },
              {
                "name": "script",
                "value": "$(tasks.code-unit-tests.results.script)"
              },
              {
                "name": "configmap",
                "value": "$(tasks.code-unit-tests.results.configmap)"
              },
              {
                "name": "secret",
                "value": "$(tasks.code-unit-tests.results.secret)"
              },
              {
                "name": "abort-on-failure",
                "value": "$(tasks.code-unit-tests.results.abort-on-failure)"
              },
              {
                "name": "dind",
                "value": "$(tasks.code-unit-tests.results.dind)"
              },
              {
                "name": "image-pull-policy",
                "value": "$(tasks.code-unit-tests.results.image-pull-policy)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "pipeline-name",
                "value": "$(params.pipeline-name)"
              },
              {
                "name": "next-stage",
                "value": "static-scan"
              }
            ]
          },
          {
            "name": "code-static-scan",
            "taskRef": {
              "name": "run-stage"
            },
            "runAfter": [
              "code-peer-review"
            ],
            "workspaces": [
              {
                "name": "app",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "stage",
                "value": "static-scan"
              },
              {
                "name": "image",
                "value": "$(tasks.code-peer-review.results.image)"
              },
              {
                "name": "script",
                "value": "$(tasks.code-peer-review.results.script)"
              },
              {
                "name": "configmap",
                "value": "$(tasks.code-peer-review.results.configmap)"
              },
              {
                "name": "secret",
                "value": "$(tasks.code-peer-review.results.secret)"
              },
              {
                "name": "abort-on-failure",
                "value": "$(tasks.code-peer-review.results.abort-on-failure)"
              },
              {
                "name": "dind",
                "value": "$(tasks.code-peer-review.results.dind)"
              },
              {
                "name": "image-pull-policy",
                "value": "$(tasks.code-peer-review.results.image-pull-policy)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "pipeline-name",
                "value": "$(params.pipeline-name)"
              },
              {
                "name": "next-stage",
                "value": "compliance-checks"
              }
            ]
          },
          {
            "name": "code-compliance-checks",
            "taskRef": {
              "name": "run-stage"
            },
            "runAfter": [
              "code-static-scan"
            ],
            "workspaces": [
              {
                "name": "app",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "workspace-mount-path",
                "value": "/artifacts"
              },
              {
                "name": "stage",
                "value": "compliance-checks"
              },
              {
                "name": "image",
                "value": "$(tasks.code-static-scan.results.image)"
              },
              {
                "name": "script",
                "value": "$(tasks.code-static-scan.results.script)"
              },
              {
                "name": "configmap",
                "value": "$(tasks.code-static-scan.results.configmap)"
              },
              {
                "name": "secret",
                "value": "$(tasks.code-static-scan.results.secret)"
              },
              {
                "name": "abort-on-failure",
                "value": "$(tasks.code-static-scan.results.abort-on-failure)"
              },
              {
                "name": "dind",
                "value": "$(tasks.code-static-scan.results.dind)"
              },
              {
                "name": "image-pull-policy",
                "value": "$(tasks.code-static-scan.results.image-pull-policy)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "pipeline-name",
                "value": "$(params.pipeline-name)"
              },
              {
                "name": "next-stage",
                "value": "containerize"
              }
            ]
          },
          {
            "name": "build-containerize",
            "taskRef": {
              "name": "run-stage"
            },
            "runAfter": [
              "code-compliance-checks"
            ],
            "workspaces": [
              {
                "name": "app",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "stage",
                "value": "containerize"
              },
              {
                "name": "image",
                "value": "$(tasks.code-compliance-checks.results.image)"
              },
              {
                "name": "script",
                "value": "$(tasks.code-compliance-checks.results.script)"
              },
              {
                "name": "configmap",
                "value": "$(tasks.code-compliance-checks.results.configmap)"
              },
              {
                "name": "secret",
                "value": "$(tasks.code-compliance-checks.results.secret)"
              },
              {
                "name": "abort-on-failure",
                "value": "$(tasks.code-compliance-checks.results.abort-on-failure)"
              },
              {
                "name": "dind",
                "value": "$(tasks.code-compliance-checks.results.dind)"
              },
              {
                "name": "image-pull-policy",
                "value": "$(tasks.code-compliance-checks.results.image-pull-policy)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "pipeline-name",
                "value": "$(params.pipeline-name)"
              },
              {
                "name": "next-stage",
                "value": "sign-artifact"
              }
            ]
          },
          {
            "name": "build-sign-artifact",
            "taskRef": {
              "name": "run-stage"
            },
            "runAfter": [
              "build-containerize"
            ],
            "workspaces": [
              {
                "name": "app",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "stage",
                "value": "sign-artifact"
              },
              {
                "name": "image",
                "value": "$(tasks.build-containerize.results.image)"
              },
              {
                "name": "script",
                "value": "$(tasks.build-containerize.results.script)"
              },
              {
                "name": "configmap",
                "value": "$(tasks.build-containerize.results.configmap)"
              },
              {
                "name": "secret",
                "value": "$(tasks.build-containerize.results.secret)"
              },
              {
                "name": "abort-on-failure",
                "value": "$(tasks.build-containerize.results.abort-on-failure)"
              },
              {
                "name": "dind",
                "value": "$(tasks.build-containerize.results.dind)"
              },
              {
                "name": "image-pull-policy",
                "value": "$(tasks.build-containerize.results.image-pull-policy)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "pipeline-name",
                "value": "$(params.pipeline-name)"
              },
              {
                "name": "next-stage",
                "value": "deploy"
              }
            ]
          },
          {
            "name": "deploy-dev",
            "taskRef": {
              "name": "run-stage"
            },
            "runAfter": [
              "build-sign-artifact"
            ],
            "workspaces": [
              {
                "name": "app",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "stage",
                "value": "deploy"
              },
              {
                "name": "image",
                "value": "$(tasks.build-sign-artifact.results.image)"
              },
              {
                "name": "script",
                "value": "$(tasks.build-sign-artifact.results.script)"
              },
              {
                "name": "configmap",
                "value": "$(tasks.build-sign-artifact.results.configmap)"
              },
              {
                "name": "secret",
                "value": "$(tasks.build-sign-artifact.results.secret)"
              },
              {
                "name": "abort-on-failure",
                "value": "$(tasks.build-sign-artifact.results.abort-on-failure)"
              },
              {
                "name": "dind",
                "value": "$(tasks.build-sign-artifact.results.dind)"
              },
              {
                "name": "image-pull-policy",
                "value": "$(tasks.build-sign-artifact.results.image-pull-policy)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "pipeline-name",
                "value": "$(params.pipeline-name)"
              },
              {
                "name": "next-stage",
                "value": "dynamic-scan"
              }
            ]
          },
          {
            "name": "code-dynamic-scan",
            "taskRef": {
              "name": "run-stage"
            },
            "runAfter": [
              "deploy-dev"
            ],
            "workspaces": [
              {
                "name": "app",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "stage",
                "value": "dynamic-scan"
              },
              {
                "name": "image",
                "value": "$(tasks.deploy-dev.results.image)"
              },
              {
                "name": "script",
                "value": "$(tasks.deploy-dev.results.script)"
              },
              {
                "name": "configmap",
                "value": "$(tasks.deploy-dev.results.configmap)"
              },
              {
                "name": "secret",
                "value": "$(tasks.deploy-dev.results.secret)"
              },
              {
                "name": "abort-on-failure",
                "value": "$(tasks.deploy-dev.results.abort-on-failure)"
              },
              {
                "name": "dind",
                "value": "$(tasks.deploy-dev.results.dind)"
              },
              {
                "name": "image-pull-policy",
                "value": "$(tasks.deploy-dev.results.image-pull-policy)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "pipeline-name",
                "value": "$(params.pipeline-name)"
              },
              {
                "name": "next-stage",
                "value": "acceptance-test"
              }
            ]
          },
          {
            "name": "deploy-acceptance-tests",
            "taskRef": {
              "name": "run-stage"
            },
            "runAfter": [
              "code-dynamic-scan"
            ],
            "workspaces": [
              {
                "name": "app",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "stage",
                "value": "acceptance-test"
              },
              {
                "name": "image",
                "value": "$(tasks.code-dynamic-scan.results.image)"
              },
              {
                "name": "script",
                "value": "$(tasks.code-dynamic-scan.results.script)"
              },
              {
                "name": "configmap",
                "value": "$(tasks.code-dynamic-scan.results.configmap)"
              },
              {
                "name": "secret",
                "value": "$(tasks.code-dynamic-scan.results.secret)"
              },
              {
                "name": "abort-on-failure",
                "value": "$(tasks.code-dynamic-scan.results.abort-on-failure)"
              },
              {
                "name": "dind",
                "value": "$(tasks.code-dynamic-scan.results.dind)"
              },
              {
                "name": "image-pull-policy",
                "value": "$(tasks.code-dynamic-scan.results.image-pull-policy)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "pipeline-name",
                "value": "$(params.pipeline-name)"
              },
              {
                "name": "next-stage",
                "value": "scan-artifact"
              }
            ]
          },
          {
            "name": "build-scan-artifact",
            "taskRef": {
              "name": "run-stage"
            },
            "runAfter": [
              "deploy-acceptance-tests"
            ],
            "workspaces": [
              {
                "name": "app",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "stage",
                "value": "scan-artifact"
              },
              {
                "name": "image",
                "value": "$(tasks.deploy-acceptance-tests.results.image)"
              },
              {
                "name": "script",
                "value": "$(tasks.deploy-acceptance-tests.results.script)"
              },
              {
                "name": "configmap",
                "value": "$(tasks.deploy-acceptance-tests.results.configmap)"
              },
              {
                "name": "secret",
                "value": "$(tasks.deploy-acceptance-tests.results.secret)"
              },
              {
                "name": "abort-on-failure",
                "value": "$(tasks.deploy-acceptance-tests.results.abort-on-failure)"
              },
              {
                "name": "dind",
                "value": "$(tasks.deploy-acceptance-tests.results.dind)"
              },
              {
                "name": "image-pull-policy",
                "value": "$(tasks.deploy-acceptance-tests.results.image-pull-policy)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "pipeline-name",
                "value": "$(params.pipeline-name)"
              },
              {
                "name": "next-stage",
                "value": "release"
              }
            ]
          },
          {
            "name": "deploy-release",
            "runAfter": [
              "build-scan-artifact"
            ],
            "taskRef": {
              "name": "run-stage"
            },
            "workspaces": [
              {
                "name": "app",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "stage",
                "value": "release"
              },
              {
                "name": "image",
                "value": "$(tasks.build-scan-artifact.results.image)"
              },
              {
                "name": "script",
                "value": "$(tasks.build-scan-artifact.results.script)"
              },
              {
                "name": "configmap",
                "value": "$(tasks.build-scan-artifact.results.configmap)"
              },
              {
                "name": "secret",
                "value": "$(tasks.build-scan-artifact.results.secret)"
              },
              {
                "name": "abort-on-failure",
                "value": "$(tasks.build-scan-artifact.results.abort-on-failure)"
              },
              {
                "name": "dind",
                "value": "$(tasks.build-scan-artifact.results.dind)"
              },
              {
                "name": "image-pull-policy",
                "value": "$(tasks.build-scan-artifact.results.image-pull-policy)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "pipeline-name",
                "value": "$(params.pipeline-name)"
              }
            ]
          },
          {
            "name": "code-ci-finish",
            "taskRef": {
              "name": "ci-finish"
            },
            "runAfter": [
              "deploy-release"
            ],
            "workspaces": [
              {
                "name": "artifacts",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              }
            ]
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "TriggerTemplate",
      "metadata": {
        "name": "ci-template"
      },
      "spec": {
        "params": [
          {
            "name": "app-name",
            "description": "The name of your app"
          },
          {
            "name": "registry-region",
            "description": "The IBM Cloud region for image registry"
          },
          {
            "name": "branch",
            "description": "the branch for the git repo",
            "default": "master"
          },
          {
            "name": "repository-integration",
            "description": "the repo integration name"
          },
          {
            "name": "commit-id",
            "description": "commit id"
          },
          {
            "name": "commit-timestamp",
            "description": "the timestamp of when the commit pushed"
          },
          {
            "name": "slack-notifications",
            "description": "toggles slack notifications"
          },
          {
            "name": "pipeline-debug",
            "description": "toggles debug mode for the pipeline"
          },
          {
            "name": "artifactory-dockerconfigjson",
            "description": "dockerconfigjson for pullsecrets",
            "default": "eyJhdXRocyI6e319"
          },
          {
            "name": "onepipeline-dockerconfigjson",
            "description": "dockerconfigjson for images used in .pipeline-config.yaml",
            "default": "eyJhdXRocyI6e319"
          },
          {
            "name": "one-pipeline-dockerconfigjson",
            "description": "dockerconfigjson for images used in .pipeline-config.yaml",
            "default": "eyJhdXRocyI6e319"
          },
          {
            "name": "pipeline-dockerconfigjson",
            "description": "dockerconfigjson for images used in .pipeline-config.yaml",
            "default": "eyJhdXRocyI6e319"
          },
          {
            "name": "cos-bucket-name",
            "description": "Bucket name in your Cloud Object Storage instance, used as an Evidence Locker",
            "default": ""
          },
          {
            "name": "cos-endpoint",
            "description": "Endpoint of your Cloud Object Storage instance, used as an Evidence Locker",
            "default": ""
          },
          {
            "name": "doi-toolchain-id",
            "description": "toolchain ID"
          },
          {
            "name": "doi-environment",
            "description": "doi target environment, this can be overridden",
            "default": ""
          },
          {
            "name": "pipeline-config",
            "description": "Configuration file to be used to customize pipeline behavior",
            "default": ".pipeline-config.yaml"
          },
          {
            "name": "pipeline-config-repo",
            "description": "repository url of the pipeline config"
          },
          {
            "name": "pipeline-config-branch",
            "description": "the branch of the pipeline config"
          },
          {
            "name": "pipeline-name",
            "description": "The name of the pipeline to run",
            "default": "ci-pipeline"
          },
          {
            "name": "repository",
            "description": "app repo url"
          },
          {
            "name": "event-payload",
            "description": "event payload from the trigger webhook",
            "default": ""
          },
          {
            "name": "compliance-baseimage",
            "description": "one-pipeline baseimage to run most of the built-in pipeline code",
            "default": "icr.io/continuous-delivery/toolchains/devsecops/baseimage:2.73.1_commons-0.22.2@sha256:7ff5a67737b3b106d48bd6cd77b1ceb1539d16eba045062f5e30916c186333ae"
          },
          {
            "name": "dind-image",
            "description": "Base image to run sidecars",
            "default": "icr.io/continuous-delivery/toolchains/devsecops/docker:20.10.21-dind@sha256:7abbf564024e76ee5fc2b055b2a0790db660080bf35a7f827739df76c5622044"
          },
          {
            "name": "detect-secrets-image",
            "description": "Base image to detect Secrets",
            "default": "icr.io/continuous-delivery/toolchains/devsecops/detect-secrets:0.13.1.ibm.55.dss@sha256:b932a494898b0db8e45de09a066c4dbfc780be4ee51797ae31b1c8934be8a386"
          }
        ],
        "resourcetemplates": [
          {
            "apiVersion": "v1",
            "kind": "Secret",
            "data": {
              ".dockerconfigjson": "$(tt.params.artifactory-dockerconfigjson)"
            },
            "metadata": {
              "name": "artifactory-pull-secret"
            },
            "type": "kubernetes.io/dockerconfigjson"
          },
          {
            "apiVersion": "v1",
            "kind": "Secret",
            "data": {
              ".dockerconfigjson": "$(tt.params.onepipeline-dockerconfigjson)"
            },
            "metadata": {
              "name": "onepipeline-pull-secret"
            },
            "type": "kubernetes.io/dockerconfigjson"
          },
          {
            "apiVersion": "v1",
            "kind": "Secret",
            "data": {
              ".dockerconfigjson": "$(tt.params.one-pipeline-dockerconfigjson)"
            },
            "metadata": {
              "name": "one-pipeline-pull-secret"
            },
            "type": "kubernetes.io/dockerconfigjson"
          },
          {
            "apiVersion": "v1",
            "kind": "Secret",
            "data": {
              ".dockerconfigjson": "$(tt.params.pipeline-dockerconfigjson)"
            },
            "metadata": {
              "name": "pipeline-pull-secret"
            },
            "type": "kubernetes.io/dockerconfigjson"
          },
          {
            "apiVersion": "v1",
            "kind": "ConfigMap",
            "metadata": {
              "name": "trigger",
              "labels": {
                "app.kubernetes.io/version": "1.0.0"
              }
            },
            "data": {
              "payload.json": "$(tt.params.event-payload)"
            }
          },
          {
            "apiVersion": "tekton.dev/v1beta1",
            "kind": "PipelineRun",
            "metadata": {
              "name": "ci-pipelinerun"
            },
            "spec": {
              "pipelineRef": {
                "name": "$(tt.params.pipeline-name)"
              },
              "workspaces": [
                {
                  "name": "artifacts",
                  "volumeClaimTemplate": {
                    "spec": {
                      "resources": {
                        "requests": {
                          "storage": "5Gi"
                        }
                      },
                      "volumeMode": "Filesystem",
                      "accessModes": [
                        "ReadWriteOnce"
                      ]
                    }
                  }
                }
              ],
              "params": [
                {
                  "name": "app-name",
                  "value": "$(tt.params.app-name)"
                },
                {
                  "name": "registry-region",
                  "value": "$(tt.params.registry-region)"
                },
                {
                  "name": "branch",
                  "value": "$(tt.params.branch)"
                },
                {
                  "name": "repository-integration",
                  "value": "$(tt.params.repository-integration)"
                },
                {
                  "name": "slack-notifications",
                  "value": "$(tt.params.slack-notifications)"
                },
                {
                  "name": "pipeline-debug",
                  "value": "$(tt.params.pipeline-debug)"
                },
                {
                  "name": "pipeline-name",
                  "value": "$(tt.params.pipeline-name)"
                },
                {
                  "name": "commit-id",
                  "value": "$(tt.params.commit-id)"
                },
                {
                  "name": "commit-timestamp",
                  "value": "$(tt.params.commit-timestamp)"
                },
                {
                  "name": "cos-bucket-name",
                  "value": "$(tt.params.cos-bucket-name)"
                },
                {
                  "name": "cos-endpoint",
                  "value": "$(tt.params.cos-endpoint)"
                },
                {
                  "name": "doi-toolchain-id",
                  "value": "$(tt.params.doi-toolchain-id)"
                },
                {
                  "name": "doi-environment",
                  "value": "$(tt.params.doi-environment)"
                },
                {
                  "name": "pipeline-config",
                  "value": "$(tt.params.pipeline-config)"
                },
                {
                  "name": "pipeline-config-repo",
                  "value": "$(tt.params.pipeline-config-repo)"
                },
                {
                  "name": "pipeline-config-branch",
                  "value": "$(tt.params.pipeline-config-branch)"
                },
                {
                  "name": "repository",
                  "value": "$(tt.params.repository)"
                },
                {
                  "name": "compliance-baseimage",
                  "value": "$(tt.params.compliance-baseimage)"
                },
                {
                  "name": "dind-image",
                  "value": "$(tt.params.dind-image)"
                },
                {
                  "name": "detect-secrets-image",
                  "value": "$(tt.params.detect-secrets-image)"
                }
              ],
              "podTemplate": {
                "imagePullSecrets": [
                  {
                    "name": "artifactory-pull-secret"
                  },
                  {
                    "name": "onepipeline-pull-secret"
                  },
                  {
                    "name": "one-pipeline-pull-secret"
                  },
                  {
                    "name": "pipeline-pull-secret"
                  }
                ]
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "TriggerBinding",
      "metadata": {
        "name": "dev-mode-cd-binding"
      },
      "spec": {
        "params": [
          {
            "name": "pipeline-name",
            "value": "dev-mode-cd-pipeline"
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "EventListener",
      "metadata": {
        "name": "dev-mode-cd-listener"
      },
      "spec": {
        "triggers": [
          {
            "bindings": [
              {
                "name": "cd-binding"
              },
              {
                "name": "dev-mode-cd-binding"
              }
            ],
            "template": {
              "name": "cd-template"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "Pipeline",
      "metadata": {
        "name": "dev-mode-cd-pipeline"
      },
      "spec": {
        "params": [
          {
            "name": "pipeline-debug",
            "description": "toggles debug mode for the pipeline"
          },
          {
            "name": "pipeline-name",
            "description": "The name of the pipeline to run",
            "default": "dev-mode-cd-pipeline"
          },
          {
            "name": "compliance-baseimage",
            "description": "base image to run most of the built-in pipeline code"
          },
          {
            "name": "dind-image",
            "description": "Base image to run sidecars"
          }
        ],
        "workspaces": [
          {
            "name": "artifacts"
          }
        ],
        "tasks": [
          {
            "name": "prod-start",
            "taskRef": {
              "name": "cd-start"
            },
            "workspaces": [
              {
                "name": "artifacts",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "next-stage",
                "value": "setup"
              }
            ]
          },
          {
            "name": "prod-setup",
            "taskRef": {
              "name": "run-stage"
            },
            "runAfter": [
              "prod-start"
            ],
            "workspaces": [
              {
                "name": "app",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "stage",
                "value": "setup"
              },
              {
                "name": "image",
                "value": "$(tasks.prod-start.results.image)"
              },
              {
                "name": "script",
                "value": "$(tasks.prod-start.results.script)"
              },
              {
                "name": "configmap",
                "value": "$(tasks.prod-start.results.configmap)"
              },
              {
                "name": "secret",
                "value": "$(tasks.prod-start.results.secret)"
              },
              {
                "name": "abort-on-failure",
                "value": "$(tasks.prod-start.results.abort-on-failure)"
              },
              {
                "name": "dind",
                "value": "$(tasks.prod-start.results.dind)"
              },
              {
                "name": "image-pull-policy",
                "value": "$(tasks.prod-start.results.image-pull-policy)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "pipeline-name",
                "value": "$(params.pipeline-name)"
              },
              {
                "name": "next-stage",
                "value": "deploy"
              },
              {
                "name": "dind-image",
                "value": "$(params.dind-image)"
              }
            ]
          },
          {
            "name": "prod-deployment",
            "taskRef": {
              "name": "run-stage"
            },
            "runAfter": [
              "prod-setup"
            ],
            "workspaces": [
              {
                "name": "app",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "stage",
                "value": "deploy"
              },
              {
                "name": "image",
                "value": "$(tasks.prod-setup.results.image)"
              },
              {
                "name": "script",
                "value": "$(tasks.prod-setup.results.script)"
              },
              {
                "name": "configmap",
                "value": "$(tasks.prod-setup.results.configmap)"
              },
              {
                "name": "secret",
                "value": "$(tasks.prod-setup.results.secret)"
              },
              {
                "name": "abort-on-failure",
                "value": "$(tasks.prod-setup.results.abort-on-failure)"
              },
              {
                "name": "dind",
                "value": "$(tasks.prod-setup.results.dind)"
              },
              {
                "name": "image-pull-policy",
                "value": "$(tasks.prod-setup.results.image-pull-policy)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "pipeline-name",
                "value": "$(params.pipeline-name)"
              },
              {
                "name": "next-stage",
                "value": "acceptance-test"
              },
              {
                "name": "dind-image",
                "value": "$(params.dind-image)"
              }
            ]
          },
          {
            "name": "prod-acceptance-tests",
            "runAfter": [
              "prod-deployment"
            ],
            "taskRef": {
              "name": "run-stage"
            },
            "workspaces": [
              {
                "name": "app",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "stage",
                "value": "acceptance-test"
              },
              {
                "name": "image",
                "value": "$(tasks.prod-deployment.results.image)"
              },
              {
                "name": "script",
                "value": "$(tasks.prod-deployment.results.script)"
              },
              {
                "name": "configmap",
                "value": "$(tasks.prod-deployment.results.configmap)"
              },
              {
                "name": "secret",
                "value": "$(tasks.prod-deployment.results.secret)"
              },
              {
                "name": "abort-on-failure",
                "value": "$(tasks.prod-deployment.results.abort-on-failure)"
              },
              {
                "name": "dind",
                "value": "$(tasks.prod-deployment.results.dind)"
              },
              {
                "name": "image-pull-policy",
                "value": "$(tasks.prod-deployment.results.image-pull-policy)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "pipeline-name",
                "value": "$(params.pipeline-name)"
              },
              {
                "name": "dind-image",
                "value": "$(params.dind-image)"
              }
            ]
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "TriggerBinding",
      "metadata": {
        "name": "dev-mode-binding"
      },
      "spec": {
        "params": [
          {
            "name": "pipeline-name",
            "value": "dev-mode-pipeline"
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "EventListener",
      "metadata": {
        "name": "dev-mode-listener"
      },
      "spec": {
        "triggers": [
          {
            "bindings": [
              {
                "name": "ci-binding"
              },
              {
                "name": "dev-mode-binding"
              }
            ],
            "template": {
              "name": "ci-template"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "Pipeline",
      "metadata": {
        "name": "dev-mode-pipeline"
      },
      "spec": {
        "params": [
          {
            "name": "branch",
            "description": "the branch for the git repo",
            "default": "master"
          },
          {
            "name": "commit-id",
            "description": "commit id"
          },
          {
            "name": "commit-timestamp",
            "description": "the timestamp of when the commit pushed"
          },
          {
            "name": "pr-url",
            "description": "pr url",
            "default": ""
          },
          {
            "name": "repository-integration",
            "description": "the repo integration name"
          },
          {
            "name": "repository",
            "description": "app repository owner and name"
          },
          {
            "name": "compliance-baseimage",
            "description": "pipeline baseimage to run most of the built-in pipeline code"
          },
          {
            "name": "pipeline-debug",
            "description": "toggles debug mode for the pipeline",
            "default": "0"
          },
          {
            "name": "pipeline-name",
            "description": "The name of the pipeline to run",
            "default": "dev-mode-pipeline"
          }
        ],
        "workspaces": [
          {
            "name": "artifacts"
          }
        ],
        "tasks": [
          {
            "name": "code-ci-start",
            "taskRef": {
              "name": "ci-start"
            },
            "workspaces": [
              {
                "name": "artifacts",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "branch",
                "value": "$(params.branch)"
              },
              {
                "name": "repository-integration",
                "value": "$(params.repository-integration)"
              },
              {
                "name": "commit-id",
                "value": "$(params.commit-id)"
              },
              {
                "name": "commit-timestamp",
                "value": "$(params.commit-timestamp)"
              },
              {
                "name": "pr-url",
                "value": "$(params.pr-url)"
              },
              {
                "name": "repository",
                "value": "$(params.repository)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "next-stage",
                "value": "setup"
              }
            ]
          },
          {
            "name": "code-setup",
            "taskRef": {
              "name": "run-stage"
            },
            "runAfter": [
              "code-ci-start"
            ],
            "workspaces": [
              {
                "name": "app",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "stage",
                "value": "setup"
              },
              {
                "name": "image",
                "value": "$(tasks.code-ci-start.results.image)"
              },
              {
                "name": "script",
                "value": "$(tasks.code-ci-start.results.script)"
              },
              {
                "name": "configmap",
                "value": "$(tasks.code-ci-start.results.configmap)"
              },
              {
                "name": "secret",
                "value": "$(tasks.code-ci-start.results.secret)"
              },
              {
                "name": "abort-on-failure",
                "value": "$(tasks.code-ci-start.results.abort-on-failure)"
              },
              {
                "name": "dind",
                "value": "$(tasks.code-ci-start.results.dind)"
              },
              {
                "name": "image-pull-policy",
                "value": "$(tasks.code-ci-start.results.image-pull-policy)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "pipeline-name",
                "value": "$(params.pipeline-name)"
              },
              {
                "name": "next-stage",
                "value": "test"
              }
            ]
          },
          {
            "name": "code-unit-tests",
            "taskRef": {
              "name": "run-stage"
            },
            "runAfter": [
              "code-setup"
            ],
            "workspaces": [
              {
                "name": "app",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "stage",
                "value": "test"
              },
              {
                "name": "image",
                "value": "$(tasks.code-setup.results.image)"
              },
              {
                "name": "script",
                "value": "$(tasks.code-setup.results.script)"
              },
              {
                "name": "configmap",
                "value": "$(tasks.code-setup.results.configmap)"
              },
              {
                "name": "secret",
                "value": "$(tasks.code-setup.results.secret)"
              },
              {
                "name": "abort-on-failure",
                "value": "$(tasks.code-setup.results.abort-on-failure)"
              },
              {
                "name": "dind",
                "value": "$(tasks.code-setup.results.dind)"
              },
              {
                "name": "image-pull-policy",
                "value": "$(tasks.code-setup.results.image-pull-policy)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "pipeline-name",
                "value": "$(params.pipeline-name)"
              },
              {
                "name": "next-stage",
                "value": "containerize"
              }
            ]
          },
          {
            "name": "build-containerize",
            "taskRef": {
              "name": "run-stage"
            },
            "runAfter": [
              "code-unit-tests"
            ],
            "workspaces": [
              {
                "name": "app",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "stage",
                "value": "containerize"
              },
              {
                "name": "image",
                "value": "$(tasks.code-unit-tests.results.image)"
              },
              {
                "name": "script",
                "value": "$(tasks.code-unit-tests.results.script)"
              },
              {
                "name": "configmap",
                "value": "$(tasks.code-unit-tests.results.configmap)"
              },
              {
                "name": "secret",
                "value": "$(tasks.code-unit-tests.results.secret)"
              },
              {
                "name": "abort-on-failure",
                "value": "$(tasks.code-unit-tests.results.abort-on-failure)"
              },
              {
                "name": "dind",
                "value": "$(tasks.code-unit-tests.results.dind)"
              },
              {
                "name": "image-pull-policy",
                "value": "$(tasks.code-unit-tests.results.image-pull-policy)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "pipeline-name",
                "value": "$(params.pipeline-name)"
              },
              {
                "name": "next-stage",
                "value": "deploy"
              }
            ]
          },
          {
            "name": "deploy-dev",
            "taskRef": {
              "name": "run-stage"
            },
            "runAfter": [
              "build-containerize"
            ],
            "workspaces": [
              {
                "name": "app",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "stage",
                "value": "deploy"
              },
              {
                "name": "image",
                "value": "$(tasks.build-containerize.results.image)"
              },
              {
                "name": "script",
                "value": "$(tasks.build-containerize.results.script)"
              },
              {
                "name": "configmap",
                "value": "$(tasks.build-containerize.results.configmap)"
              },
              {
                "name": "secret",
                "value": "$(tasks.build-containerize.results.secret)"
              },
              {
                "name": "abort-on-failure",
                "value": "$(tasks.build-containerize.results.abort-on-failure)"
              },
              {
                "name": "dind",
                "value": "$(tasks.build-containerize.results.dind)"
              },
              {
                "name": "image-pull-policy",
                "value": "$(tasks.build-containerize.results.image-pull-policy)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "pipeline-name",
                "value": "$(params.pipeline-name)"
              },
              {
                "name": "next-stage",
                "value": "acceptance-test"
              }
            ]
          },
          {
            "name": "deploy-acceptance-tests",
            "taskRef": {
              "name": "run-stage"
            },
            "runAfter": [
              "deploy-dev"
            ],
            "workspaces": [
              {
                "name": "app",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "stage",
                "value": "acceptance-test"
              },
              {
                "name": "image",
                "value": "$(tasks.deploy-dev.results.image)"
              },
              {
                "name": "script",
                "value": "$(tasks.deploy-dev.results.script)"
              },
              {
                "name": "configmap",
                "value": "$(tasks.deploy-dev.results.configmap)"
              },
              {
                "name": "secret",
                "value": "$(tasks.deploy-dev.results.secret)"
              },
              {
                "name": "abort-on-failure",
                "value": "$(tasks.deploy-dev.results.abort-on-failure)"
              },
              {
                "name": "dind",
                "value": "$(tasks.deploy-dev.results.dind)"
              },
              {
                "name": "image-pull-policy",
                "value": "$(tasks.deploy-dev.results.image-pull-policy)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "pipeline-name",
                "value": "$(params.pipeline-name)"
              },
              {
                "name": "next-stage",
                "value": "release"
              }
            ]
          },
          {
            "name": "deploy-release",
            "runAfter": [
              "deploy-acceptance-tests"
            ],
            "taskRef": {
              "name": "run-stage"
            },
            "workspaces": [
              {
                "name": "app",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "stage",
                "value": "release"
              },
              {
                "name": "image",
                "value": "$(tasks.deploy-acceptance-tests.results.image)"
              },
              {
                "name": "script",
                "value": "$(tasks.deploy-acceptance-tests.results.script)"
              },
              {
                "name": "configmap",
                "value": "$(tasks.deploy-acceptance-tests.results.configmap)"
              },
              {
                "name": "secret",
                "value": "$(tasks.deploy-acceptance-tests.results.secret)"
              },
              {
                "name": "abort-on-failure",
                "value": "$(tasks.deploy-acceptance-tests.results.abort-on-failure)"
              },
              {
                "name": "dind",
                "value": "$(tasks.deploy-acceptance-tests.results.dind)"
              },
              {
                "name": "image-pull-policy",
                "value": "$(tasks.deploy-acceptance-tests.results.image-pull-policy)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "pipeline-name",
                "value": "$(params.pipeline-name)"
              }
            ]
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "TriggerBinding",
      "metadata": {
        "name": "pr-binding-gitlab"
      },
      "spec": {
        "params": [
          {
            "name": "event-payload",
            "value": "$(body)"
          },
          {
            "name": "head-branch",
            "value": "$(body.object_attributes.source_branch)"
          },
          {
            "name": "head-sha",
            "value": "$(body.object_attributes.last_commit.id)"
          },
          {
            "name": "head-repo",
            "value": "$(body.object_attributes.source.web_url)"
          },
          {
            "name": "base-branch",
            "value": "$(body.object_attributes.target_branch)"
          },
          {
            "name": "base-repo",
            "value": "$(body.object_attributes.target.web_url)"
          },
          {
            "name": "base-repo-name",
            "value": "$(body.object_attributes.target.name)"
          },
          {
            "name": "base-repo-owner",
            "value": "$(body.user.username)"
          },
          {
            "name": "commit-timestamp",
            "value": "$(body.object_attributes.last_commit.timestamp)"
          },
          {
            "name": "pr-url",
            "value": "$(body.object_attributes.url)"
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "TriggerBinding",
      "metadata": {
        "name": "pr-binding"
      },
      "spec": {
        "params": [
          {
            "name": "event-payload",
            "value": "$(body)"
          },
          {
            "name": "head-branch",
            "value": "$(body.pull_request.head.ref)"
          },
          {
            "name": "head-sha",
            "value": "$(body.pull_request.head.sha)"
          },
          {
            "name": "head-repo",
            "value": "$(body.pull_request.head.repo.html_url)"
          },
          {
            "name": "base-branch",
            "value": "$(body.pull_request.base.ref)"
          },
          {
            "name": "base-repo",
            "value": "$(body.pull_request.base.repo.html_url)"
          },
          {
            "name": "base-repo-name",
            "value": "$(body.pull_request.base.repo.name)"
          },
          {
            "name": "base-repo-owner",
            "value": "$(body.pull_request.base.repo.owner.login)"
          },
          {
            "name": "commit-timestamp",
            "value": "$(body.pull_request.head.repo.pushed_at)"
          },
          {
            "name": "pr-url",
            "value": "$(body.pull_request.url)"
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "EventListener",
      "metadata": {
        "name": "pr-listener-gitlab"
      },
      "spec": {
        "triggers": [
          {
            "binding": {
              "name": "pr-binding-gitlab"
            },
            "template": {
              "name": "pr-template"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "EventListener",
      "metadata": {
        "name": "pr-listener"
      },
      "spec": {
        "triggers": [
          {
            "binding": {
              "name": "pr-binding"
            },
            "template": {
              "name": "pr-template"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "TriggerBinding",
      "metadata": {
        "name": "pr-manual-binding"
      },
      "spec": {
        "params": [
          {
            "name": "base-branch",
            "value": "$(params.base-branch)"
          },
          {
            "name": "base-repo",
            "value": "$(params.base-repo)"
          },
          {
            "name": "base-repo-name",
            "value": "$(params.base-repo-name)"
          },
          {
            "name": "base-repo-owner",
            "value": "$(params.base-repo-owner)"
          },
          {
            "name": "commit-timestamp",
            "value": "$(params.commit-timestamp)"
          },
          {
            "name": "head-branch",
            "value": "$(params.head-branch)"
          },
          {
            "name": "head-sha",
            "value": "$(params.head-sha)"
          },
          {
            "name": "head-repo",
            "value": "$(params.head-repo)"
          },
          {
            "name": "one-pipeline-config-repo",
            "value": "$(params.one-pipeline-config-repo)"
          },
          {
            "name": "one-pipeline-config-branch",
            "value": "$(params.one-pipeline-config-branch)"
          },
          {
            "name": "pr-url",
            "value": "$(params.pr-url)"
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "EventListener",
      "metadata": {
        "name": "manual-pr-listener"
      },
      "spec": {
        "triggers": [
          {
            "binding": {
              "name": "pr-manual-binding"
            },
            "template": {
              "name": "pr-template"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "Pipeline",
      "metadata": {
        "name": "pr-pipeline"
      },
      "spec": {
        "params": [
          {
            "name": "head-branch",
            "description": "source branch of the PR"
          },
          {
            "name": "head-sha",
            "description": "commit id"
          },
          {
            "name": "head-repo",
            "description": "the name of the PR's repo source"
          },
          {
            "name": "base-branch",
            "description": "target branch of the PR"
          },
          {
            "name": "base-repo",
            "description": "the url of the PR's repo target"
          },
          {
            "name": "base-repo-name",
            "description": "name of the base repo"
          },
          {
            "name": "base-repo-owner",
            "description": "owner of the base repo"
          },
          {
            "name": "pr-url",
            "description": "url of the PR"
          },
          {
            "name": "commit-timestamp",
            "description": "the timestamp of when the commit pushed"
          },
          {
            "name": "repository-integration",
            "description": "the repo integration name"
          },
          {
            "name": "compliance-baseimage",
            "description": "pipeline baseimage to run most of the built-in pipeline code"
          },
          {
            "name": "pipeline-debug",
            "description": "toggles debug mode for the pipeline",
            "default": "0"
          },
          {
            "name": "pipeline-name",
            "description": "The name of the pipeline to run",
            "default": "pr-pipeline"
          },
          {
            "name": "dind-image",
            "description": "Base image to run sidecars"
          },
          {
            "name": "detect-secrets-image",
            "description": "Base image to detect Secrets"
          }
        ],
        "workspaces": [
          {
            "name": "artifacts"
          }
        ],
        "tasks": [
          {
            "name": "code-pr-start",
            "taskRef": {
              "name": "pr-start"
            },
            "workspaces": [
              {
                "name": "artifacts",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "head-branch",
                "value": "$(params.head-branch)"
              },
              {
                "name": "head-sha",
                "value": "$(params.head-sha)"
              },
              {
                "name": "head-repo",
                "value": "$(params.head-repo)"
              },
              {
                "name": "base-branch",
                "value": "$(params.base-branch)"
              },
              {
                "name": "base-repo",
                "value": "$(params.base-repo)"
              },
              {
                "name": "base-repo-name",
                "value": "$(params.base-repo-name)"
              },
              {
                "name": "base-repo-owner",
                "value": "$(params.base-repo-owner)"
              },
              {
                "name": "commit-timestamp",
                "value": "$(params.commit-timestamp)"
              },
              {
                "name": "pr-url",
                "value": "$(params.pr-url)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "next-stage",
                "value": "setup"
              }
            ]
          },
          {
            "name": "code-setup",
            "taskRef": {
              "name": "run-stage"
            },
            "runAfter": [
              "code-pr-start"
            ],
            "workspaces": [
              {
                "name": "app",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "stage",
                "value": "setup"
              },
              {
                "name": "image",
                "value": "$(tasks.code-pr-start.results.image)"
              },
              {
                "name": "script",
                "value": "$(tasks.code-pr-start.results.script)"
              },
              {
                "name": "configmap",
                "value": "$(tasks.code-pr-start.results.configmap)"
              },
              {
                "name": "secret",
                "value": "$(tasks.code-pr-start.results.secret)"
              },
              {
                "name": "abort-on-failure",
                "value": "$(tasks.code-pr-start.results.abort-on-failure)"
              },
              {
                "name": "dind",
                "value": "$(tasks.code-pr-start.results.dind)"
              },
              {
                "name": "image-pull-policy",
                "value": "$(tasks.code-pr-start.results.image-pull-policy)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "next-stage",
                "value": "test"
              },
              {
                "name": "head-branch",
                "value": "$(params.head-branch)"
              },
              {
                "name": "head-sha",
                "value": "$(params.head-sha)"
              },
              {
                "name": "head-repo",
                "value": "$(params.head-repo)"
              },
              {
                "name": "base-branch",
                "value": "$(params.base-branch)"
              },
              {
                "name": "base-repo",
                "value": "$(params.base-repo)"
              },
              {
                "name": "base-repo-name",
                "value": "$(params.base-repo-name)"
              },
              {
                "name": "base-repo-owner",
                "value": "$(params.base-repo-owner)"
              },
              {
                "name": "dind-image",
                "value": "$(params.dind-image)"
              }
            ]
          },
          {
            "name": "code-unit-tests",
            "taskRef": {
              "name": "run-stage"
            },
            "runAfter": [
              "code-setup"
            ],
            "workspaces": [
              {
                "name": "app",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "stage",
                "value": "test"
              },
              {
                "name": "image",
                "value": "$(tasks.code-setup.results.image)"
              },
              {
                "name": "script",
                "value": "$(tasks.code-setup.results.script)"
              },
              {
                "name": "configmap",
                "value": "$(tasks.code-setup.results.configmap)"
              },
              {
                "name": "secret",
                "value": "$(tasks.code-setup.results.secret)"
              },
              {
                "name": "abort-on-failure",
                "value": "$(tasks.code-setup.results.abort-on-failure)"
              },
              {
                "name": "dind",
                "value": "$(tasks.code-setup.results.dind)"
              },
              {
                "name": "image-pull-policy",
                "value": "$(tasks.code-setup.results.image-pull-policy)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "head-branch",
                "value": "$(params.head-branch)"
              },
              {
                "name": "head-sha",
                "value": "$(params.head-sha)"
              },
              {
                "name": "head-repo",
                "value": "$(params.head-repo)"
              },
              {
                "name": "base-branch",
                "value": "$(params.base-branch)"
              },
              {
                "name": "base-repo",
                "value": "$(params.base-repo)"
              },
              {
                "name": "base-repo-name",
                "value": "$(params.base-repo-name)"
              },
              {
                "name": "base-repo-owner",
                "value": "$(params.base-repo-owner)"
              },
              {
                "name": "dind-image",
                "value": "$(params.dind-image)"
              },
              {
                "name": "next-stage",
                "value": "compliance-checks"
              }
            ]
          },
          {
            "name": "code-compliance-checks",
            "taskRef": {
              "name": "run-stage"
            },
            "runAfter": [
              "code-unit-tests"
            ],
            "workspaces": [
              {
                "name": "app",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "workspace-mount-path",
                "value": "/artifacts"
              },
              {
                "name": "stage",
                "value": "compliance-checks"
              },
              {
                "name": "image",
                "value": "$(tasks.code-unit-tests.results.image)"
              },
              {
                "name": "script",
                "value": "$(tasks.code-unit-tests.results.script)"
              },
              {
                "name": "configmap",
                "value": "$(tasks.code-unit-tests.results.configmap)"
              },
              {
                "name": "secret",
                "value": "$(tasks.code-unit-tests.results.secret)"
              },
              {
                "name": "abort-on-failure",
                "value": "$(tasks.code-unit-tests.results.abort-on-failure)"
              },
              {
                "name": "dind",
                "value": "$(tasks.code-unit-tests.results.dind)"
              },
              {
                "name": "image-pull-policy",
                "value": "$(tasks.code-unit-tests.results.image-pull-policy)"
              },
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "pipeline-name",
                "value": "$(params.pipeline-name)"
              }
            ]
          }
        ],
        "finally": [
          {
            "name": "code-pr-finish",
            "taskRef": {
              "name": "pr-finish"
            },
            "workspaces": [
              {
                "name": "artifacts",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "detect-secrets-image",
                "value": "$(params.detect-secrets-image)"
              },
              {
                "name": "dind-image",
                "value": "$(params.dind-image)"
              }
            ]
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "TriggerTemplate",
      "metadata": {
        "name": "pr-template"
      },
      "spec": {
        "params": [
          {
            "name": "head-branch",
            "description": "source branch of the PR"
          },
          {
            "name": "head-sha",
            "description": "commit id"
          },
          {
            "name": "head-repo",
            "description": "the name of the PR's repo source"
          },
          {
            "name": "base-branch",
            "description": "target branch of the PR"
          },
          {
            "name": "base-repo",
            "description": "the url of the PR's repo target"
          },
          {
            "name": "base-repo-name",
            "description": "the name of the PR's repo target"
          },
          {
            "name": "base-repo-owner",
            "description": "the owner of the PR's repo target"
          },
          {
            "name": "pr-url",
            "description": "url of the PR"
          },
          {
            "name": "commit-timestamp",
            "description": "the timestamp of when the commit pushed"
          },
          {
            "name": "event-payload",
            "description": "event payload from the trigger webhook",
            "default": ""
          },
          {
            "name": "repository-integration",
            "description": "the repo integration name"
          },
          {
            "name": "artifactory-dockerconfigjson",
            "description": "dockerconfigjson for pullsecrets",
            "default": "eyJhdXRocyI6e319"
          },
          {
            "name": "onepipeline-dockerconfigjson",
            "description": "dockerconfigjson for images used in .pipeline-config.yaml",
            "default": "eyJhdXRocyI6e319"
          },
          {
            "name": "one-pipeline-dockerconfigjson",
            "description": "dockerconfigjson for images used in .pipeline-config.yaml",
            "default": "eyJhdXRocyI6e319"
          },
          {
            "name": "pipeline-dockerconfigjson",
            "description": "dockerconfigjson for images used in .pipeline-config.yaml",
            "default": "eyJhdXRocyI6e319"
          },
          {
            "name": "pipeline-debug",
            "description": "toggles debug mode for the pipeline"
          },
          {
            "name": "compliance-baseimage",
            "description": "one-pipeline baseimage to run most of the built-in pipeline code",
            "default": "icr.io/continuous-delivery/toolchains/devsecops/baseimage:2.73.1_commons-0.22.2@sha256:7ff5a67737b3b106d48bd6cd77b1ceb1539d16eba045062f5e30916c186333ae"
          },
          {
            "name": "pipeline-name",
            "description": "The name of the pipeline to run",
            "default": "pr-pipeline"
          },
          {
            "name": "dind-image",
            "description": "Base image to run sidecars",
            "default": "icr.io/continuous-delivery/toolchains/devsecops/docker:20.10.21-dind@sha256:7abbf564024e76ee5fc2b055b2a0790db660080bf35a7f827739df76c5622044"
          },
          {
            "name": "detect-secrets-image",
            "description": "Base image to detect Secrets",
            "default": "icr.io/continuous-delivery/toolchains/devsecops/detect-secrets:0.13.1.ibm.55.dss@sha256:b932a494898b0db8e45de09a066c4dbfc780be4ee51797ae31b1c8934be8a386"
          }
        ],
        "resourcetemplates": [
          {
            "apiVersion": "v1",
            "kind": "Secret",
            "data": {
              ".dockerconfigjson": "$(tt.params.artifactory-dockerconfigjson)"
            },
            "metadata": {
              "name": "artifactory-pull-secret"
            },
            "type": "kubernetes.io/dockerconfigjson"
          },
          {
            "apiVersion": "v1",
            "kind": "Secret",
            "data": {
              ".dockerconfigjson": "$(tt.params.onepipeline-dockerconfigjson)"
            },
            "metadata": {
              "name": "onepipeline-pull-secret"
            },
            "type": "kubernetes.io/dockerconfigjson"
          },
          {
            "apiVersion": "v1",
            "kind": "Secret",
            "data": {
              ".dockerconfigjson": "$(tt.params.one-pipeline-dockerconfigjson)"
            },
            "metadata": {
              "name": "one-pipeline-pull-secret"
            },
            "type": "kubernetes.io/dockerconfigjson"
          },
          {
            "apiVersion": "v1",
            "kind": "Secret",
            "data": {
              ".dockerconfigjson": "$(tt.params.pipeline-dockerconfigjson)"
            },
            "metadata": {
              "name": "pipeline-pull-secret"
            },
            "type": "kubernetes.io/dockerconfigjson"
          },
          {
            "apiVersion": "v1",
            "kind": "ConfigMap",
            "metadata": {
              "name": "trigger",
              "labels": {
                "app.kubernetes.io/version": "1.0.0"
              }
            },
            "data": {
              "payload.json": "$(tt.params.event-payload)"
            }
          },
          {
            "apiVersion": "tekton.dev/v1beta1",
            "kind": "PipelineRun",
            "metadata": {
              "name": "pr-pipelinerun"
            },
            "spec": {
              "pipelineRef": {
                "name": "$(tt.params.pipeline-name)"
              },
              "workspaces": [
                {
                  "name": "artifacts",
                  "volumeClaimTemplate": {
                    "spec": {
                      "resources": {
                        "requests": {
                          "storage": "5Gi"
                        }
                      },
                      "volumeMode": "Filesystem",
                      "accessModes": [
                        "ReadWriteOnce"
                      ]
                    }
                  }
                }
              ],
              "params": [
                {
                  "name": "head-branch",
                  "value": "$(tt.params.head-branch)"
                },
                {
                  "name": "head-sha",
                  "value": "$(tt.params.head-sha)"
                },
                {
                  "name": "head-repo",
                  "value": "$(tt.params.head-repo)"
                },
                {
                  "name": "base-branch",
                  "value": "$(tt.params.base-branch)"
                },
                {
                  "name": "base-repo",
                  "value": "$(tt.params.base-repo)"
                },
                {
                  "name": "base-repo-name",
                  "value": "$(tt.params.base-repo-name)"
                },
                {
                  "name": "base-repo-owner",
                  "value": "$(tt.params.base-repo-owner)"
                },
                {
                  "name": "commit-timestamp",
                  "value": "$(tt.params.commit-timestamp)"
                },
                {
                  "name": "pr-url",
                  "value": "$(tt.params.pr-url)"
                },
                {
                  "name": "repository-integration",
                  "value": "$(tt.params.repository-integration)"
                },
                {
                  "name": "pipeline-debug",
                  "value": "$(tt.params.pipeline-debug)"
                },
                {
                  "name": "pipeline-name",
                  "value": "$(tt.params.pipeline-name)"
                },
                {
                  "name": "compliance-baseimage",
                  "value": "$(tt.params.compliance-baseimage)"
                },
                {
                  "name": "dind-image",
                  "value": "$(tt.params.dind-image)"
                },
                {
                  "name": "detect-secrets-image",
                  "value": "$(tt.params.detect-secrets-image)"
                }
              ],
              "podTemplate": {
                "imagePullSecrets": [
                  {
                    "name": "artifactory-pull-secret"
                  },
                  {
                    "name": "onepipeline-pull-secret"
                  },
                  {
                    "name": "one-pipeline-pull-secret"
                  },
                  {
                    "name": "pipeline-pull-secret"
                  }
                ]
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "TriggerBinding",
      "metadata": {
        "name": "promotion-binding"
      },
      "spec": {
        "params": [
          {
            "name": "event-payload",
            "value": "$(body)"
          },
          {
            "name": "priority",
            "value": "$(body.priority)"
          },
          {
            "name": "assignee",
            "value": "$(body.assignee)"
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "EventListener",
      "metadata": {
        "name": "promotion-listener"
      },
      "spec": {
        "triggers": [
          {
            "binding": {
              "name": "promotion-binding"
            },
            "template": {
              "name": "promotion-template"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "Pipeline",
      "metadata": {
        "name": "promotion-pipeline"
      },
      "spec": {
        "params": [
          {
            "name": "pipeline-debug",
            "description": "toggles debug mode for the pipeline"
          },
          {
            "name": "pipeline-name",
            "description": "The name of the pipeline to run",
            "default": "promotion-pipeline"
          },
          {
            "name": "compliance-baseimage",
            "description": "base image to run most of the built-in pipeline code"
          },
          {
            "name": "priority",
            "description": "priority of the change request"
          },
          {
            "name": "assignee",
            "description": "functional id or an email who will be assigned to the change request in service now"
          }
        ],
        "workspaces": [
          {
            "name": "artifacts"
          }
        ],
        "tasks": [
          {
            "name": "inventory-promotion",
            "taskRef": {
              "name": "inventory-promotion"
            },
            "workspaces": [
              {
                "name": "artifacts",
                "workspace": "artifacts"
              }
            ],
            "params": [
              {
                "name": "compliance-baseimage",
                "value": "$(params.compliance-baseimage)"
              },
              {
                "name": "pipeline-debug",
                "value": "$(params.pipeline-debug)"
              },
              {
                "name": "priority",
                "value": "$(params.priority)"
              },
              {
                "name": "assignee",
                "value": "$(params.assignee)"
              }
            ]
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "TriggerTemplate",
      "metadata": {
        "name": "promotion-template"
      },
      "spec": {
        "params": [
          {
            "name": "artifactory-dockerconfigjson",
            "description": "dockerconfigjson for pullsecrets",
            "default": "eyJhdXRocyI6e319"
          },
          {
            "name": "onepipeline-dockerconfigjson",
            "description": "dockerconfigjson for images used in .one-pipeline.yaml",
            "default": "eyJhdXRocyI6e319"
          },
          {
            "name": "one-pipeline-dockerconfigjson",
            "description": "dockerconfigjson for images used in .one-pipeline.yaml",
            "default": "eyJhdXRocyI6e319"
          },
          {
            "name": "pipeline-dockerconfigjson",
            "description": "dockerconfigjson for images used in .pipeline-config.yaml",
            "default": "eyJhdXRocyI6e319"
          },
          {
            "name": "pipeline-debug",
            "description": "toggles debug mode for the pipeline"
          },
          {
            "name": "priority",
            "description": "priority of the change request"
          },
          {
            "name": "assignee",
            "description": "functional id or an email who will be assigned to the change request in service now"
          },
          {
            "name": "event-payload",
            "description": "event payload from the trigger webhook",
            "default": ""
          },
          {
            "name": "compliance-baseimage",
            "description": "one-pipeline baseimage to run most of the built-in pipeline code",
            "default": "icr.io/continuous-delivery/toolchains/devsecops/baseimage:2.73.1_commons-0.22.2@sha256:7ff5a67737b3b106d48bd6cd77b1ceb1539d16eba045062f5e30916c186333ae"
          }
        ],
        "resourcetemplates": [
          {
            "apiVersion": "v1",
            "kind": "Secret",
            "data": {
              ".dockerconfigjson": "$(tt.params.artifactory-dockerconfigjson)"
            },
            "metadata": {
              "name": "artifactory-pull-secret"
            },
            "type": "kubernetes.io/dockerconfigjson"
          },
          {
            "apiVersion": "v1",
            "kind": "Secret",
            "data": {
              ".dockerconfigjson": "$(tt.params.onepipeline-dockerconfigjson)"
            },
            "metadata": {
              "name": "onepipeline-pull-secret"
            },
            "type": "kubernetes.io/dockerconfigjson"
          },
          {
            "apiVersion": "v1",
            "kind": "Secret",
            "data": {
              ".dockerconfigjson": "$(tt.params.one-pipeline-dockerconfigjson)"
            },
            "metadata": {
              "name": "one-pipeline-pull-secret"
            },
            "type": "kubernetes.io/dockerconfigjson"
          },
          {
            "apiVersion": "v1",
            "kind": "Secret",
            "data": {
              ".dockerconfigjson": "$(tt.params.pipeline-dockerconfigjson)"
            },
            "metadata": {
              "name": "pipeline-pull-secret"
            },
            "type": "kubernetes.io/dockerconfigjson"
          },
          {
            "apiVersion": "v1",
            "kind": "ConfigMap",
            "metadata": {
              "name": "trigger",
              "labels": {
                "app.kubernetes.io/version": "1.0.0"
              }
            },
            "data": {
              "payload.json": "$(tt.params.event-payload)\n"
            }
          },
          {
            "apiVersion": "tekton.dev/v1beta1",
            "kind": "PipelineRun",
            "metadata": {
              "name": "promotion-pipelinerun"
            },
            "spec": {
              "pipelineRef": {
                "name": "promotion-pipeline"
              },
              "workspaces": [
                {
                  "name": "artifacts",
                  "volumeClaimTemplate": {
                    "spec": {
                      "resources": {
                        "requests": {
                          "storage": "5Gi"
                        }
                      },
                      "volumeMode": "Filesystem",
                      "accessModes": [
                        "ReadWriteOnce"
                      ]
                    }
                  }
                }
              ],
              "params": [
                {
                  "name": "pipeline-debug",
                  "value": "$(tt.params.pipeline-debug)"
                },
                {
                  "name": "compliance-baseimage",
                  "value": "$(tt.params.compliance-baseimage)"
                },
                {
                  "name": "priority",
                  "value": "$(tt.params.priority)"
                },
                {
                  "name": "assignee",
                  "value": "$(tt.params.assignee)"
                }
              ],
              "podTemplate": {
                "imagePullSecrets": [
                  {
                    "name": "artifactory-pull-secret"
                  },
                  {
                    "name": "onepipeline-pull-secret"
                  },
                  {
                    "name": "one-pipeline-pull-secret"
                  },
                  {
                    "name": "pipeline-pull-secret"
                  }
                ]
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "Task",
      "metadata": {
        "name": "async-stage-finish"
      },
      "spec": {
        "params": [
          {
            "name": "compliance-baseimage",
            "description": "base image to run most of the built-in pipeline code"
          },
          {
            "name": "pipeline-debug",
            "description": "Pipeline debug mode",
            "default": "0"
          }
        ],
        "workspaces": [
          {
            "name": "artifacts"
          }
        ],
        "volumes": [
          {
            "name": "config",
            "emptyDir": {}
          },
          {
            "name": "environment-properties",
            "configMap": {
              "name": "environment-properties"
            }
          },
          {
            "name": "secure-properties",
            "secret": {
              "secretName": "secure-properties"
            }
          },
          {
            "name": "toolchain",
            "configMap": {
              "name": "toolchain"
            }
          },
          {
            "name": "trigger-payload",
            "configMap": {
              "name": "trigger"
            }
          }
        ],
        "stepTemplate": {
          "volumeMounts": [
            {
              "name": "trigger-payload",
              "mountPath": "/trigger-payload"
            }
          ],
          "env": [
            {
              "name": "ONE_PIPELINE_PATH",
              "value": "/opt/one-pipeline"
            },
            {
              "name": "WORKSPACE",
              "value": "$(workspaces.artifacts.path)"
            },
            {
              "name": "TRIGGER_PAYLOAD",
              "valueFrom": {
                "configMapKeyRef": {
                  "name": "trigger",
                  "key": "payload.json"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.labels['tekton.dev/pipelineRun']"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_ID",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_URL",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/pipeline-run-url']"
                }
              }
            },
            {
              "name": "BUILD_NUMBER",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/build-number']"
                }
              }
            },
            {
              "name": "PIPELINE_ID",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/pipeline-id']"
                }
              }
            },
            {
              "name": "TRIGGER_TYPE",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/trigger-type']"
                }
              }
            },
            {
              "name": "TRIGGER_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/trigger-name']"
                }
              }
            },
            {
              "name": "TRIGGERED_BY",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/triggered-by']"
                }
              }
            },
            {
              "name": "TRIGGER_PAYLOAD_PATH",
              "value": "/trigger-payload/payload.json"
            },
            {
              "name": "PIPELINE_DEBUG",
              "value": "$(params.pipeline-debug)"
            },
            {
              "name": "TASK_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.labels['tekton.dev/pipelineTask']"
                }
              }
            }
          ]
        },
        "steps": [
          {
            "name": "finish",
            "image": "$(params.compliance-baseimage)",
            "workingDir": "$(workspaces.artifacts.path)",
            "volumeMounts": [
              {
                "name": "config",
                "mountPath": "/config"
              },
              {
                "name": "environment-properties",
                "mountPath": "/config/environment-properties"
              },
              {
                "name": "secure-properties",
                "mountPath": "/config/secure-properties"
              },
              {
                "name": "toolchain",
                "mountPath": "/toolchain"
              }
            ],
            "env": [
              {
                "name": "STEP_NAME",
                "value": "finish"
              }
            ],
            "script": "#!/bin/bash\n\nexport PATH=\"$PATH:/opt/cocoa/bin\"\n. \"${ONE_PIPELINE_PATH}/internal/async_stage_finish\"\n"
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "Task",
      "metadata": {
        "name": "async-stage-setup"
      },
      "spec": {
        "params": [
          {
            "name": "compliance-baseimage",
            "description": "base image to run most of the built-in pipeline code"
          },
          {
            "name": "pipeline-debug",
            "description": "Pipeline debug mode",
            "default": "0"
          }
        ],
        "results": [
          {
            "name": "image",
            "description": "Docker image to be used in the specified stage."
          },
          {
            "name": "script",
            "description": "Location of the script that's going to be used to run the specified stage."
          },
          {
            "name": "configmap",
            "description": "Name of the `ConfigMap` that's going to be mounted in `run-stage`"
          },
          {
            "name": "secret",
            "description": "Name of the `Secret` that's going to be mounted in `run-stage`"
          },
          {
            "name": "working-dir",
            "description": "pipeline working dir, the location of pipeline-config.yaml"
          },
          {
            "name": "abort-on-failure",
            "description": "Whether abort the pipeline in case of a failure or not"
          },
          {
            "name": "dind",
            "description": "Launch Docker-in-Docker sidecar"
          },
          {
            "name": "image-pull-policy",
            "description": "Set the imagePullPolicy for the Docker image in the runner task"
          }
        ],
        "workspaces": [
          {
            "name": "artifacts",
            "description": "Workspace where the application is checked out."
          }
        ],
        "volumes": [
          {
            "name": "config",
            "emptyDir": {}
          },
          {
            "name": "environment-properties",
            "configMap": {
              "name": "environment-properties"
            }
          },
          {
            "name": "secure-properties",
            "secret": {
              "secretName": "secure-properties"
            }
          },
          {
            "name": "toolchain",
            "configMap": {
              "name": "toolchain"
            }
          },
          {
            "name": "trigger-payload",
            "configMap": {
              "name": "trigger"
            }
          }
        ],
        "stepTemplate": {
          "volumeMounts": [
            {
              "name": "trigger-payload",
              "mountPath": "/trigger-payload"
            }
          ],
          "env": [
            {
              "name": "ONE_PIPELINE_PATH",
              "value": "/opt/one-pipeline"
            },
            {
              "name": "COMMONS_PATH",
              "value": "/opt/commons"
            },
            {
              "name": "WORKSPACE",
              "value": "$(workspaces.artifacts.path)"
            },
            {
              "name": "TRIGGER_PAYLOAD",
              "valueFrom": {
                "configMapKeyRef": {
                  "name": "trigger",
                  "key": "payload.json"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.labels['tekton.dev/pipelineRun']"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_ID",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_URL",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/pipeline-run-url']"
                }
              }
            },
            {
              "name": "BUILD_NUMBER",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/build-number']"
                }
              }
            },
            {
              "name": "PIPELINE_ID",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/pipeline-id']"
                }
              }
            },
            {
              "name": "TRIGGER_TYPE",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/trigger-type']"
                }
              }
            },
            {
              "name": "TRIGGER_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/trigger-name']"
                }
              }
            },
            {
              "name": "TRIGGERED_BY",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/triggered-by']"
                }
              }
            },
            {
              "name": "TRIGGER_PAYLOAD_PATH",
              "value": "/trigger-payload/payload.json"
            },
            {
              "name": "PIPELINE_DEBUG",
              "value": "$(params.pipeline-debug)"
            },
            {
              "name": "TASK_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.labels['tekton.dev/pipelineTask']"
                }
              }
            }
          ]
        },
        "steps": [
          {
            "name": "setup",
            "image": "$(params.compliance-baseimage)",
            "workingDir": "$(workspaces.artifacts.path)",
            "volumeMounts": [
              {
                "name": "config",
                "mountPath": "/config"
              },
              {
                "name": "environment-properties",
                "mountPath": "/config/environment-properties"
              },
              {
                "name": "secure-properties",
                "mountPath": "/config/secure-properties"
              },
              {
                "name": "toolchain",
                "mountPath": "/toolchain"
              }
            ],
            "env": [
              {
                "name": "STEP_NAME",
                "value": "setup"
              }
            ],
            "script": "#!/bin/bash\n\nexport PATH=\"$PATH:/opt/cocoa/bin\"\n\n. \"${ONE_PIPELINE_PATH}/internal/async_stage_setup\"\necho -n \"${STAGE_IMAGE}\" > \"$(results.image.path)\"\necho -n \"${STAGE_SCRIPT_PATH}\" > \"$(results.script.path)\"\necho -n \"${STAGE_DIND}\" > \"$(results.dind.path)\"\necho -n \"${STAGE_ABORT_ON_FAILURE}\" > \"$(results.abort-on-failure.path)\"\necho -n \"${STAGE_IMAGE_PULL_POLICY}\" > \"$(results.image-pull-policy.path)\"\necho -n \"${STAGE_CONFIGMAP}\" > \"$(results.configmap.path)\"\necho -n \"${STAGE_SECRET}\" > \"$(results.secret.path)\"\n"
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "Task",
      "metadata": {
        "name": "cc-compliance"
      },
      "spec": {
        "params": [
          {
            "name": "compliance-baseimage",
            "description": "base image to run most of the built-in pipeline code"
          },
          {
            "name": "pipeline-debug",
            "description": "Pipeline debug mode",
            "default": "0"
          },
          {
            "name": "next-stage",
            "default": ""
          },
          {
            "name": "cra-base-image",
            "default": "icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.3"
          },
          {
            "name": "dind-image",
            "description": "Base image to run sidecars"
          },
          {
            "name": "detect-secrets-image",
            "description": "Base image to detect Secrets"
          }
        ],
        "results": [
          {
            "name": "image",
            "description": "Docker image to be used in the specified stage."
          },
          {
            "name": "script",
            "description": "Location of the script that's going to be used to run the specified stage."
          },
          {
            "name": "configmap",
            "description": "Name of the `ConfigMap` that's going to be mounted in `run-stage`"
          },
          {
            "name": "secret",
            "description": "Name of the `Secret` that's going to be mounted in `run-stage`"
          },
          {
            "name": "working-dir",
            "description": "one-pipeline working dir, the location of one-pipeline.yaml"
          },
          {
            "name": "abort-on-failure",
            "description": "Whether abort the pipeline in case of a failure or not"
          },
          {
            "name": "dind",
            "description": "Launch Docker-in-Docker sidecar"
          },
          {
            "name": "image-pull-policy",
            "description": "Set the imagePullPolicy for the Docker image in the runner task"
          }
        ],
        "workspaces": [
          {
            "name": "artifacts",
            "mountPath": "/artifacts"
          }
        ],
        "volumes": [
          {
            "name": "pipeline-scripts",
            "emptyDir": {}
          },
          {
            "name": "pipelinectl",
            "emptyDir": {}
          },
          {
            "name": "config",
            "emptyDir": {}
          },
          {
            "name": "dind-certs",
            "emptyDir": {}
          },
          {
            "name": "environment-properties",
            "configMap": {
              "name": "environment-properties"
            }
          },
          {
            "name": "secure-properties",
            "secret": {
              "secretName": "secure-properties"
            }
          },
          {
            "name": "toolchain",
            "configMap": {
              "name": "toolchain"
            }
          },
          {
            "name": "trigger-payload",
            "configMap": {
              "name": "trigger"
            }
          }
        ],
        "stepTemplate": {
          "volumeMounts": [
            {
              "name": "trigger-payload",
              "mountPath": "/trigger-payload"
            }
          ],
          "env": [
            {
              "name": "ONE_PIPELINE_PATH",
              "value": "/opt/one-pipeline"
            },
            {
              "name": "COMMONS_PATH",
              "value": "/opt/commons"
            },
            {
              "name": "WORKSPACE",
              "value": "$(workspaces.artifacts.path)"
            },
            {
              "name": "TRIGGER_PAYLOAD",
              "valueFrom": {
                "configMapKeyRef": {
                  "name": "trigger",
                  "key": "payload.json"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.labels['tekton.dev/pipelineRun']"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_ID",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_URL",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/pipeline-run-url']"
                }
              }
            },
            {
              "name": "BUILD_NUMBER",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/build-number']"
                }
              }
            },
            {
              "name": "PIPELINE_ID",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/pipeline-id']"
                }
              }
            },
            {
              "name": "TRIGGER_TYPE",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/trigger-type']"
                }
              }
            },
            {
              "name": "TRIGGER_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/trigger-name']"
                }
              }
            },
            {
              "name": "TRIGGERED_BY",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/triggered-by']"
                }
              }
            },
            {
              "name": "TRIGGER_PAYLOAD_PATH",
              "value": "/trigger-payload/payload.json"
            },
            {
              "name": "PIPELINE_DEBUG",
              "value": "$(params.pipeline-debug)"
            },
            {
              "name": "DOCKER_HOST",
              "value": "tcp://localhost:2376"
            },
            {
              "name": "DOCKER_TLS_VERIFY",
              "value": "1"
            },
            {
              "name": "DOCKER_CERT_PATH",
              "value": "/certs/client"
            },
            {
              "name": "TASK_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.labels['tekton.dev/pipelineTask']"
                }
              }
            }
          ]
        },
        "sidecars": [
          {
            "name": "dind",
            "image": "$(params.dind-image)",
            "securityContext": {
              "privileged": true
            },
            "env": [
              {
                "name": "DOCKER_TLS_CERTDIR",
                "value": "/certs"
              },
              {
                "name": "ENABLE_DIND",
                "value": "true"
              }
            ],
            "volumeMounts": [
              {
                "name": "dind-certs",
                "mountPath": "/certs/client"
              }
            ],
            "script": "if [[ \"$ENABLE_DIND\" == \"true\" ]]; then\n  if [[ $(df -PT /var/lib/docker | awk 'NR==2 {print $2}') == virtiofs ]]; then\n    apk add e2fsprogs\n    truncate -s 50G /tmp/disk.img\n    mkfs.ext4 /tmp/disk.img\n    mount /tmp/disk.img /var/lib/docker\n  fi\n  # Set the MTU to a value that is containable in the ibmcloud calico mtu value\n  # References:\n  # - https://liejuntao001.medium.com/fix-docker-in-docker-network-issue-in-kubernetes-cc18c229d9e5\n  # - https://cloud.ibm.com/docs/containers?topic=containers-kernel#calico-mtu\n  #\n  /usr/local/bin/dockerd-entrypoint.sh --mtu=1400\nelse\n  mkdir -p /certs/client\n  touch /certs/client/ca.pem\nfi\n",
            "readinessProbe": {
              "periodSeconds": 1,
              "exec": {
                "command": [
                  "ls",
                  "/certs/client/ca.pem"
                ]
              }
            }
          }
        ],
        "steps": [
          {
            "name": "prepare",
            "image": "$(params.compliance-baseimage)",
            "workingDir": "$(workspaces.artifacts.path)",
            "volumeMounts": [
              {
                "name": "pipeline-scripts",
                "mountPath": "/usr/share/one-pipeline"
              },
              {
                "name": "pipelinectl",
                "mountPath": "/usr/share/cocoa"
              },
              {
                "name": "config",
                "mountPath": "/config"
              },
              {
                "name": "environment-properties",
                "mountPath": "/config/environment-properties"
              },
              {
                "name": "secure-properties",
                "mountPath": "/config/secure-properties"
              },
              {
                "name": "toolchain",
                "mountPath": "/toolchain"
              }
            ],
            "env": [
              {
                "name": "STEP_NAME",
                "value": "prepare"
              }
            ],
            "script": "#!/bin/bash\n. \"${ONE_PIPELINE_PATH}\"/internal/cra_compliance_prepare\n"
          },
          {
            "name": "detect-secrets",
            "image": "$(params.detect-secrets-image)",
            "workingDir": "$(workspaces.artifacts.path)",
            "volumeMounts": [
              {
                "name": "pipeline-scripts",
                "mountPath": "/opt/one-pipeline"
              },
              {
                "name": "pipelinectl",
                "mountPath": "/opt/cocoa"
              },
              {
                "name": "config",
                "mountPath": "/config"
              },
              {
                "name": "environment-properties",
                "mountPath": "/config/environment-properties"
              },
              {
                "name": "secure-properties",
                "mountPath": "/config/secure-properties"
              },
              {
                "name": "toolchain",
                "mountPath": "/toolchain"
              }
            ],
            "env": [
              {
                "name": "STEP_NAME",
                "value": "detect-secrets"
              }
            ],
            "script": "#!/bin/sh\n\nexport PATH=\"$PATH:/opt/cocoa/bin\"\n${ONE_PIPELINE_PATH}/internal/detect-secrets/run\n"
          },
          {
            "name": "run-cra",
            "image": "$(params.cra-base-image)",
            "workingDir": "$(workspaces.artifacts.path)",
            "volumeMounts": [
              {
                "name": "pipeline-scripts",
                "mountPath": "/opt/one-pipeline"
              },
              {
                "name": "pipelinectl",
                "mountPath": "/opt/cocoa"
              },
              {
                "name": "config",
                "mountPath": "/config"
              },
              {
                "name": "environment-properties",
                "mountPath": "/config/environment-properties"
              },
              {
                "name": "secure-properties",
                "mountPath": "/config/secure-properties"
              },
              {
                "name": "toolchain",
                "mountPath": "/toolchain"
              },
              {
                "name": "dind-certs",
                "mountPath": "/certs/client"
              }
            ],
            "env": [
              {
                "name": "STEP_NAME",
                "value": "run-cra"
              }
            ],
            "script": "#!/bin/bash\n\nexport PATH=\"$PATH:/opt/cocoa/bin\"\n. ${ONE_PIPELINE_PATH}/internal/cra/run-cra-cli\n"
          },
          {
            "name": "prepare-next-stage",
            "image": "$(params.compliance-baseimage)",
            "volumeMounts": [
              {
                "name": "environment-properties",
                "mountPath": "/config"
              }
            ],
            "env": [
              {
                "name": "STAGE",
                "value": "$(params.next-stage)"
              },
              {
                "name": "STEP_NAME",
                "value": "prepare-next-stage"
              }
            ],
            "script": "#!/bin/bash\n\nif [ -z \"$STAGE\" ]; then\n  exit 0\nfi\n\n. \"${ONE_PIPELINE_PATH}\"/internal/stage/parse_config\necho -n \"${STAGE_IMAGE}\" > \"$(results.image.path)\"\necho -n \"${STAGE_SCRIPT_PATH}\" > \"$(results.script.path)\"\necho -n \"${STAGE_DIND}\" > \"$(results.dind.path)\"\necho -n \"${STAGE_ABORT_ON_FAILURE}\" > \"$(results.abort-on-failure.path)\"\necho -n \"${STAGE_IMAGE_PULL_POLICY}\" > \"$(results.image-pull-policy.path)\"\necho -n \"${STAGE_CONFIGMAP}\" > \"$(results.configmap.path)\"\necho -n \"${STAGE_SECRET}\" > \"$(results.secret.path)\"\n"
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "Task",
      "metadata": {
        "name": "cc-finish"
      },
      "spec": {
        "params": [
          {
            "name": "compliance-baseimage",
            "description": "base image to run most of the built-in pipeline code"
          },
          {
            "name": "pipeline-debug",
            "description": "Pipeline debug mode",
            "default": "0"
          }
        ],
        "workspaces": [
          {
            "name": "artifacts",
            "mountPath": "/artifacts"
          }
        ],
        "volumes": [
          {
            "name": "config",
            "emptyDir": {}
          },
          {
            "name": "environment-properties",
            "configMap": {
              "name": "environment-properties"
            }
          },
          {
            "name": "secure-properties",
            "secret": {
              "secretName": "secure-properties"
            }
          },
          {
            "name": "toolchain",
            "configMap": {
              "name": "toolchain"
            }
          },
          {
            "name": "trigger-payload",
            "configMap": {
              "name": "trigger"
            }
          }
        ],
        "stepTemplate": {
          "volumeMounts": [
            {
              "name": "trigger-payload",
              "mountPath": "/trigger-payload"
            }
          ],
          "env": [
            {
              "name": "ONE_PIPELINE_PATH",
              "value": "/opt/one-pipeline"
            },
            {
              "name": "COMMONS_PATH",
              "value": "/opt/commons"
            },
            {
              "name": "WORKSPACE",
              "value": "$(workspaces.artifacts.path)"
            },
            {
              "name": "TRIGGER_PAYLOAD",
              "valueFrom": {
                "configMapKeyRef": {
                  "name": "trigger",
                  "key": "payload.json"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.labels['tekton.dev/pipelineRun']"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_ID",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_URL",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/pipeline-run-url']"
                }
              }
            },
            {
              "name": "BUILD_NUMBER",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/build-number']"
                }
              }
            },
            {
              "name": "PIPELINE_ID",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/pipeline-id']"
                }
              }
            },
            {
              "name": "TRIGGER_TYPE",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/trigger-type']"
                }
              }
            },
            {
              "name": "TRIGGER_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/trigger-name']"
                }
              }
            },
            {
              "name": "TRIGGERED_BY",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/triggered-by']"
                }
              }
            },
            {
              "name": "TRIGGER_PAYLOAD_PATH",
              "value": "/trigger-payload/payload.json"
            },
            {
              "name": "PIPELINE_DEBUG",
              "value": "$(params.pipeline-debug)"
            },
            {
              "name": "TASK_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.labels['tekton.dev/pipelineTask']"
                }
              }
            }
          ]
        },
        "steps": [
          {
            "name": "finish",
            "image": "$(params.compliance-baseimage)",
            "workingDir": "$(workspaces.artifacts.path)",
            "volumeMounts": [
              {
                "name": "config",
                "mountPath": "/config"
              },
              {
                "name": "environment-properties",
                "mountPath": "/config/environment-properties"
              },
              {
                "name": "secure-properties",
                "mountPath": "/config/secure-properties"
              },
              {
                "name": "toolchain",
                "mountPath": "/toolchain"
              }
            ],
            "env": [
              {
                "name": "STEP_NAME",
                "value": "finish"
              }
            ],
            "script": "#!/bin/bash\n\nexport PATH=\"$PATH:/opt/cocoa/bin\"\n. \"${ONE_PIPELINE_PATH}/internal/cc_finish\"\n"
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "Task",
      "metadata": {
        "name": "cc-start"
      },
      "spec": {
        "params": [
          {
            "name": "branch",
            "description": "branch",
            "default": "master"
          },
          {
            "name": "commit-id",
            "description": "commit id"
          },
          {
            "name": "commit-timestamp",
            "description": "the timestamp of when the commit pushed"
          },
          {
            "name": "pr-url",
            "description": "PR url"
          },
          {
            "name": "repository-integration",
            "description": "the repo integration name"
          },
          {
            "name": "repository",
            "description": "app repository owner and name"
          },
          {
            "name": "compliance-baseimage",
            "description": "base image to run most of the built-in pipeline code"
          },
          {
            "name": "pipeline-debug",
            "description": "Pipeline debug mode",
            "default": "0"
          },
          {
            "name": "next-stage",
            "default": ""
          }
        ],
        "results": [
          {
            "name": "image",
            "description": "Docker image to be used in the specified stage."
          },
          {
            "name": "script",
            "description": "Location of the script that's going to be used to run the specified stage."
          },
          {
            "name": "configmap",
            "description": "Name of the `ConfigMap` that's going to be mounted in `run-stage`"
          },
          {
            "name": "secret",
            "description": "Name of the `Secret` that's going to be mounted in `run-stage`"
          },
          {
            "name": "working-dir",
            "description": "one-pipeline working dir, the location of one-pipeline.yaml"
          },
          {
            "name": "abort-on-failure",
            "description": "Whether abort the pipeline in case of a failure or not"
          },
          {
            "name": "dind",
            "description": "Launch Docker-in-Docker sidecar"
          },
          {
            "name": "image-pull-policy",
            "description": "Set the imagePullPolicy for the Docker image in the runner task"
          }
        ],
        "workspaces": [
          {
            "name": "artifacts",
            "mountPath": "/artifacts"
          }
        ],
        "volumes": [
          {
            "name": "config",
            "emptyDir": {}
          },
          {
            "name": "environment-properties",
            "configMap": {
              "name": "environment-properties"
            }
          },
          {
            "name": "secure-properties",
            "secret": {
              "secretName": "secure-properties"
            }
          },
          {
            "name": "toolchain",
            "configMap": {
              "name": "toolchain"
            }
          },
          {
            "name": "trigger-payload",
            "configMap": {
              "name": "trigger"
            }
          }
        ],
        "stepTemplate": {
          "volumeMounts": [
            {
              "name": "trigger-payload",
              "mountPath": "/trigger-payload"
            }
          ],
          "env": [
            {
              "name": "ONE_PIPELINE_PATH",
              "value": "/opt/one-pipeline"
            },
            {
              "name": "COMMONS_PATH",
              "value": "/opt/commons"
            },
            {
              "name": "WORKSPACE",
              "value": "$(workspaces.artifacts.path)"
            },
            {
              "name": "TRIGGER_PAYLOAD",
              "valueFrom": {
                "configMapKeyRef": {
                  "name": "trigger",
                  "key": "payload.json"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.labels['tekton.dev/pipelineRun']"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_ID",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_URL",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/pipeline-run-url']"
                }
              }
            },
            {
              "name": "BUILD_NUMBER",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/build-number']"
                }
              }
            },
            {
              "name": "PIPELINE_ID",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/pipeline-id']"
                }
              }
            },
            {
              "name": "TRIGGER_TYPE",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/trigger-type']"
                }
              }
            },
            {
              "name": "TRIGGER_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/trigger-name']"
                }
              }
            },
            {
              "name": "TRIGGERED_BY",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/triggered-by']"
                }
              }
            },
            {
              "name": "TRIGGER_PAYLOAD_PATH",
              "value": "/trigger-payload/payload.json"
            },
            {
              "name": "PIPELINE_DEBUG",
              "value": "$(params.pipeline-debug)"
            },
            {
              "name": "TASK_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.labels['tekton.dev/pipelineTask']"
                }
              }
            }
          ]
        },
        "steps": [
          {
            "name": "start",
            "image": "$(params.compliance-baseimage)",
            "workingDir": "$(workspaces.artifacts.path)",
            "onError": "continue",
            "volumeMounts": [
              {
                "name": "config",
                "mountPath": "/config"
              },
              {
                "name": "environment-properties",
                "mountPath": "/config/environment-properties"
              },
              {
                "name": "secure-properties",
                "mountPath": "/config/secure-properties"
              },
              {
                "name": "toolchain",
                "mountPath": "/toolchain"
              }
            ],
            "env": [
              {
                "name": "STEP_NAME",
                "value": "start"
              }
            ],
            "script": "#!/bin/bash\n\nexport PATH=\"$PATH:/opt/cocoa/bin\"\nBRANCH=\"$(params.branch)\"\nBRANCH=${BRANCH#\"refs/heads/\"}\nif [ -z \"$BRANCH\" ]; then\n  BRANCH=\"master\"\nfi\necho -n \"$BRANCH\" >> /config/branch\necho -n \"$(params.repository-integration)\" >> /config/repository-integration\necho -n \"$(params.commit-id)\" >> /config/commit-sha\necho -n \"$(params.commit-timestamp)\" >> /config/commit-timestamp\necho -n \"$(params.pr-url)\" >> /config/pr-url\necho -n \"$(params.repository)\" >> /config/repository\n\n. \"${ONE_PIPELINE_PATH}/internal/cc_start\"\n"
          },
          {
            "name": "prepare-next-stage",
            "image": "$(params.compliance-baseimage)",
            "volumeMounts": [
              {
                "name": "environment-properties",
                "mountPath": "/config"
              }
            ],
            "env": [
              {
                "name": "STAGE",
                "value": "$(params.next-stage)"
              },
              {
                "name": "STEP_NAME",
                "value": "prepare-next-stage"
              }
            ],
            "script": "#!/bin/bash\n\nif [ -z \"$STAGE\" ]; then\n  exit 0\nfi\n. \"${ONE_PIPELINE_PATH}\"/internal/stage/parse_config\n\necho -n \"${STAGE_IMAGE}\" > \"$(results.image.path)\"\necho -n \"${STAGE_SCRIPT_PATH}\" > \"$(results.script.path)\"\necho -n \"${STAGE_DIND}\" > \"$(results.dind.path)\"\necho -n \"${STAGE_ABORT_ON_FAILURE}\" > \"$(results.abort-on-failure.path)\"\necho -n \"${STAGE_IMAGE_PULL_POLICY}\" > \"$(results.image-pull-policy.path)\"\necho -n \"${STAGE_CONFIGMAP}\" > \"$(results.configmap.path)\"\necho -n \"${STAGE_SECRET}\" > \"$(results.secret.path)\"\n"
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "Task",
      "metadata": {
        "name": "cd-change-request"
      },
      "spec": {
        "params": [
          {
            "name": "compliance-baseimage",
            "description": "base image to run most of the built-in pipeline code"
          },
          {
            "name": "pipeline-debug",
            "description": "Pipeline debug mode",
            "default": "0"
          },
          {
            "name": "next-stage",
            "default": ""
          }
        ],
        "results": [
          {
            "name": "image",
            "description": "Docker image to be used in the specified stage."
          },
          {
            "name": "script",
            "description": "Location of the script that's going to be used to run the specified stage."
          },
          {
            "name": "configmap",
            "description": "Name of the `ConfigMap` that's going to be mounted in `run-stage`"
          },
          {
            "name": "secret",
            "description": "Name of the `Secret` that's going to be mounted in `run-stage`"
          },
          {
            "name": "working-dir",
            "description": "one-pipeline working dir, the location of pipeline-config.yaml"
          },
          {
            "name": "abort-on-failure",
            "description": "Whether abort the pipeline in case of a failure or not"
          },
          {
            "name": "dind",
            "description": "Launch Docker-in-Docker sidecar"
          },
          {
            "name": "image-pull-policy",
            "description": "Set the imagePullPolicy for the Docker image in the runner task"
          },
          {
            "name": "change-request-id",
            "description": "The id of the created change request"
          }
        ],
        "workspaces": [
          {
            "name": "artifacts",
            "mountPath": "/artifacts"
          }
        ],
        "volumes": [
          {
            "name": "config",
            "emptyDir": {}
          },
          {
            "name": "environment-properties",
            "configMap": {
              "name": "environment-properties"
            }
          },
          {
            "name": "secure-properties",
            "secret": {
              "secretName": "secure-properties"
            }
          },
          {
            "name": "toolchain",
            "configMap": {
              "name": "toolchain"
            }
          },
          {
            "name": "trigger-payload",
            "configMap": {
              "name": "trigger"
            }
          }
        ],
        "stepTemplate": {
          "volumeMounts": [
            {
              "name": "trigger-payload",
              "mountPath": "/trigger-payload"
            }
          ],
          "env": [
            {
              "name": "ONE_PIPELINE_PATH",
              "value": "/opt/one-pipeline"
            },
            {
              "name": "COMMONS_PATH",
              "value": "/opt/commons"
            },
            {
              "name": "WORKSPACE",
              "value": "$(workspaces.artifacts.path)"
            },
            {
              "name": "TRIGGER_PAYLOAD",
              "valueFrom": {
                "configMapKeyRef": {
                  "name": "trigger",
                  "key": "payload.json"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.labels['tekton.dev/pipelineRun']"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_ID",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_URL",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/pipeline-run-url']"
                }
              }
            },
            {
              "name": "BUILD_NUMBER",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/build-number']"
                }
              }
            },
            {
              "name": "PIPELINE_ID",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/pipeline-id']"
                }
              }
            },
            {
              "name": "TRIGGER_TYPE",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/trigger-type']"
                }
              }
            },
            {
              "name": "TRIGGER_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/trigger-name']"
                }
              }
            },
            {
              "name": "TRIGGERED_BY",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/triggered-by']"
                }
              }
            },
            {
              "name": "TRIGGER_PAYLOAD_PATH",
              "value": "/trigger-payload/payload.json"
            },
            {
              "name": "PIPELINE_DEBUG",
              "value": "$(params.pipeline-debug)"
            },
            {
              "name": "TASK_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.labels['tekton.dev/pipelineTask']"
                }
              }
            }
          ]
        },
        "steps": [
          {
            "name": "change-request",
            "image": "$(params.compliance-baseimage)",
            "workingDir": "$(workspaces.artifacts.path)",
            "volumeMounts": [
              {
                "name": "config",
                "mountPath": "/config"
              },
              {
                "name": "environment-properties",
                "mountPath": "/config/environment-properties"
              },
              {
                "name": "secure-properties",
                "mountPath": "/config/secure-properties"
              },
              {
                "name": "toolchain",
                "mountPath": "/toolchain"
              }
            ],
            "env": [
              {
                "name": "STEP_NAME",
                "value": "change-request"
              }
            ],
            "script": "#!/bin/bash\nexport CR_ID_PATH=\"$(results.change-request-id.path)\"\n. \"${ONE_PIPELINE_PATH}/internal/cd_change_request\"\n"
          },
          {
            "name": "prepare-next-stage",
            "image": "$(params.compliance-baseimage)",
            "volumeMounts": [
              {
                "name": "environment-properties",
                "mountPath": "/config"
              }
            ],
            "env": [
              {
                "name": "STAGE",
                "value": "$(params.next-stage)"
              },
              {
                "name": "STEP_NAME",
                "value": "prepare-next-stage"
              }
            ],
            "script": "#!/bin/bash\n\nif [ -z \"$STAGE\" ]; then\n  exit 0\nfi\n. \"${ONE_PIPELINE_PATH}\"/internal/stage/parse_config\n\necho -n \"${STAGE_IMAGE}\" > \"$(results.image.path)\"\necho -n \"${STAGE_SCRIPT_PATH}\" > \"$(results.script.path)\"\necho -n \"${STAGE_DIND}\" > \"$(results.dind.path)\"\necho -n \"${STAGE_ABORT_ON_FAILURE}\" > \"$(results.abort-on-failure.path)\"\necho -n \"${STAGE_IMAGE_PULL_POLICY}\" > \"$(results.image-pull-policy.path)\"\necho -n \"${STAGE_CONFIGMAP}\" > \"$(results.configmap.path)\"\necho -n \"${STAGE_SECRET}\" > \"$(results.secret.path)\"\n"
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "Task",
      "metadata": {
        "name": "cd-finish"
      },
      "spec": {
        "params": [
          {
            "name": "compliance-baseimage",
            "description": "base image to run most of the built-in pipeline code"
          },
          {
            "name": "pipeline-debug",
            "description": "Pipeline debug mode",
            "default": "0"
          }
        ],
        "workspaces": [
          {
            "name": "artifacts",
            "mountPath": "/artifacts"
          }
        ],
        "volumes": [
          {
            "name": "config",
            "emptyDir": {}
          },
          {
            "name": "environment-properties",
            "configMap": {
              "name": "environment-properties"
            }
          },
          {
            "name": "secure-properties",
            "secret": {
              "secretName": "secure-properties"
            }
          },
          {
            "name": "toolchain",
            "configMap": {
              "name": "toolchain"
            }
          },
          {
            "name": "trigger-payload",
            "configMap": {
              "name": "trigger"
            }
          }
        ],
        "stepTemplate": {
          "volumeMounts": [
            {
              "name": "trigger-payload",
              "mountPath": "/trigger-payload"
            }
          ],
          "env": [
            {
              "name": "ONE_PIPELINE_PATH",
              "value": "/opt/one-pipeline"
            },
            {
              "name": "COMMONS_PATH",
              "value": "/opt/commons"
            },
            {
              "name": "WORKSPACE",
              "value": "$(workspaces.artifacts.path)"
            },
            {
              "name": "TRIGGER_PAYLOAD",
              "valueFrom": {
                "configMapKeyRef": {
                  "name": "trigger",
                  "key": "payload.json"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.labels['tekton.dev/pipelineRun']"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_ID",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_URL",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/pipeline-run-url']"
                }
              }
            },
            {
              "name": "BUILD_NUMBER",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/build-number']"
                }
              }
            },
            {
              "name": "PIPELINE_ID",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/pipeline-id']"
                }
              }
            },
            {
              "name": "TRIGGER_TYPE",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/trigger-type']"
                }
              }
            },
            {
              "name": "TRIGGER_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/trigger-name']"
                }
              }
            },
            {
              "name": "TRIGGERED_BY",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/triggered-by']"
                }
              }
            },
            {
              "name": "TRIGGER_PAYLOAD_PATH",
              "value": "/trigger-payload/payload.json"
            },
            {
              "name": "PIPELINE_DEBUG",
              "value": "$(params.pipeline-debug)"
            },
            {
              "name": "TASK_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.labels['tekton.dev/pipelineTask']"
                }
              }
            }
          ]
        },
        "steps": [
          {
            "name": "finish",
            "image": "$(params.compliance-baseimage)",
            "workingDir": "$(workspaces.artifacts.path)",
            "volumeMounts": [
              {
                "name": "config",
                "mountPath": "/config"
              },
              {
                "name": "environment-properties",
                "mountPath": "/config/environment-properties"
              },
              {
                "name": "secure-properties",
                "mountPath": "/config/secure-properties"
              },
              {
                "name": "toolchain",
                "mountPath": "/toolchain"
              }
            ],
            "env": [
              {
                "name": "STEP_NAME",
                "value": "finish"
              }
            ],
            "script": "#!/bin/bash\n. \"${ONE_PIPELINE_PATH}/internal/cd_finish\"\n"
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "Task",
      "metadata": {
        "name": "cd-start"
      },
      "spec": {
        "params": [
          {
            "name": "compliance-baseimage",
            "description": "base image to run most of the built-in pipeline code"
          },
          {
            "name": "pipeline-debug",
            "description": "Pipeline debug mode",
            "default": "0"
          },
          {
            "name": "next-stage",
            "default": ""
          }
        ],
        "results": [
          {
            "name": "image",
            "description": "Docker image to be used in the specified stage."
          },
          {
            "name": "script",
            "description": "Location of the script that's going to be used to run the specified stage."
          },
          {
            "name": "configmap",
            "description": "Name of the `ConfigMap` that's going to be mounted in `run-stage`"
          },
          {
            "name": "secret",
            "description": "Name of the `Secret` that's going to be mounted in `run-stage`"
          },
          {
            "name": "working-dir",
            "description": "one-pipeline working dir, the location of pipeline-config.yaml"
          },
          {
            "name": "abort-on-failure",
            "description": "Whether abort the pipeline in case of a failure or not"
          },
          {
            "name": "dind",
            "description": "Launch Docker-in-Docker sidecar"
          },
          {
            "name": "image-pull-policy",
            "description": "Set the imagePullPolicy for the Docker image in the runner task"
          }
        ],
        "workspaces": [
          {
            "name": "artifacts",
            "mountPath": "/artifacts"
          }
        ],
        "volumes": [
          {
            "name": "config",
            "emptyDir": {}
          },
          {
            "name": "environment-properties",
            "configMap": {
              "name": "environment-properties"
            }
          },
          {
            "name": "secure-properties",
            "secret": {
              "secretName": "secure-properties"
            }
          },
          {
            "name": "toolchain",
            "configMap": {
              "name": "toolchain"
            }
          },
          {
            "name": "trigger-payload",
            "configMap": {
              "name": "trigger"
            }
          }
        ],
        "stepTemplate": {
          "volumeMounts": [
            {
              "name": "trigger-payload",
              "mountPath": "/trigger-payload"
            }
          ],
          "env": [
            {
              "name": "ONE_PIPELINE_PATH",
              "value": "/opt/one-pipeline"
            },
            {
              "name": "COMMONS_PATH",
              "value": "/opt/commons"
            },
            {
              "name": "WORKSPACE",
              "value": "$(workspaces.artifacts.path)"
            },
            {
              "name": "TRIGGER_PAYLOAD",
              "valueFrom": {
                "configMapKeyRef": {
                  "name": "trigger",
                  "key": "payload.json"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.labels['tekton.dev/pipelineRun']"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_ID",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_URL",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/pipeline-run-url']"
                }
              }
            },
            {
              "name": "BUILD_NUMBER",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/build-number']"
                }
              }
            },
            {
              "name": "PIPELINE_ID",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/pipeline-id']"
                }
              }
            },
            {
              "name": "TRIGGER_TYPE",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/trigger-type']"
                }
              }
            },
            {
              "name": "TRIGGER_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/trigger-name']"
                }
              }
            },
            {
              "name": "TRIGGERED_BY",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/triggered-by']"
                }
              }
            },
            {
              "name": "TRIGGER_PAYLOAD_PATH",
              "value": "/trigger-payload/payload.json"
            },
            {
              "name": "PIPELINE_DEBUG",
              "value": "$(params.pipeline-debug)"
            },
            {
              "name": "TASK_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.labels['tekton.dev/pipelineTask']"
                }
              }
            }
          ]
        },
        "steps": [
          {
            "name": "start",
            "image": "$(params.compliance-baseimage)",
            "workingDir": "$(workspaces.artifacts.path)",
            "onError": "continue",
            "volumeMounts": [
              {
                "name": "config",
                "mountPath": "/config"
              },
              {
                "name": "environment-properties",
                "mountPath": "/config/environment-properties"
              },
              {
                "name": "secure-properties",
                "mountPath": "/config/secure-properties"
              },
              {
                "name": "toolchain",
                "mountPath": "/toolchain"
              }
            ],
            "env": [
              {
                "name": "STEP_NAME",
                "value": "start"
              }
            ],
            "script": "#!/bin/bash\n. \"${ONE_PIPELINE_PATH}/internal/cd_start\"\n"
          },
          {
            "name": "prepare-next-stage",
            "image": "$(params.compliance-baseimage)",
            "volumeMounts": [
              {
                "name": "environment-properties",
                "mountPath": "/config"
              }
            ],
            "env": [
              {
                "name": "STAGE",
                "value": "$(params.next-stage)"
              },
              {
                "name": "STEP_NAME",
                "value": "prepare-next-stage"
              }
            ],
            "script": "#!/bin/bash\n\nif [ -z \"$STAGE\" ]; then\n  exit 0\nfi\n. \"${ONE_PIPELINE_PATH}\"/internal/stage/parse_config\n\necho -n \"${STAGE_IMAGE}\" > \"$(results.image.path)\"\necho -n \"${STAGE_SCRIPT_PATH}\" > \"$(results.script.path)\"\necho -n \"${STAGE_DIND}\" > \"$(results.dind.path)\"\necho -n \"${STAGE_ABORT_ON_FAILURE}\" > \"$(results.abort-on-failure.path)\"\necho -n \"${STAGE_IMAGE_PULL_POLICY}\" > \"$(results.image-pull-policy.path)\"\necho -n \"${STAGE_CONFIGMAP}\" > \"$(results.configmap.path)\"\necho -n \"${STAGE_SECRET}\" > \"$(results.secret.path)\"\n"
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "Task",
      "metadata": {
        "name": "ci-compliance"
      },
      "spec": {
        "params": [
          {
            "name": "compliance-baseimage",
            "description": "base image to run most of the built-in pipeline code"
          },
          {
            "name": "pipeline-debug",
            "description": "Pipeline debug mode",
            "default": "0"
          },
          {
            "name": "next-stage",
            "default": ""
          },
          {
            "name": "cra-base-image",
            "default": "icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.3"
          },
          {
            "name": "dind-image",
            "description": "Base image to run sidecars"
          },
          {
            "name": "detect-secrets-image",
            "description": "Base image to detect Secrets"
          }
        ],
        "results": [
          {
            "name": "image",
            "description": "Docker image to be used in the specified stage."
          },
          {
            "name": "script",
            "description": "Location of the script that's going to be used to run the specified stage."
          },
          {
            "name": "configmap",
            "description": "Name of the `ConfigMap` that's going to be mounted in `run-stage`"
          },
          {
            "name": "secret",
            "description": "Name of the `Secret` that's going to be mounted in `run-stage`"
          },
          {
            "name": "working-dir",
            "description": "one-pipeline working dir, the location of pipeline-config.yaml"
          },
          {
            "name": "abort-on-failure",
            "description": "Whether abort the pipeline in case of a failure or not"
          },
          {
            "name": "dind",
            "description": "Launch Docker-in-Docker sidecar"
          },
          {
            "name": "image-pull-policy",
            "description": "Set the imagePullPolicy for the Docker image in the runner task"
          }
        ],
        "workspaces": [
          {
            "name": "artifacts",
            "mountPath": "/artifacts"
          }
        ],
        "volumes": [
          {
            "name": "pipeline-scripts",
            "emptyDir": {}
          },
          {
            "name": "pipelinectl",
            "emptyDir": {}
          },
          {
            "name": "config",
            "emptyDir": {}
          },
          {
            "name": "dind-certs",
            "emptyDir": {}
          },
          {
            "name": "environment-properties",
            "configMap": {
              "name": "environment-properties"
            }
          },
          {
            "name": "secure-properties",
            "secret": {
              "secretName": "secure-properties"
            }
          },
          {
            "name": "toolchain",
            "configMap": {
              "name": "toolchain"
            }
          },
          {
            "name": "trigger-payload",
            "configMap": {
              "name": "trigger"
            }
          }
        ],
        "stepTemplate": {
          "volumeMounts": [
            {
              "name": "trigger-payload",
              "mountPath": "/trigger-payload"
            }
          ],
          "env": [
            {
              "name": "ONE_PIPELINE_PATH",
              "value": "/opt/one-pipeline"
            },
            {
              "name": "COMMONS_PATH",
              "value": "/opt/commons"
            },
            {
              "name": "WORKSPACE",
              "value": "$(workspaces.artifacts.path)"
            },
            {
              "name": "TRIGGER_PAYLOAD",
              "valueFrom": {
                "configMapKeyRef": {
                  "name": "trigger",
                  "key": "payload.json"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.labels['tekton.dev/pipelineRun']"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_ID",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_URL",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/pipeline-run-url']"
                }
              }
            },
            {
              "name": "BUILD_NUMBER",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/build-number']"
                }
              }
            },
            {
              "name": "PIPELINE_ID",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/pipeline-id']"
                }
              }
            },
            {
              "name": "TRIGGER_TYPE",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/trigger-type']"
                }
              }
            },
            {
              "name": "TRIGGER_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/trigger-name']"
                }
              }
            },
            {
              "name": "TRIGGERED_BY",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/triggered-by']"
                }
              }
            },
            {
              "name": "TRIGGER_PAYLOAD_PATH",
              "value": "/trigger-payload/payload.json"
            },
            {
              "name": "PIPELINE_DEBUG",
              "value": "$(params.pipeline-debug)"
            },
            {
              "name": "DOCKER_HOST",
              "value": "tcp://localhost:2376"
            },
            {
              "name": "DOCKER_TLS_VERIFY",
              "value": "1"
            },
            {
              "name": "DOCKER_CERT_PATH",
              "value": "/certs/client"
            },
            {
              "name": "TASK_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.labels['tekton.dev/pipelineTask']"
                }
              }
            }
          ]
        },
        "sidecars": [
          {
            "name": "dind",
            "image": "$(params.dind-image)",
            "securityContext": {
              "privileged": true
            },
            "env": [
              {
                "name": "DOCKER_TLS_CERTDIR",
                "value": "/certs"
              },
              {
                "name": "ENABLE_DIND",
                "value": "true"
              }
            ],
            "volumeMounts": [
              {
                "name": "dind-certs",
                "mountPath": "/certs/client"
              }
            ],
            "script": "if [[ \"$ENABLE_DIND\" == \"true\" ]]; then\n  if [[ $(df -PT /var/lib/docker | awk 'NR==2 {print $2}') == virtiofs ]]; then\n    apk add e2fsprogs\n    truncate -s 50G /tmp/disk.img\n    mkfs.ext4 /tmp/disk.img\n    mount /tmp/disk.img /var/lib/docker\n  fi\n  # Set the MTU to a value that is containable in the ibmcloud calico mtu value\n  # References:\n  # - https://liejuntao001.medium.com/fix-docker-in-docker-network-issue-in-kubernetes-cc18c229d9e5\n  # - https://cloud.ibm.com/docs/containers?topic=containers-kernel#calico-mtu\n  #\n  /usr/local/bin/dockerd-entrypoint.sh --mtu=1400\nelse\n  mkdir -p /certs/client\n  touch /certs/client/ca.pem\nfi\n",
            "readinessProbe": {
              "periodSeconds": 1,
              "exec": {
                "command": [
                  "ls",
                  "/certs/client/ca.pem"
                ]
              }
            }
          }
        ],
        "steps": [
          {
            "name": "prepare",
            "image": "$(params.compliance-baseimage)",
            "workingDir": "$(workspaces.artifacts.path)",
            "volumeMounts": [
              {
                "name": "pipeline-scripts",
                "mountPath": "/usr/share/one-pipeline"
              },
              {
                "name": "pipelinectl",
                "mountPath": "/usr/share/cocoa"
              },
              {
                "name": "config",
                "mountPath": "/config"
              },
              {
                "name": "environment-properties",
                "mountPath": "/config/environment-properties"
              },
              {
                "name": "secure-properties",
                "mountPath": "/config/secure-properties"
              },
              {
                "name": "toolchain",
                "mountPath": "/toolchain"
              }
            ],
            "env": [
              {
                "name": "STEP_NAME",
                "value": "prepare"
              }
            ],
            "script": "#!/bin/bash\n. \"${ONE_PIPELINE_PATH}\"/internal/cra_compliance_prepare\n"
          },
          {
            "name": "detect-secrets",
            "image": "$(params.detect-secrets-image)",
            "workingDir": "$(workspaces.artifacts.path)",
            "volumeMounts": [
              {
                "name": "pipeline-scripts",
                "mountPath": "/opt/one-pipeline"
              },
              {
                "name": "pipelinectl",
                "mountPath": "/opt/cocoa"
              },
              {
                "name": "config",
                "mountPath": "/config"
              },
              {
                "name": "environment-properties",
                "mountPath": "/config/environment-properties"
              },
              {
                "name": "secure-properties",
                "mountPath": "/config/secure-properties"
              },
              {
                "name": "toolchain",
                "mountPath": "/toolchain"
              }
            ],
            "env": [
              {
                "name": "STEP_NAME",
                "value": "detect-secrets"
              }
            ],
            "script": "#!/bin/sh\n\nexport PATH=\"$PATH:/opt/cocoa/bin\"\n${ONE_PIPELINE_PATH}/internal/detect-secrets/run\n"
          },
          {
            "name": "run-cra",
            "image": "$(params.cra-base-image)",
            "workingDir": "$(workspaces.artifacts.path)",
            "volumeMounts": [
              {
                "name": "pipeline-scripts",
                "mountPath": "/opt/one-pipeline"
              },
              {
                "name": "pipelinectl",
                "mountPath": "/opt/cocoa"
              },
              {
                "name": "config",
                "mountPath": "/config"
              },
              {
                "name": "environment-properties",
                "mountPath": "/config/environment-properties"
              },
              {
                "name": "secure-properties",
                "mountPath": "/config/secure-properties"
              },
              {
                "name": "toolchain",
                "mountPath": "/toolchain"
              },
              {
                "name": "dind-certs",
                "mountPath": "/certs/client"
              }
            ],
            "env": [
              {
                "name": "STEP_NAME",
                "value": "run-cra"
              }
            ],
            "script": "#!/bin/bash\n\nexport PATH=\"$PATH:/opt/cocoa/bin\"\n. ${ONE_PIPELINE_PATH}/internal/cra/run-cra-cli\n"
          },
          {
            "name": "finish",
            "image": "$(params.compliance-baseimage)",
            "workingDir": "$(workspaces.artifacts.path)",
            "volumeMounts": [
              {
                "name": "config",
                "mountPath": "/config"
              },
              {
                "name": "environment-properties",
                "mountPath": "/config/environment-properties"
              },
              {
                "name": "secure-properties",
                "mountPath": "/config/secure-properties"
              },
              {
                "name": "toolchain",
                "mountPath": "/toolchain"
              }
            ],
            "env": [
              {
                "name": "STEP_NAME",
                "value": "finish"
              }
            ],
            "script": "#!/bin/bash\n\nexport PATH=\"$PATH:/opt/cocoa/bin\"\n. \"${ONE_PIPELINE_PATH}\"/internal/ci_compliance_checks\n"
          },
          {
            "name": "prepare-next-stage",
            "image": "$(params.compliance-baseimage)",
            "volumeMounts": [
              {
                "name": "environment-properties",
                "mountPath": "/config"
              }
            ],
            "env": [
              {
                "name": "STAGE",
                "value": "$(params.next-stage)"
              },
              {
                "name": "STEP_NAME",
                "value": "prepare-next-stage"
              }
            ],
            "script": "#!/bin/bash\n\nif [ -z \"$STAGE\" ]; then\n  exit 0\nfi\n. \"${ONE_PIPELINE_PATH}\"/internal/stage/parse_config\n\necho -n \"${STAGE_IMAGE}\" > \"$(results.image.path)\"\necho -n \"${STAGE_SCRIPT_PATH}\" > \"$(results.script.path)\"\necho -n \"${STAGE_DIND}\" > \"$(results.dind.path)\"\necho -n \"${STAGE_ABORT_ON_FAILURE}\" > \"$(results.abort-on-failure.path)\"\necho -n \"${STAGE_IMAGE_PULL_POLICY}\" > \"$(results.image-pull-policy.path)\"\necho -n \"${STAGE_CONFIGMAP}\" > \"$(results.configmap.path)\"\necho -n \"${STAGE_SECRET}\" > \"$(results.secret.path)\"\n"
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "Task",
      "metadata": {
        "name": "ci-finish"
      },
      "spec": {
        "params": [
          {
            "name": "compliance-baseimage",
            "description": "base image to run most of the built-in pipeline code"
          },
          {
            "name": "pipeline-debug",
            "description": "Pipeline debug mode",
            "default": "0"
          }
        ],
        "workspaces": [
          {
            "name": "artifacts",
            "mountPath": "/artifacts"
          }
        ],
        "volumes": [
          {
            "name": "config",
            "emptyDir": {}
          },
          {
            "name": "environment-properties",
            "configMap": {
              "name": "environment-properties"
            }
          },
          {
            "name": "secure-properties",
            "secret": {
              "secretName": "secure-properties"
            }
          },
          {
            "name": "toolchain",
            "configMap": {
              "name": "toolchain"
            }
          },
          {
            "name": "trigger-payload",
            "configMap": {
              "name": "trigger"
            }
          }
        ],
        "stepTemplate": {
          "volumeMounts": [
            {
              "name": "trigger-payload",
              "mountPath": "/trigger-payload"
            }
          ],
          "env": [
            {
              "name": "ONE_PIPELINE_PATH",
              "value": "/opt/one-pipeline"
            },
            {
              "name": "COMMONS_PATH",
              "value": "/opt/commons"
            },
            {
              "name": "WORKSPACE",
              "value": "$(workspaces.artifacts.path)"
            },
            {
              "name": "TRIGGER_PAYLOAD",
              "valueFrom": {
                "configMapKeyRef": {
                  "name": "trigger",
                  "key": "payload.json"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.labels['tekton.dev/pipelineRun']"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_ID",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_URL",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/pipeline-run-url']"
                }
              }
            },
            {
              "name": "BUILD_NUMBER",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/build-number']"
                }
              }
            },
            {
              "name": "PIPELINE_ID",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/pipeline-id']"
                }
              }
            },
            {
              "name": "TRIGGER_TYPE",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/trigger-type']"
                }
              }
            },
            {
              "name": "TRIGGER_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/trigger-name']"
                }
              }
            },
            {
              "name": "TRIGGERED_BY",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/triggered-by']"
                }
              }
            },
            {
              "name": "TRIGGER_PAYLOAD_PATH",
              "value": "/trigger-payload/payload.json"
            },
            {
              "name": "PIPELINE_DEBUG",
              "value": "$(params.pipeline-debug)"
            },
            {
              "name": "TASK_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.labels['tekton.dev/pipelineTask']"
                }
              }
            }
          ]
        },
        "steps": [
          {
            "name": "finish",
            "image": "$(params.compliance-baseimage)",
            "workingDir": "$(workspaces.artifacts.path)",
            "volumeMounts": [
              {
                "name": "config",
                "mountPath": "/config"
              },
              {
                "name": "environment-properties",
                "mountPath": "/config/environment-properties"
              },
              {
                "name": "secure-properties",
                "mountPath": "/config/secure-properties"
              },
              {
                "name": "toolchain",
                "mountPath": "/toolchain"
              }
            ],
            "env": [
              {
                "name": "STEP_NAME",
                "value": "finish"
              }
            ],
            "script": "#!/bin/bash\n\nexport PATH=\"$PATH:/opt/cocoa/bin\"\n. \"${ONE_PIPELINE_PATH}/internal/ci_finish\"\n"
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "Task",
      "metadata": {
        "name": "ci-start"
      },
      "spec": {
        "params": [
          {
            "name": "branch",
            "description": "branch",
            "default": "master"
          },
          {
            "name": "commit-id",
            "description": "commit id"
          },
          {
            "name": "commit-timestamp",
            "description": "the timestamp of when the commit pushed"
          },
          {
            "name": "pr-url",
            "description": "PR url"
          },
          {
            "name": "repository-integration",
            "description": "the repo integration name"
          },
          {
            "name": "repository",
            "description": "app repository owner and name"
          },
          {
            "name": "compliance-baseimage",
            "description": "base image to run most of the built-in pipeline code"
          },
          {
            "name": "pipeline-debug",
            "description": "Pipeline debug mode",
            "default": "0"
          },
          {
            "name": "next-stage",
            "default": ""
          }
        ],
        "results": [
          {
            "name": "image",
            "description": "Docker image to be used in the specified stage."
          },
          {
            "name": "script",
            "description": "Location of the script that's going to be used to run the specified stage."
          },
          {
            "name": "configmap",
            "description": "Name of the `ConfigMap` that's going to be mounted in `run-stage`"
          },
          {
            "name": "secret",
            "description": "Name of the `Secret` that's going to be mounted in `run-stage`"
          },
          {
            "name": "working-dir",
            "description": "one-pipeline working dir, the location of pipeline-config.yaml"
          },
          {
            "name": "abort-on-failure",
            "description": "Whether abort the pipeline in case of a failure or not"
          },
          {
            "name": "dind",
            "description": "Launch Docker-in-Docker sidecar"
          },
          {
            "name": "image-pull-policy",
            "description": "Set the imagePullPolicy for the Docker image in the runner task"
          }
        ],
        "workspaces": [
          {
            "name": "artifacts",
            "mountPath": "/artifacts"
          }
        ],
        "volumes": [
          {
            "name": "config",
            "emptyDir": {}
          },
          {
            "name": "environment-properties",
            "configMap": {
              "name": "environment-properties"
            }
          },
          {
            "name": "secure-properties",
            "secret": {
              "secretName": "secure-properties"
            }
          },
          {
            "name": "toolchain",
            "configMap": {
              "name": "toolchain"
            }
          },
          {
            "name": "trigger-payload",
            "configMap": {
              "name": "trigger"
            }
          }
        ],
        "stepTemplate": {
          "volumeMounts": [
            {
              "name": "trigger-payload",
              "mountPath": "/trigger-payload"
            }
          ],
          "env": [
            {
              "name": "ONE_PIPELINE_PATH",
              "value": "/opt/one-pipeline"
            },
            {
              "name": "COMMONS_PATH",
              "value": "/opt/commons"
            },
            {
              "name": "WORKSPACE",
              "value": "$(workspaces.artifacts.path)"
            },
            {
              "name": "TRIGGER_PAYLOAD",
              "valueFrom": {
                "configMapKeyRef": {
                  "name": "trigger",
                  "key": "payload.json"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.labels['tekton.dev/pipelineRun']"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_ID",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_URL",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/pipeline-run-url']"
                }
              }
            },
            {
              "name": "BUILD_NUMBER",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/build-number']"
                }
              }
            },
            {
              "name": "PIPELINE_ID",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/pipeline-id']"
                }
              }
            },
            {
              "name": "TRIGGER_TYPE",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/trigger-type']"
                }
              }
            },
            {
              "name": "TRIGGER_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/trigger-name']"
                }
              }
            },
            {
              "name": "TRIGGERED_BY",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/triggered-by']"
                }
              }
            },
            {
              "name": "TRIGGER_PAYLOAD_PATH",
              "value": "/trigger-payload/payload.json"
            },
            {
              "name": "PIPELINE_DEBUG",
              "value": "$(params.pipeline-debug)"
            },
            {
              "name": "TASK_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.labels['tekton.dev/pipelineTask']"
                }
              }
            }
          ]
        },
        "steps": [
          {
            "name": "start",
            "image": "$(params.compliance-baseimage)",
            "workingDir": "$(workspaces.artifacts.path)",
            "onError": "continue",
            "volumeMounts": [
              {
                "name": "config",
                "mountPath": "/config"
              },
              {
                "name": "environment-properties",
                "mountPath": "/config/environment-properties"
              },
              {
                "name": "secure-properties",
                "mountPath": "/config/secure-properties"
              },
              {
                "name": "toolchain",
                "mountPath": "/toolchain"
              }
            ],
            "env": [
              {
                "name": "STEP_NAME",
                "value": "start"
              }
            ],
            "script": "#!/bin/bash\n\nexport PATH=\"$PATH:/opt/cocoa/bin\"\nBRANCH=\"$(params.branch)\"\nBRANCH=${BRANCH#\"refs/heads/\"}\nif [ -z \"$BRANCH\" ]; then\n  BRANCH=\"master\"\nfi\necho -n \"$BRANCH\" >> /config/branch\necho -n \"$(params.repository-integration)\" >> /config/repository-integration\necho -n \"$(params.commit-id)\" >> /config/commit-sha\necho -n \"$(params.commit-timestamp)\" >> /config/commit-timestamp\necho -n \"$(params.pr-url)\" >> /config/pr-url\necho -n \"$(params.repository)\" >> /config/repository\n\n. \"${ONE_PIPELINE_PATH}/internal/ci_start\"\n"
          },
          {
            "name": "prepare-next-stage",
            "image": "$(params.compliance-baseimage)",
            "volumeMounts": [
              {
                "name": "environment-properties",
                "mountPath": "/config"
              }
            ],
            "env": [
              {
                "name": "STAGE",
                "value": "$(params.next-stage)"
              },
              {
                "name": "STEP_NAME",
                "value": "prepare-next-stage"
              }
            ],
            "script": "#!/bin/bash\n\nif [ -z \"$STAGE\" ]; then\n  exit 0\nfi\n. \"${ONE_PIPELINE_PATH}\"/internal/stage/parse_config\n\necho -n \"${STAGE_IMAGE}\" > \"$(results.image.path)\"\necho -n \"${STAGE_SCRIPT_PATH}\" > \"$(results.script.path)\"\necho -n \"${STAGE_DIND}\" > \"$(results.dind.path)\"\necho -n \"${STAGE_ABORT_ON_FAILURE}\" > \"$(results.abort-on-failure.path)\"\necho -n \"${STAGE_IMAGE_PULL_POLICY}\" > \"$(results.image-pull-policy.path)\"\necho -n \"${STAGE_CONFIGMAP}\" > \"$(results.configmap.path)\"\necho -n \"${STAGE_SECRET}\" > \"$(results.secret.path)\"\n"
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "Task",
      "metadata": {
        "name": "parse-config"
      },
      "spec": {
        "params": [
          {
            "name": "stage",
            "description": "Parse this section from the config file"
          },
          {
            "name": "compliance-baseimage",
            "description": "base image to run most of the built-in pipeline code"
          },
          {
            "name": "pipeline-debug",
            "description": "Use debug mode",
            "default": "0"
          }
        ],
        "results": [
          {
            "name": "image",
            "description": "Docker image to be used in the specified stage."
          },
          {
            "name": "script",
            "description": "Location of the script that's going to be used to run the specified stage."
          },
          {
            "name": "configmap",
            "description": "Name of the `ConfigMap` that's going to be mounted in `run-stage`"
          },
          {
            "name": "secret",
            "description": "Name of the `Secret` that's going to be mounted in `run-stage`"
          },
          {
            "name": "working-dir",
            "description": "one pipeline working dir, the location of pipeline-config.yaml"
          },
          {
            "name": "abort-on-failure",
            "description": "Whether abort the pipeline in case of a failure or not"
          },
          {
            "name": "dind",
            "description": "Launch Docker-in-Docker sidecar"
          },
          {
            "name": "image-pull-policy",
            "description": "Set the imagePullPolicy for the Docker image in the runner task"
          }
        ],
        "workspaces": [
          {
            "name": "app",
            "description": "Workspace where the application is checked out."
          }
        ],
        "volumes": [
          {
            "name": "environment-properties",
            "configMap": {
              "name": "environment-properties"
            }
          }
        ],
        "stepTemplate": {
          "env": [
            {
              "name": "PIPELINE_DEBUG",
              "value": "$(params.pipeline-debug)"
            },
            {
              "name": "WORKSPACE",
              "value": "$(workspaces.app.path)"
            },
            {
              "name": "ONE_PIPELINE_PATH",
              "value": "/opt/one-pipeline"
            },
            {
              "name": "COMMONS_PATH",
              "value": "/opt/commons"
            },
            {
              "name": "STAGE",
              "value": "$(params.stage)"
            },
            {
              "name": "TASK_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.labels['tekton.dev/pipelineTask']"
                }
              }
            }
          ]
        },
        "steps": [
          {
            "name": "parse-config",
            "image": "$(params.compliance-baseimage)",
            "volumeMounts": [
              {
                "name": "environment-properties",
                "mountPath": "/config"
              }
            ],
            "env": [
              {
                "name": "STEP_NAME",
                "value": "parse-config"
              }
            ],
            "script": "#!/bin/bash\n. \"${ONE_PIPELINE_PATH}\"/internal/stage/parse_config\n\necho -n \"${STAGE_IMAGE}\" > \"$(results.image.path)\"\necho -n \"${STAGE_SCRIPT_PATH}\" > \"$(results.script.path)\"\necho -n \"${STAGE_DIND}\" > \"$(results.dind.path)\"\necho -n \"${STAGE_ABORT_ON_FAILURE}\" > \"$(results.abort-on-failure.path)\"\necho -n \"${STAGE_IMAGE_PULL_POLICY}\" > \"$(results.image-pull-policy.path)\"\necho -n \"${STAGE_CONFIGMAP}\" > \"$(results.configmap.path)\"\necho -n \"${STAGE_SECRET}\" > \"$(results.secret.path)\"\n"
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "Task",
      "metadata": {
        "name": "pr-finish"
      },
      "spec": {
        "params": [
          {
            "name": "compliance-baseimage",
            "description": "base image to run most of the built-in pipeline code"
          },
          {
            "name": "pipeline-debug",
            "description": "Pipeline debug mode",
            "default": "0"
          },
          {
            "name": "cra-base-image",
            "default": "icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.3"
          },
          {
            "name": "dind-image",
            "description": "Base image to run sidecars"
          },
          {
            "name": "detect-secrets-image",
            "description": "Base image to detect Secrets"
          }
        ],
        "workspaces": [
          {
            "name": "artifacts",
            "mountPath": "/artifacts"
          }
        ],
        "volumes": [
          {
            "name": "pipeline-scripts",
            "emptyDir": {}
          },
          {
            "name": "pipelinectl",
            "emptyDir": {}
          },
          {
            "name": "config",
            "emptyDir": {}
          },
          {
            "name": "dind-certs",
            "emptyDir": {}
          },
          {
            "name": "environment-properties",
            "configMap": {
              "name": "environment-properties"
            }
          },
          {
            "name": "secure-properties",
            "secret": {
              "secretName": "secure-properties"
            }
          },
          {
            "name": "toolchain",
            "configMap": {
              "name": "toolchain"
            }
          },
          {
            "name": "trigger-payload",
            "configMap": {
              "name": "trigger"
            }
          }
        ],
        "stepTemplate": {
          "volumeMounts": [
            {
              "name": "trigger-payload",
              "mountPath": "/trigger-payload"
            }
          ],
          "env": [
            {
              "name": "ONE_PIPELINE_PATH",
              "value": "/opt/one-pipeline"
            },
            {
              "name": "WORKSPACE",
              "value": "$(workspaces.artifacts.path)"
            },
            {
              "name": "TRIGGER_PAYLOAD",
              "valueFrom": {
                "configMapKeyRef": {
                  "name": "trigger",
                  "key": "payload.json"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.labels['tekton.dev/pipelineRun']"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_ID",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_URL",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/pipeline-run-url']"
                }
              }
            },
            {
              "name": "BUILD_NUMBER",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/build-number']"
                }
              }
            },
            {
              "name": "PIPELINE_ID",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/pipeline-id']"
                }
              }
            },
            {
              "name": "TRIGGER_TYPE",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/trigger-type']"
                }
              }
            },
            {
              "name": "TRIGGER_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/trigger-name']"
                }
              }
            },
            {
              "name": "TRIGGERED_BY",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/triggered-by']"
                }
              }
            },
            {
              "name": "TRIGGER_PAYLOAD_PATH",
              "value": "/trigger-payload/payload.json"
            },
            {
              "name": "PIPELINE_DEBUG",
              "value": "$(params.pipeline-debug)"
            },
            {
              "name": "DOCKER_HOST",
              "value": "tcp://localhost:2376"
            },
            {
              "name": "DOCKER_TLS_VERIFY",
              "value": "1"
            },
            {
              "name": "DOCKER_CERT_PATH",
              "value": "/certs/client"
            },
            {
              "name": "TASK_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.labels['tekton.dev/pipelineTask']"
                }
              }
            }
          ]
        },
        "sidecars": [
          {
            "name": "dind",
            "image": "$(params.dind-image)",
            "securityContext": {
              "privileged": true
            },
            "env": [
              {
                "name": "DOCKER_TLS_CERTDIR",
                "value": "/certs"
              },
              {
                "name": "ENABLE_DIND",
                "value": "true"
              }
            ],
            "volumeMounts": [
              {
                "name": "dind-certs",
                "mountPath": "/certs/client"
              }
            ],
            "script": "if [[ \"$ENABLE_DIND\" == \"true\" ]]; then\n  if [[ $(df -PT /var/lib/docker | awk 'NR==2 {print $2}') == virtiofs ]]; then\n    apk add e2fsprogs\n    truncate -s 50G /tmp/disk.img\n    mkfs.ext4 /tmp/disk.img\n    mount /tmp/disk.img /var/lib/docker\n  fi\n  # Set the MTU to a value that is containable in the ibmcloud calico mtu value\n  # References:\n  # - https://liejuntao001.medium.com/fix-docker-in-docker-network-issue-in-kubernetes-cc18c229d9e5\n  # - https://cloud.ibm.com/docs/containers?topic=containers-kernel#calico-mtu\n  #\n  /usr/local/bin/dockerd-entrypoint.sh --mtu=1400\nelse\n  mkdir -p /certs/client\n  touch /certs/client/ca.pem\nfi\n",
            "readinessProbe": {
              "periodSeconds": 1,
              "exec": {
                "command": [
                  "ls",
                  "/certs/client/ca.pem"
                ]
              }
            }
          }
        ],
        "steps": [
          {
            "name": "finish",
            "image": "$(params.compliance-baseimage)",
            "workingDir": "$(workspaces.artifacts.path)",
            "volumeMounts": [
              {
                "name": "config",
                "mountPath": "/config"
              },
              {
                "name": "environment-properties",
                "mountPath": "/config/environment-properties"
              },
              {
                "name": "secure-properties",
                "mountPath": "/config/secure-properties"
              },
              {
                "name": "toolchain",
                "mountPath": "/toolchain"
              }
            ],
            "env": [
              {
                "name": "STEP_NAME",
                "value": "finish"
              }
            ],
            "script": "#!/bin/bash\n\nexport PATH=\"$PATH:/opt/cocoa/bin\"\n. \"${ONE_PIPELINE_PATH}\"/internal/pr_finish\n"
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "Task",
      "metadata": {
        "name": "pr-start"
      },
      "spec": {
        "params": [
          {
            "name": "head-branch",
            "description": "source branch of the PR"
          },
          {
            "name": "head-sha",
            "description": "commit id"
          },
          {
            "name": "head-repo",
            "description": "the name of the PR's repo source"
          },
          {
            "name": "base-branch",
            "description": "target branch of the PR"
          },
          {
            "name": "base-repo",
            "description": "the name of the PR's repo target"
          },
          {
            "name": "base-repo-name",
            "description": "name of the base repo"
          },
          {
            "name": "base-repo-owner",
            "description": "owner of the base repo"
          },
          {
            "name": "pr-url",
            "description": "PR url"
          },
          {
            "name": "commit-timestamp",
            "description": "the timestamp of when the commit pushed"
          },
          {
            "name": "event-payload",
            "description": "event payload from the trigger webhook",
            "default": ""
          },
          {
            "name": "compliance-baseimage",
            "description": "base image to run most of the built-in pipeline code"
          },
          {
            "name": "pipeline-debug",
            "description": "Pipeline debug mode",
            "default": "0"
          },
          {
            "name": "next-stage",
            "default": ""
          }
        ],
        "results": [
          {
            "name": "image",
            "description": "Docker image to be used in the specified stage."
          },
          {
            "name": "script",
            "description": "Location of the script that's going to be used to run the specified stage."
          },
          {
            "name": "configmap",
            "description": "Name of the `ConfigMap` that's going to be mounted in `run-stage`"
          },
          {
            "name": "secret",
            "description": "Name of the `Secret` that's going to be mounted in `run-stage`"
          },
          {
            "name": "working-dir",
            "description": "one-pipeline working dir, the location of pipeline-config.yaml"
          },
          {
            "name": "abort-on-failure",
            "description": "Whether abort the pipeline in case of a failure or not"
          },
          {
            "name": "dind",
            "description": "Launch Docker-in-Docker sidecar"
          },
          {
            "name": "image-pull-policy",
            "description": "Set the imagePullPolicy for the Docker image in the runner task"
          }
        ],
        "workspaces": [
          {
            "name": "artifacts",
            "mountPath": "/artifacts"
          }
        ],
        "volumes": [
          {
            "name": "config",
            "emptyDir": {}
          },
          {
            "name": "environment-properties",
            "configMap": {
              "name": "environment-properties"
            }
          },
          {
            "name": "secure-properties",
            "secret": {
              "secretName": "secure-properties"
            }
          },
          {
            "name": "toolchain",
            "configMap": {
              "name": "toolchain"
            }
          },
          {
            "name": "trigger-payload",
            "configMap": {
              "name": "trigger"
            }
          }
        ],
        "stepTemplate": {
          "volumeMounts": [
            {
              "name": "trigger-payload",
              "mountPath": "/trigger-payload"
            }
          ],
          "env": [
            {
              "name": "ONE_PIPELINE_PATH",
              "value": "/opt/one-pipeline"
            },
            {
              "name": "COMMONS_PATH",
              "value": "/opt/commons"
            },
            {
              "name": "WORKSPACE",
              "value": "$(workspaces.artifacts.path)"
            },
            {
              "name": "TRIGGER_PAYLOAD",
              "valueFrom": {
                "configMapKeyRef": {
                  "name": "trigger",
                  "key": "payload.json"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.labels['tekton.dev/pipelineRun']"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_ID",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_URL",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/pipeline-run-url']"
                }
              }
            },
            {
              "name": "BUILD_NUMBER",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/build-number']"
                }
              }
            },
            {
              "name": "PIPELINE_ID",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/pipeline-id']"
                }
              }
            },
            {
              "name": "TRIGGER_TYPE",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/trigger-type']"
                }
              }
            },
            {
              "name": "TRIGGER_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/trigger-name']"
                }
              }
            },
            {
              "name": "TRIGGERED_BY",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/triggered-by']"
                }
              }
            },
            {
              "name": "TRIGGER_PAYLOAD_PATH",
              "value": "/trigger-payload/payload.json"
            },
            {
              "name": "PIPELINE_DEBUG",
              "value": "$(params.pipeline-debug)"
            },
            {
              "name": "TASK_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.labels['tekton.dev/pipelineTask']"
                }
              }
            }
          ]
        },
        "steps": [
          {
            "name": "start",
            "image": "$(params.compliance-baseimage)",
            "workingDir": "$(workspaces.artifacts.path)",
            "volumeMounts": [
              {
                "name": "config",
                "mountPath": "/config"
              },
              {
                "name": "environment-properties",
                "mountPath": "/config/environment-properties"
              },
              {
                "name": "secure-properties",
                "mountPath": "/config/secure-properties"
              },
              {
                "name": "toolchain",
                "mountPath": "/toolchain"
              }
            ],
            "env": [
              {
                "name": "STEP_NAME",
                "value": "start"
              }
            ],
            "script": "#!/bin/bash\n\nexport PATH=\"$PATH:/opt/cocoa/bin\"\necho -n \"$(params.head-repo)\" >> /config/head-repo\necho -n \"$(params.head-branch)\" >> /config/head-branch\necho -n \"$(params.head-sha)\" >> /config/head-sha\necho -n \"$(params.base-repo)\" >> /config/base-repo\necho -n \"$(params.base-branch)\" >> /config/base-branch\necho -n \"$(params.base-repo-owner)\" >> /config/base-repo-owner\necho -n \"$(params.base-repo-name)\" >> /config/base-repo-name\n\necho -n \"$(params.head-branch)\" >> /config/branch\necho -n \"$(params.base-branch)\" >> /config/target-branch\necho -n \"$(params.head-sha)\" >> /config/commit-sha\necho -n \"$(params.base-repo)\" >> /config/repository\necho -n \"$(params.commit-timestamp)\" >> /config/commit-timestamp\necho -n \"$(params.pr-url)\" >> /config/pr-url\n\n. \"${ONE_PIPELINE_PATH}/internal/pr_start\"\n"
          },
          {
            "name": "prepare-next-stage",
            "image": "$(params.compliance-baseimage)",
            "volumeMounts": [
              {
                "name": "environment-properties",
                "mountPath": "/config"
              }
            ],
            "env": [
              {
                "name": "STAGE",
                "value": "$(params.next-stage)"
              },
              {
                "name": "STEP_NAME",
                "value": "prepare-next-stage"
              }
            ],
            "script": "#!/bin/bash\n\nif [ -z \"$STAGE\" ]; then\n  exit 0\nfi\n. \"${ONE_PIPELINE_PATH}\"/internal/stage/parse_config\n\necho -n \"${STAGE_IMAGE}\" > \"$(results.image.path)\"\necho -n \"${STAGE_SCRIPT_PATH}\" > \"$(results.script.path)\"\necho -n \"${STAGE_DIND}\" > \"$(results.dind.path)\"\necho -n \"${STAGE_ABORT_ON_FAILURE}\" > \"$(results.abort-on-failure.path)\"\necho -n \"${STAGE_IMAGE_PULL_POLICY}\" > \"$(results.image-pull-policy.path)\"\necho -n \"${STAGE_CONFIGMAP}\" > \"$(results.configmap.path)\"\necho -n \"${STAGE_SECRET}\" > \"$(results.secret.path)\"\n"
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "Task",
      "metadata": {
        "name": "inventory-promotion"
      },
      "spec": {
        "params": [
          {
            "name": "compliance-baseimage",
            "description": "base image to run most of the built-in pipeline code"
          },
          {
            "name": "pipeline-debug",
            "description": "Pipeline debug mode",
            "default": "0"
          },
          {
            "name": "priority",
            "description": "priority of the change request"
          },
          {
            "name": "assignee",
            "description": "functional id or an email who will be assigned to the change request in service now"
          }
        ],
        "workspaces": [
          {
            "name": "artifacts",
            "mountPath": "/artifacts"
          }
        ],
        "volumes": [
          {
            "name": "config",
            "emptyDir": {}
          },
          {
            "name": "environment-properties",
            "configMap": {
              "name": "environment-properties"
            }
          },
          {
            "name": "secure-properties",
            "secret": {
              "secretName": "secure-properties"
            }
          },
          {
            "name": "toolchain",
            "configMap": {
              "name": "toolchain"
            }
          },
          {
            "name": "trigger-payload",
            "configMap": {
              "name": "trigger"
            }
          }
        ],
        "stepTemplate": {
          "volumeMounts": [
            {
              "name": "trigger-payload",
              "mountPath": "/trigger-payload"
            }
          ],
          "env": [
            {
              "name": "ONE_PIPELINE_PATH",
              "value": "/opt/one-pipeline"
            },
            {
              "name": "WORKSPACE",
              "value": "$(workspaces.artifacts.path)"
            },
            {
              "name": "PIPELINE_DEBUG",
              "value": "$(params.pipeline-debug)"
            },
            {
              "name": "TRIGGER_PAYLOAD",
              "valueFrom": {
                "configMapKeyRef": {
                  "name": "trigger",
                  "key": "payload.json"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_ID",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']"
                }
              }
            },
            {
              "name": "BUILD_NUMBER",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/build-number']"
                }
              }
            },
            {
              "name": "PIPELINE_RUN_URL",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/pipeline-run-url']"
                }
              }
            },
            {
              "name": "TRIGGER_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/trigger-name']"
                }
              }
            },
            {
              "name": "TRIGGERED_BY",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.annotations['devops.cloud.ibm.com/triggered-by']"
                }
              }
            },
            {
              "name": "TRIGGER_PAYLOAD_PATH",
              "value": "/trigger-payload/payload.json"
            },
            {
              "name": "TASK_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.labels['tekton.dev/pipelineTask']"
                }
              }
            }
          ]
        },
        "steps": [
          {
            "name": "promote",
            "image": "$(params.compliance-baseimage)",
            "workingDir": "$(workspaces.artifacts.path)",
            "volumeMounts": [
              {
                "name": "config",
                "mountPath": "/config"
              },
              {
                "name": "environment-properties",
                "mountPath": "/config/environment-properties"
              },
              {
                "name": "secure-properties",
                "mountPath": "/config/secure-properties"
              },
              {
                "name": "toolchain",
                "mountPath": "/toolchain"
              }
            ],
            "env": [
              {
                "name": "STEP_NAME",
                "value": "promote"
              }
            ],
            "script": "#!/bin/bash\nPRIORITY=\"$(params.priority)\"\nif [ -n \"$PRIORITY\" ]; then\n  echo -n \"$PRIORITY\" >> /config/priority\nfi\nASSIGNEE=\"$(params.assignee)\"\nif [ -n \"$ASSIGNEE\" ]; then\n  echo -n \"$ASSIGNEE\" >> /config/assignee\nfi\n\n. \"${ONE_PIPELINE_PATH}/internal/promotion\"\n"
          }
        ]
      }
    },
    {
      "apiVersion": "tekton.dev/v1beta1",
      "kind": "Task",
      "metadata": {
        "name": "run-stage"
      },
      "spec": {
        "params": [
          {
            "name": "stage",
            "description": "Stage in the config file"
          },
          {
            "name": "image",
            "description": "Docker image to be used to run the stage script."
          },
          {
            "name": "script",
            "description": "Location of the script that is used to run the stage."
          },
          {
            "name": "dind",
            "description": "Launch Docker-in-Docker sidecar",
            "default": "false"
          },
          {
            "name": "configmap",
            "description": "Name of a `ConfigMap` that's going to be mounted.",
            "default": "not-provided-configmap"
          },
          {
            "name": "secret",
            "description": "Name of a `Secret` that's going to be mounted.",
            "default": "not-provided-secret"
          },
          {
            "name": "abort-on-failure",
            "description": "Whether abort the pipeline in case of a failure or not"
          },
          {
            "name": "image-pull-policy",
            "description": "Set the imagePullPolicy for the Docker image in the runner task",
            "default": "IfNotPresent"
          },
          {
            "name": "workspace-mount-path",
            "default": "/workspace/app"
          },
          {
            "name": "compliance-baseimage",
            "description": "base image to run most of the built-in pipeline code"
          },
          {
            "name": "dind-image",
            "description": "Base image to run sidecars",
            "default": "icr.io/continuous-delivery/toolchains/devsecops/docker:20.10.21-dind@sha256:7abbf564024e76ee5fc2b055b2a0790db660080bf35a7f827739df76c5622044"
          },
          {
            "name": "pipeline-debug",
            "description": "Use debug mode",
            "default": "0"
          },
          {
            "name": "pipeline-name",
            "description": "The name of the running pipeline",
            "default": ""
          },
          {
            "name": "next-stage",
            "default": ""
          },
          {
            "name": "head-branch",
            "description": "source branch of the PR",
            "default": ""
          },
          {
            "name": "head-sha",
            "description": "commit id",
            "default": ""
          },
          {
            "name": "head-repo",
            "description": "the name of the PR's repo source",
            "default": ""
          },
          {
            "name": "base-branch",
            "description": "target branch of the PR",
            "default": ""
          },
          {
            "name": "base-repo",
            "description": "target branch of the PR",
            "default": ""
          },
          {
            "name": "base-repo-name",
            "description": "name of the base repo",
            "default": ""
          },
          {
            "name": "base-repo-owner",
            "description": "owner of the base repo",
            "default": ""
          }
        ],
        "results": [
          {
            "name": "image",
            "description": "Docker image to be used in the specified stage."
          },
          {
            "name": "script",
            "description": "Location of the script that's going to be used to run the specified stage."
          },
          {
            "name": "configmap",
            "description": "Name of the `ConfigMap` that's going to be mounted in `run-stage`"
          },
          {
            "name": "secret",
            "description": "Name of the `Secret` that's going to be mounted in `run-stage`"
          },
          {
            "name": "working-dir",
            "description": "one-pipeline working dir, the location of pipeline-config.yaml"
          },
          {
            "name": "abort-on-failure",
            "description": "Whether abort the pipeline in case of a failure or not"
          },
          {
            "name": "dind",
            "description": "Launch Docker-in-Docker sidecar"
          },
          {
            "name": "image-pull-policy",
            "description": "Set the imagePullPolicy for the Docker image in the runner task"
          }
        ],
        "workspaces": [
          {
            "name": "app",
            "description": "Workspace where the application is checked out.",
            "mountPath": "$(params.workspace-mount-path)"
          }
        ],
        "volumes": [
          {
            "name": "config",
            "emptyDir": {}
          },
          {
            "name": "dind-storage",
            "emptyDir": {}
          },
          {
            "name": "pipeline-scripts",
            "emptyDir": {}
          },
          {
            "name": "commons-library",
            "emptyDir": {}
          },
          {
            "name": "pipelinectl",
            "emptyDir": {}
          },
          {
            "name": "dind-certs",
            "emptyDir": {}
          },
          {
            "name": "environment-properties",
            "configMap": {
              "name": "environment-properties"
            }
          },
          {
            "name": "secure-properties",
            "secret": {
              "secretName": "secure-properties"
            }
          },
          {
            "name": "configmap",
            "configMap": {
              "name": "$(params.configmap)",
              "optional": true
            }
          },
          {
            "name": "secret",
            "secret": {
              "secretName": "$(params.secret)",
              "optional": true
            }
          },
          {
            "name": "toolchain",
            "configMap": {
              "name": "toolchain"
            }
          },
          {
            "name": "trigger-payload",
            "configMap": {
              "name": "trigger"
            }
          }
        ],
        "stepTemplate": {
          "volumeMounts": [
            {
              "name": "trigger-payload",
              "mountPath": "/trigger-payload"
            }
          ],
          "env": [
            {
              "name": "STAGE",
              "value": "$(params.stage)"
            },
            {
              "name": "PIPELINE_DEBUG",
              "value": "$(params.pipeline-debug)"
            },
            {
              "name": "PIPELINE_NAME",
              "value": "$(params.pipeline-name)"
            },
            {
              "name": "WORKSPACE",
              "value": "$(workspaces.app.path)"
            },
            {
              "name": "ONE_PIPELINE_PATH",
              "value": "/opt/one-pipeline"
            },
            {
              "name": "COMMONS_PATH",
              "value": "/opt/commons"
            },
            {
              "name": "DOCKER_HOST",
              "value": "tcp://localhost:2376"
            },
            {
              "name": "DOCKER_TLS_VERIFY",
              "value": "1"
            },
            {
              "name": "DOCKER_CERT_PATH",
              "value": "/certs/client"
            },
            {
              "name": "TRIGGER_PAYLOAD",
              "valueFrom": {
                "configMapKeyRef": {
                  "name": "trigger",
                  "key": "payload.json"
                }
              }
            },
            {
              "name": "TRIGGER_PAYLOAD_PATH",
              "value": "/trigger-payload/payload.json"
            },
            {
              "name": "TASK_NAME",
              "valueFrom": {
                "fieldRef": {
                  "fieldPath": "metadata.labels['tekton.dev/pipelineTask']"
                }
              }
            }
          ]
        },
        "sidecars": [
          {
            "name": "dind",
            "image": "$(params.dind-image)",
            "securityContext": {
              "privileged": true
            },
            "env": [
              {
                "name": "DOCKER_TLS_CERTDIR",
                "value": "/certs"
              },
              {
                "name": "ENABLE_DIND",
                "value": "$(params.dind)"
              }
            ],
            "volumeMounts": [
              {
                "mountPath": "/var/lib/docker",
                "name": "dind-storage"
              },
              {
                "name": "dind-certs",
                "mountPath": "/certs/client"
              },
              {
                "name": "$(workspaces.app.volume)",
                "mountPath": "$(workspaces.app.path)"
              }
            ],
            "script": "if [[ \"$ENABLE_DIND\" == \"true\" ]]; then\n  if [[ $(df -PT /var/lib/docker | awk 'NR==2 {print $2}') == virtiofs ]]; then\n    apk add e2fsprogs\n    truncate -s 50G /tmp/disk.img\n    mkfs.ext4 /tmp/disk.img\n    mount /tmp/disk.img /var/lib/docker\n  fi\n  # Set the MTU to a value that is containable in the ibmcloud calico mtu value\n  # References:\n  # - https://liejuntao001.medium.com/fix-docker-in-docker-network-issue-in-kubernetes-cc18c229d9e5\n  # - https://cloud.ibm.com/docs/containers?topic=containers-kernel#calico-mtu\n  #\n  /usr/local/bin/dockerd-entrypoint.sh --mtu=1400\nelse\n  mkdir -p /certs/client\n  touch /certs/client/ca.pem\nfi\n",
            "readinessProbe": {
              "periodSeconds": 1,
              "exec": {
                "command": [
                  "ls",
                  "/certs/client/ca.pem"
                ]
              }
            }
          }
        ],
        "steps": [
          {
            "name": "prepare",
            "image": "$(params.compliance-baseimage)",
            "volumeMounts": [
              {
                "name": "config",
                "mountPath": "/config"
              },
              {
                "name": "pipeline-scripts",
                "mountPath": "/usr/share/one-pipeline"
              },
              {
                "name": "commons-library",
                "mountPath": "/usr/share/commons"
              },
              {
                "name": "pipelinectl",
                "mountPath": "/usr/share/cocoa"
              },
              {
                "name": "environment-properties",
                "mountPath": "/config/environment-properties"
              },
              {
                "name": "secure-properties",
                "mountPath": "/config/secure-properties"
              },
              {
                "name": "configmap",
                "mountPath": "/config/$(params.configmap)"
              },
              {
                "name": "secret",
                "mountPath": "/config/$(params.secret)"
              },
              {
                "name": "dind-certs",
                "mountPath": "/certs/client"
              }
            ],
            "env": [
              {
                "name": "CUSTOM_CONFIGMAP",
                "value": "$(params.configmap)"
              },
              {
                "name": "CUSTOM_SECRET",
                "value": "$(params.secret)"
              },
              {
                "name": "STEP_NAME",
                "value": "prepare"
              }
            ],
            "script": "#!/usr/bin/env bash\nset_env head-repo \"$(params.head-repo)\"\nset_env head-branch \"$(params.head-branch)\"\nset_env head-sha \"$(params.head-sha)\"\nset_env base-repo \"$(params.base-repo)\"\nset_env base-branch \"$(params.base-branch)\"\nset_env base-repo-owner \"$(params.base-repo-owner)\"\nset_env base-repo-name \"$(params.base-repo-name)\"\n\n. \"${ONE_PIPELINE_PATH}\"/internal/stage/prepare\n"
          },
          {
            "name": "run-stage",
            "image": "$(params.image)",
            "imagePullPolicy": "$(params.image-pull-policy)",
            "workingDir": "$(workspaces.app.path)",
            "onError": "$(params.abort-on-failure)",
            "volumeMounts": [
              {
                "name": "config",
                "mountPath": "/config"
              },
              {
                "name": "pipeline-scripts",
                "mountPath": "/opt/one-pipeline"
              },
              {
                "name": "commons-library",
                "mountPath": "/opt/commons"
              },
              {
                "name": "pipelinectl",
                "mountPath": "/opt/cocoa"
              },
              {
                "name": "environment-properties",
                "mountPath": "/config/environment-properties"
              },
              {
                "name": "secure-properties",
                "mountPath": "/config/secure-properties"
              },
              {
                "name": "configmap",
                "mountPath": "/config/$(params.configmap)"
              },
              {
                "name": "secret",
                "mountPath": "/config/$(params.secret)"
              },
              {
                "name": "toolchain",
                "mountPath": "/toolchain"
              },
              {
                "name": "dind-certs",
                "mountPath": "/certs/client"
              }
            ],
            "env": [
              {
                "name": "STAGE_SCRIPT_PATH",
                "value": "$(params.script)"
              },
              {
                "name": "STAGE_ABORT_ON_FAILURE",
                "value": "$(params.abort-on-failure)"
              },
              {
                "name": "TOOLCHAIN_DATA_PATH",
                "value": "/toolchain/toolchain.json"
              },
              {
                "name": "PIPELINE_RUN_NAME",
                "valueFrom": {
                  "fieldRef": {
                    "fieldPath": "metadata.labels['tekton.dev/pipelineRun']"
                  }
                }
              },
              {
                "name": "PIPELINE_RUN_ID",
                "valueFrom": {
                  "fieldRef": {
                    "fieldPath": "metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']"
                  }
                }
              },
              {
                "name": "PIPELINE_RUN_URL",
                "valueFrom": {
                  "fieldRef": {
                    "fieldPath": "metadata.annotations['devops.cloud.ibm.com/pipeline-run-url']"
                  }
                }
              },
              {
                "name": "BUILD_NUMBER",
                "valueFrom": {
                  "fieldRef": {
                    "fieldPath": "metadata.annotations['devops.cloud.ibm.com/build-number']"
                  }
                }
              },
              {
                "name": "PIPELINE_ID",
                "valueFrom": {
                  "fieldRef": {
                    "fieldPath": "metadata.annotations['devops.cloud.ibm.com/pipeline-id']"
                  }
                }
              },
              {
                "name": "TRIGGER_TYPE",
                "valueFrom": {
                  "fieldRef": {
                    "fieldPath": "metadata.annotations['devops.cloud.ibm.com/trigger-type']"
                  }
                }
              },
              {
                "name": "TRIGGER_NAME",
                "valueFrom": {
                  "fieldRef": {
                    "fieldPath": "metadata.annotations['devops.cloud.ibm.com/trigger-name']"
                  }
                }
              },
              {
                "name": "TRIGGERED_BY",
                "valueFrom": {
                  "fieldRef": {
                    "fieldPath": "metadata.annotations['devops.cloud.ibm.com/triggered-by']"
                  }
                }
              },
              {
                "name": "STEP_NAME",
                "value": "run-stage"
              }
            ],
            "script": "#!/bin/sh\n. \"${ONE_PIPELINE_PATH}\"/internal/stage/run\n"
          },
          {
            "name": "prepare-next-stage",
            "image": "$(params.compliance-baseimage)",
            "volumeMounts": [
              {
                "name": "environment-properties",
                "mountPath": "/config"
              }
            ],
            "env": [
              {
                "name": "STAGE",
                "value": "$(params.next-stage)"
              },
              {
                "name": "STEP_NAME",
                "value": "prepare-next-stage"
              }
            ],
            "script": "#!/bin/bash\n\nif [ -z \"$STAGE\" ]; then\n  exit 0\nfi\n. \"${ONE_PIPELINE_PATH}\"/internal/stage/parse_config\n\necho -n \"${STAGE_IMAGE}\" > \"$(results.image.path)\"\necho -n \"${STAGE_SCRIPT_PATH}\" > \"$(results.script.path)\"\necho -n \"${STAGE_DIND}\" > \"$(results.dind.path)\"\necho -n \"${STAGE_ABORT_ON_FAILURE}\" > \"$(results.abort-on-failure.path)\"\necho -n \"${STAGE_IMAGE_PULL_POLICY}\" > \"$(results.image-pull-policy.path)\"\necho -n \"${STAGE_CONFIGMAP}\" > \"$(results.configmap.path)\"\necho -n \"${STAGE_SECRET}\" > \"$(results.secret.path)\"\n"
          }
        ]
      }
    },
    {
      "apiVersion": "v1",
      "kind": "Secret",
      "data": {
        ".dockerconfigjson": "eyJhdXRocyI6e319"
      },
      "metadata": {
        "name": "artifactory-pull-secret"
      },
      "type": "kubernetes.io/dockerconfigjson"
    },
    {
      "apiVersion": "v1",
      "kind": "Secret",
      "data": {
        ".dockerconfigjson": "eyJhdXRocyI6e319"
      },
      "metadata": {
        "name": "onepipeline-pull-secret"
      },
      "type": "kubernetes.io/dockerconfigjson"
    },
    {
      "apiVersion": "v1",
      "kind": "Secret",
      "data": {
        ".dockerconfigjson": "eyJhdXRocyI6e319"
      },
      "metadata": {
        "name": "one-pipeline-pull-secret"
      },
      "type": "kubernetes.io/dockerconfigjson"
    },
    {
      "apiVersion": "v1",
      "kind": "Secret",
      "data": {
        ".dockerconfigjson": "eyJhdXRocyI6e319"
      },
      "metadata": {
        "name": "pipeline-pull-secret"
      },
      "type": "kubernetes.io/dockerconfigjson"
    },
    {
      "apiVersion": "v1",
      "kind": "ConfigMap",
      "metadata": {
        "name": "trigger",
        "labels": {
          "app.kubernetes.io/version": "1.0.0"
        }
      },
      "data": {
        "payload.json": "{\"triggered_at\":\"2023-02-22_05:21:03\",\"stage\":\"owasp-zap\",\"pipelinectl\":[{\"name\":\"cocoa.repo.app-repo\",\"props\":[{\"key\":\"branch\",\"value\":\"bWFzdGVy\"},{\"key\":\"buildnumber\",\"value\":\"MzM=\"},{\"key\":\"commit\",\"value\":\"YjhlMzZmY2M4YTA4NzI1NDVjNzJiNTU2NGExMmQyZjc0OGVlOTVlMQ==\"},{\"key\":\"path\",\"value\":\"aGVsbG8tY29tcGxpYW5jZS1hcHAtMjAyMzAyMTdfMw==\"},{\"key\":\"url\",\"value\":\"aHR0cHM6Ly9naXRodWIuY29tL2t0YXRhdmFydGhpL2hlbGxvLWNvbXBsaWFuY2UtYXBwLTIwMjMwMjE3XzM=\"}]},{\"name\":\"cocoa.artifact.app-image\",\"props\":[{\"key\":\"digest\",\"value\":\"c2hhMjU2OjM1YmFkYTVjNDZlY2M1YjQwOTMwM2M1MTNjYWMxMDYxM2U4NmJlNjVmZjU1NDdjMDMxNjNhMjEyMmQ2MmEwNzk=\"},{\"key\":\"name\",\"value\":\"dXMuaWNyLmlvL2NvY29hLWRldmVsb3BtZW50L2hlbGxvLWNvbXBsaWFuY2UtYXBwLTIwMjMwMjE3XzM6MjAyMzAyMjIwNDUxNDItbWFzdGVyLWI4ZTM2ZmNjOGEwODcyNTQ1YzcyYjU1NjRhMTJkMmY3NDhlZTk1ZTE=\"},{\"key\":\"signature\",\"value\":\"\"},{\"key\":\"source\",\"value\":\"aHR0cHM6Ly9naXRodWIuY29tL2t0YXRhdmFydGhpL2hlbGxvLWNvbXBsaWFuY2UtYXBwLTIwMjMwMjE3XzMuZ2l0I2I4ZTM2ZmNjOGEwODcyNTQ1YzcyYjU1NjRhMTJkMmY3NDhlZTk1ZTE=\"},{\"key\":\"tags\",\"value\":\"MjAyMzAyMjIwNDUxNDItbWFzdGVyLWI4ZTM2ZmNjOGEwODcyNTQ1YzcyYjU1NjRhMTJkMmY3NDhlZTk1ZTE=\"},{\"key\":\"type\",\"value\":\"aW1hZ2U=\"}]},{\"name\":\"cocoa.string.ONE_PIPELINE_CONFIG_COMMIT\",\"props\":[{\"key\":\"value\",\"value\":\"YjhlMzZmY2M4YTA4NzI1NDVjNzJiNTU2NGExMmQyZjc0OGVlOTVlMQ==\"}]},{\"name\":\"cocoa.string.ONE_PIPELINE_CONFIG_PATH\",\"props\":[{\"key\":\"value\",\"value\":\"LnBpcGVsaW5lLWNvbmZpZy55YW1s\"}]},{\"name\":\"cocoa.string.ONE_PIPELINE_REPO\",\"props\":[{\"key\":\"value\",\"value\":\"aHR0cHM6Ly9naXRodWIuY29tL2t0YXRhdmFydGhpL2hlbGxvLWNvbXBsaWFuY2UtYXBwLTIwMjMwMjE3XzM=\"}]},{\"name\":\"cocoa.string.app-url\",\"props\":[{\"key\":\"value\",\"value\":\"aHR0cDovL2hlbGxvLWFwcC1kZWZhdWx0LmNvY29hLWRldi00NDgyNDgtMDYzNTJhZDc1YzdlOTM1MGY3MjRiM2FmNDYwYWY4MTItMDAwMC51cy1zb3V0aC5jb250YWluZXJzLmFwcGRvbWFpbi5jbG91ZA==\"}]},{\"name\":\"cocoa.string.opt-in-dynamic-api-scan\",\"props\":[{\"key\":\"value\",\"value\":\"MQ==\"}]},{\"name\":\"cocoa.string.opt-in-dynamic-ui-scan\",\"props\":[{\"key\":\"value\",\"value\":\"MQ==\"}]},{\"name\":\"cocoa.string.parent_pipeline_url\",\"props\":[{\"key\":\"value\",\"value\":\"aHR0cHM6Ly9jbG91ZC5pYm0uY29tL2Rldm9wcy9waXBlbGluZXMvdGVrdG9uLzVkZmMwNTZmLWQ4ZTQtNDE1MS1hMGE5LTUxOWJlZDQ0MmE4ZC9ydW5zLzBkMGVjMGYwLTVmODctNGFjNi04YzRmLTkxMzMxOTU3YmFkND9lbnZfaWQ9aWJtOnlwOnVzLXNvdXRo\"}]},{\"name\":\"cocoa.string.pipeline-debug\",\"props\":[{\"key\":\"value\",\"value\":\"MQ==\"}]},{\"name\":\"cocoa.string.pipeline-name\",\"props\":[{\"key\":\"value\",\"value\":\"Y2ktcGlwZWxpbmU=\"}]},{\"name\":\"cocoa.string.pipeline_namespace\",\"props\":[{\"key\":\"value\",\"value\":\"Y2k=\"}]},{\"name\":\"cocoa.string.root_pipeline_run_id\",\"props\":[{\"key\":\"value\",\"value\":\"MGQwZWMwZjAtNWY4Ny00YWM2LThjNGYtOTEzMzE5NTdiYWQ0\"}]},{\"name\":\"cocoa.string.target-application-server-url\",\"props\":[{\"key\":\"value\",\"value\":\"aHR0cDovL2hlbGxvLWFwcC1kZWZhdWx0LmNvY29hLWRldi00NDgyNDgtMDYzNTJhZDc1YzdlOTM1MGY3MjRiM2FmNDYwYWY4MTItMDAwMC51cy1zb3V0aC5jb250YWluZXJzLmFwcGRvbWFpbi5jbG91ZA==\"}]},{\"name\":\"cocoa.string.use-v2-log-collector\",\"props\":[{\"key\":\"value\",\"value\":\"MQ==\"}]}]}"
      }
    },
    {
      "kind": "PipelineRun",
      "apiVersion": "tekton.dev/v1beta1",
      "metadata": {
        "name": "stage-owasp-zap",
        "namespace": "pw-2cea1a71-0232-4b00-8db4-bf22e02644d6",
        "uid": "c3a55f48-f0ec-4236-8bfa-e9f1e6654f9b",
        "resourceVersion": "449857377",
        "generation": 1,
        "creationTimestamp": "2023-02-22T05:21:13Z",
        "labels": {
          "app": "workeragent",
          "tekton.dev/pipeline": "async-stage-pipeline"
        },
        "annotations": {
          "devops.cloud.ibm.com/build-number": "34",
          "devops.cloud.ibm.com/listener": "async-stage-listener",
          "devops.cloud.ibm.com/owned-by": "kalyan_prasad@in.ibm.com",
          "devops.cloud.ibm.com/pipeline-id": "5dfc056f-d8e4-4151-a0a9-519bed442a8d",
          "devops.cloud.ibm.com/pipeline-run-url": "https://cloud.ibm.com/devops/pipelines/tekton/5dfc056f-d8e4-4151-a0a9-519bed442a8d/runs/2cea1a71-0232-4b00-8db4-bf22e02644d6?env_id=ibm:yp:us-south",
          "devops.cloud.ibm.com/tekton-pipeline": "2cea1a71-0232-4b00-8db4-bf22e02644d6",
          "devops.cloud.ibm.com/trigger-name": "Subpipeline Webhook Trigger",
          "devops.cloud.ibm.com/trigger-type": "generic",
          "devops.cloud.ibm.com/triggered-by": "",
          "devops.cloud.ibm.com/worker-instance": "91bceb74-8060-488f-95f9-64688fff6c06"
        }
      },
      "spec": {
        "pipelineRef": {
          "name": "async-stage-pipeline"
        },
        "params": [
          {
            "name": "stage",
            "value": "owasp-zap"
          },
          {
            "name": "pipeline-debug",
            "value": "1"
          },
          {
            "name": "compliance-baseimage",
            "value": "docker-eu-public.artifactory.swg-devops.com/wcp-cd-noncontainerised-team-cd-non-container-base-docker-local/kalyan:kalyan-test-git-1@sha256:f9c5045ebc6afa517c3a63a8518ef2a8ecca8a009b8eff83c812d0f7f66989c1"
          },
          {
            "name": "dind-image",
            "value": "icr.io/continuous-delivery/toolchains/devsecops/docker:20.10.21-dind@sha256:7abbf564024e76ee5fc2b055b2a0790db660080bf35a7f827739df76c5622044"
          }
        ],
        "serviceAccountName": "default",
        "timeout": "6h0m0s",
        "podTemplate": {
          "affinity": {
            "nodeAffinity": {
              "requiredDuringSchedulingIgnoredDuringExecution": {
                "nodeSelectorTerms": [
                  {
                    "matchExpressions": [
                      {
                        "key": "kubernetes.io/hostname",
                        "operator": "In",
                        "values": [
                          "10.37.91.8"
                        ]
                      }
                    ]
                  }
                ]
              }
            }
          },
          "runtimeClassName": "kata",
          "imagePullSecrets": [
            {
              "name": "artifactory-pull-secret"
            },
            {
              "name": "onepipeline-pull-secret"
            },
            {
              "name": "one-pipeline-pull-secret"
            },
            {
              "name": "pipeline-pull-secret"
            }
          ]
        },
        "workspaces": [
          {
            "name": "artifacts",
            "volumeClaimTemplate": {
              "metadata": {
                "creationTimestamp": null
              },
              "spec": {
                "accessModes": [
                  "ReadWriteOnce"
                ],
                "resources": {
                  "requests": {
                    "storage": "5Gi"
                  }
                },
                "volumeName": "pw-2cea1a71-0232-4b00-8db4-bf22e02644d6-pv",
                "storageClassName": "tekton-local-storage",
                "volumeMode": "Filesystem"
              },
              "status": {}
            }
          }
        ]
      },
      "status": {
        "conditions": [
          {
            "type": "Succeeded",
            "status": "Unknown",
            "lastTransitionTime": "2023-02-22T05:32:43Z",
            "reason": "Running",
            "message": "Tasks Completed: 2 (Failed: 0, Cancelled 0), Incomplete: 1, Skipped: 0"
          }
        ],
        "startTime": "2023-02-22T05:21:13Z",
        "taskRuns": {
          "stage-owasp-zap-finish": {
            "pipelineTaskName": "finish",
            "status": {
              "conditions": [
                {
                  "type": "Succeeded",
                  "status": "Unknown",
                  "lastTransitionTime": "2023-02-22T05:33:00Z",
                  "reason": "Running",
                  "message": "Not all Steps in the Task have finished executing"
                }
              ],
              "podName": "stage-owasp-zap-finish-pod",
              "startTime": "2023-02-22T05:32:43Z",
              "steps": [
                {
                  "running": {
                    "startedAt": "2023-02-22T05:33:00Z"
                  },
                  "name": "finish",
                  "container": "step-finish",
                  "imageID": "docker-eu-public.artifactory.swg-devops.com/wcp-cd-noncontainerised-team-cd-non-container-base-docker-local/kalyan@sha256:f9c5045ebc6afa517c3a63a8518ef2a8ecca8a009b8eff83c812d0f7f66989c1"
                }
              ]
            }
          },
          "stage-owasp-zap-run": {
            "pipelineTaskName": "run",
            "status": {
              "conditions": [
                {
                  "type": "Succeeded",
                  "status": "True",
                  "lastTransitionTime": "2023-02-22T05:32:43Z",
                  "reason": "Succeeded",
                  "message": "All Steps have completed executing"
                }
              ],
              "podName": "stage-owasp-zap-run-pod",
              "startTime": "2023-02-22T05:22:08Z",
              "completionTime": "2023-02-22T05:32:43Z",
              "steps": [
                {
                  "terminated": {
                    "exitCode": 0,
                    "reason": "Completed",
                    "startedAt": "2023-02-22T05:22:23Z",
                    "finishedAt": "2023-02-22T05:22:31Z",
                    "containerID": "containerd://de96564dab91fc103018b6b3f51438871a37cb014664f7f61d4ab5590d3fb866"
                  },
                  "name": "prepare",
                  "container": "step-prepare",
                  "imageID": "docker-eu-public.artifactory.swg-devops.com/wcp-cd-noncontainerised-team-cd-non-container-base-docker-local/kalyan@sha256:f9c5045ebc6afa517c3a63a8518ef2a8ecca8a009b8eff83c812d0f7f66989c1"
                },
                {
                  "terminated": {
                    "exitCode": 0,
                    "reason": "Completed",
                    "startedAt": "2023-02-22T05:22:32Z",
                    "finishedAt": "2023-02-22T05:32:39Z",
                    "containerID": "containerd://427178d5c81eacfcbda26f25ac8e4d85322f1e2f09faf84bd222ff9a7940a1ab"
                  },
                  "name": "run-stage",
                  "container": "step-run-stage",
                  "imageID": "icr.io/continuous-delivery/pipeline/pipeline-base-ubi@sha256:0444aa3cc5032ba4d7f7a59a4177dd43dc1126ad902f09079b0a66156bbe4bcf"
                },
                {
                  "terminated": {
                    "exitCode": 0,
                    "reason": "Completed",
                    "message": "[{\"key\":\"abort-on-failure\",\"value\":\"stopAndFail\",\"type\":1},{\"key\":\"configmap\",\"value\":\"not-provided-configmap\",\"type\":1},{\"key\":\"dind\",\"value\":\"true\",\"type\":1},{\"key\":\"image\",\"value\":\"icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.7@sha256:0444aa3cc5032ba4d7f7a59a4177dd43dc1126ad902f09079b0a66156bbe4bcf\",\"type\":1},{\"key\":\"image-pull-policy\",\"value\":\"IfNotPresent\",\"type\":1},{\"key\":\"script\",\"value\":\"stage-owasp-zap-JwiE\",\"type\":1},{\"key\":\"secret\",\"value\":\"not-provided-secret\",\"type\":1}]",
                    "startedAt": "2023-02-22T05:32:39Z",
                    "finishedAt": "2023-02-22T05:32:42Z",
                    "containerID": "containerd://626b50fcf776237929688e493f4b42d7dd0b979d2b1dda21966ea8012badb77b"
                  },
                  "name": "prepare-next-stage",
                  "container": "step-prepare-next-stage",
                  "imageID": "docker-eu-public.artifactory.swg-devops.com/wcp-cd-noncontainerised-team-cd-non-container-base-docker-local/kalyan@sha256:f9c5045ebc6afa517c3a63a8518ef2a8ecca8a009b8eff83c812d0f7f66989c1"
                }
              ],
              "taskResults": [
                {
                  "name": "abort-on-failure",
                  "type": "string",
                  "value": "stopAndFail"
                },
                {
                  "name": "configmap",
                  "type": "string",
                  "value": "not-provided-configmap"
                },
                {
                  "name": "dind",
                  "type": "string",
                  "value": "true"
                },
                {
                  "name": "image",
                  "type": "string",
                  "value": "icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.7@sha256:0444aa3cc5032ba4d7f7a59a4177dd43dc1126ad902f09079b0a66156bbe4bcf"
                },
                {
                  "name": "image-pull-policy",
                  "type": "string",
                  "value": "IfNotPresent"
                },
                {
                  "name": "script",
                  "type": "string",
                  "value": "stage-owasp-zap-JwiE"
                },
                {
                  "name": "secret",
                  "type": "string",
                  "value": "not-provided-secret"
                }
              ],
              "sidecars": [
                {
                  "terminated": {
                    "exitCode": 9,
                    "reason": "Completed",
                    "message": "Sidecar container successfully stopped by nop image",
                    "startedAt": "2023-02-22T05:22:17Z",
                    "finishedAt": "2023-02-22T05:32:45Z",
                    "containerID": "containerd://0d3f1dd426f43d83fce6a6ef9369867151648594b2897dfc4e0e4a1bcfe20cdc"
                  },
                  "name": "dind",
                  "container": "sidecar-dind",
                  "imageID": "icr.io/continuous-delivery/pipeline/tekton/nop@sha256:8b593b48449fa4d980893352c58100823386fb803f70ff2f5ab4b2961901b2c2"
                }
              ]
            }
          },
          "stage-owasp-zap-setup": {
            "pipelineTaskName": "setup",
            "status": {
              "conditions": [
                {
                  "type": "Succeeded",
                  "status": "True",
                  "lastTransitionTime": "2023-02-22T05:22:08Z",
                  "reason": "Succeeded",
                  "message": "All Steps have completed executing"
                }
              ],
              "podName": "stage-owasp-zap-setup-pod",
              "startTime": "2023-02-22T05:21:14Z",
              "completionTime": "2023-02-22T05:22:08Z",
              "steps": [
                {
                  "terminated": {
                    "exitCode": 0,
                    "reason": "Completed",
                    "message": "[{\"key\":\"abort-on-failure\",\"value\":\"stopAndFail\",\"type\":1},{\"key\":\"configmap\",\"value\":\"not-provided-configmap\",\"type\":1},{\"key\":\"dind\",\"value\":\"true\",\"type\":1},{\"key\":\"image\",\"value\":\"icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.7@sha256:0444aa3cc5032ba4d7f7a59a4177dd43dc1126ad902f09079b0a66156bbe4bcf\",\"type\":1},{\"key\":\"image-pull-policy\",\"value\":\"IfNotPresent\",\"type\":1},{\"key\":\"script\",\"value\":\"stage-owasp-zap-WDw8\",\"type\":1},{\"key\":\"secret\",\"value\":\"not-provided-secret\",\"type\":1}]",
                    "startedAt": "2023-02-22T05:21:26Z",
                    "finishedAt": "2023-02-22T05:22:08Z",
                    "containerID": "containerd://a5890b1bd2a45ef82a0c26a85c1e1f465dadcd7ee5e071da753903344dfcdce2"
                  },
                  "name": "setup",
                  "container": "step-setup",
                  "imageID": "docker-eu-public.artifactory.swg-devops.com/wcp-cd-noncontainerised-team-cd-non-container-base-docker-local/kalyan@sha256:f9c5045ebc6afa517c3a63a8518ef2a8ecca8a009b8eff83c812d0f7f66989c1"
                }
              ],
              "taskResults": [
                {
                  "name": "abort-on-failure",
                  "type": "string",
                  "value": "stopAndFail"
                },
                {
                  "name": "configmap",
                  "type": "string",
                  "value": "not-provided-configmap"
                },
                {
                  "name": "dind",
                  "type": "string",
                  "value": "true"
                },
                {
                  "name": "image",
                  "type": "string",
                  "value": "icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.7@sha256:0444aa3cc5032ba4d7f7a59a4177dd43dc1126ad902f09079b0a66156bbe4bcf"
                },
                {
                  "name": "image-pull-policy",
                  "type": "string",
                  "value": "IfNotPresent"
                },
                {
                  "name": "script",
                  "type": "string",
                  "value": "stage-owasp-zap-WDw8"
                },
                {
                  "name": "secret",
                  "type": "string",
                  "value": "not-provided-secret"
                }
              ]
            }
          }
        }
      }
    },
    {
      "kind": "TaskRun",
      "apiVersion": "tekton.dev/v1beta1",
      "metadata": {
        "name": "stage-owasp-zap-run",
        "namespace": "pw-2cea1a71-0232-4b00-8db4-bf22e02644d6",
        "uid": "07917ac9-5175-43df-97dd-aef3b6f7d160",
        "resourceVersion": "449856883",
        "generation": 1,
        "creationTimestamp": "2023-02-22T05:22:08Z",
        "labels": {
          "app": "workeragent",
          "app.kubernetes.io/managed-by": "tekton-pipelines",
          "tekton.dev/memberOf": "tasks",
          "tekton.dev/pipeline": "async-stage-pipeline",
          "tekton.dev/pipelineRun": "stage-owasp-zap",
          "tekton.dev/pipelineTask": "run",
          "tekton.dev/task": "run-stage"
        },
        "annotations": {
          "devops.cloud.ibm.com/build-number": "34",
          "devops.cloud.ibm.com/listener": "async-stage-listener",
          "devops.cloud.ibm.com/operatorName": "private-worker-agent-6d9db8f4d6-h2t44",
          "devops.cloud.ibm.com/owned-by": "kalyan_prasad@in.ibm.com",
          "devops.cloud.ibm.com/pipeline-id": "5dfc056f-d8e4-4151-a0a9-519bed442a8d",
          "devops.cloud.ibm.com/pipeline-run-url": "https://cloud.ibm.com/devops/pipelines/tekton/5dfc056f-d8e4-4151-a0a9-519bed442a8d/runs/2cea1a71-0232-4b00-8db4-bf22e02644d6?env_id=ibm:yp:us-south",
          "devops.cloud.ibm.com/tekton-pipeline": "2cea1a71-0232-4b00-8db4-bf22e02644d6",
          "devops.cloud.ibm.com/trigger-name": "Subpipeline Webhook Trigger",
          "devops.cloud.ibm.com/trigger-type": "generic",
          "devops.cloud.ibm.com/triggered-by": "",
          "devops.cloud.ibm.com/worker-instance": "91bceb74-8060-488f-95f9-64688fff6c06",
          "pipeline.tekton.dev/affinity-assistant": "affinity-assistant-5253723647",
          "pipeline.tekton.dev/release": "a34ad6b-dirty"
        },
        "ownerReferences": [
          {
            "apiVersion": "tekton.dev/v1beta1",
            "kind": "PipelineRun",
            "name": "stage-owasp-zap",
            "uid": "c3a55f48-f0ec-4236-8bfa-e9f1e6654f9b",
            "controller": true,
            "blockOwnerDeletion": true
          }
        ]
      },
      "spec": {
        "params": [
          {
            "name": "stage",
            "value": "owasp-zap"
          },
          {
            "name": "image",
            "value": "icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.7@sha256:0444aa3cc5032ba4d7f7a59a4177dd43dc1126ad902f09079b0a66156bbe4bcf"
          },
          {
            "name": "script",
            "value": "stage-owasp-zap-WDw8"
          },
          {
            "name": "configmap",
            "value": "not-provided-configmap"
          },
          {
            "name": "secret",
            "value": "not-provided-secret"
          },
          {
            "name": "abort-on-failure",
            "value": "stopAndFail"
          },
          {
            "name": "dind",
            "value": "true"
          },
          {
            "name": "image-pull-policy",
            "value": "IfNotPresent"
          },
          {
            "name": "compliance-baseimage",
            "value": "docker-eu-public.artifactory.swg-devops.com/wcp-cd-noncontainerised-team-cd-non-container-base-docker-local/kalyan:kalyan-test-git-1@sha256:f9c5045ebc6afa517c3a63a8518ef2a8ecca8a009b8eff83c812d0f7f66989c1"
          },
          {
            "name": "dind-image",
            "value": "icr.io/continuous-delivery/toolchains/devsecops/docker:20.10.21-dind@sha256:7abbf564024e76ee5fc2b055b2a0790db660080bf35a7f827739df76c5622044"
          },
          {
            "name": "pipeline-debug",
            "value": "1"
          }
        ],
        "resources": {},
        "serviceAccountName": "default",
        "taskRef": {
          "name": "run-stage",
          "kind": "Task"
        },
        "timeout": "5h59m4.258703078s",
        "podTemplate": {
          "affinity": {
            "nodeAffinity": {
              "requiredDuringSchedulingIgnoredDuringExecution": {
                "nodeSelectorTerms": [
                  {
                    "matchExpressions": [
                      {
                        "key": "kubernetes.io/hostname",
                        "operator": "In",
                        "values": [
                          "10.37.91.8"
                        ]
                      }
                    ]
                  }
                ]
              }
            }
          },
          "runtimeClassName": "kata",
          "imagePullSecrets": [
            {
              "name": "artifactory-pull-secret"
            },
            {
              "name": "onepipeline-pull-secret"
            },
            {
              "name": "one-pipeline-pull-secret"
            },
            {
              "name": "pipeline-pull-secret"
            }
          ]
        },
        "workspaces": [
          {
            "name": "app",
            "persistentVolumeClaim": {
              "claimName": "pvc-fc033e2586"
            }
          }
        ]
      },
      "status": {
        "conditions": [
          {
            "type": "Succeeded",
            "status": "True",
            "lastTransitionTime": "2023-02-22T05:32:43Z",
            "reason": "Succeeded",
            "message": "All Steps have completed executing"
          }
        ],
        "podName": "stage-owasp-zap-run-pod",
        "startTime": "2023-02-22T05:22:08Z",
        "completionTime": "2023-02-22T05:32:43Z",
        "steps": [
          {
            "terminated": {
              "exitCode": 0,
              "reason": "Completed",
              "startedAt": "2023-02-22T05:22:23Z",
              "finishedAt": "2023-02-22T05:22:31Z",
              "containerID": "containerd://de96564dab91fc103018b6b3f51438871a37cb014664f7f61d4ab5590d3fb866"
            },
            "name": "prepare",
            "container": "step-prepare",
            "imageID": "docker-eu-public.artifactory.swg-devops.com/wcp-cd-noncontainerised-team-cd-non-container-base-docker-local/kalyan@sha256:f9c5045ebc6afa517c3a63a8518ef2a8ecca8a009b8eff83c812d0f7f66989c1"
          },
          {
            "terminated": {
              "exitCode": 0,
              "reason": "Completed",
              "startedAt": "2023-02-22T05:22:32Z",
              "finishedAt": "2023-02-22T05:32:39Z",
              "containerID": "containerd://427178d5c81eacfcbda26f25ac8e4d85322f1e2f09faf84bd222ff9a7940a1ab"
            },
            "name": "run-stage",
            "container": "step-run-stage",
            "imageID": "icr.io/continuous-delivery/pipeline/pipeline-base-ubi@sha256:0444aa3cc5032ba4d7f7a59a4177dd43dc1126ad902f09079b0a66156bbe4bcf"
          },
          {
            "terminated": {
              "exitCode": 0,
              "reason": "Completed",
              "message": "[{\"key\":\"abort-on-failure\",\"value\":\"stopAndFail\",\"type\":1},{\"key\":\"configmap\",\"value\":\"not-provided-configmap\",\"type\":1},{\"key\":\"dind\",\"value\":\"true\",\"type\":1},{\"key\":\"image\",\"value\":\"icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.7@sha256:0444aa3cc5032ba4d7f7a59a4177dd43dc1126ad902f09079b0a66156bbe4bcf\",\"type\":1},{\"key\":\"image-pull-policy\",\"value\":\"IfNotPresent\",\"type\":1},{\"key\":\"script\",\"value\":\"stage-owasp-zap-JwiE\",\"type\":1},{\"key\":\"secret\",\"value\":\"not-provided-secret\",\"type\":1}]",
              "startedAt": "2023-02-22T05:32:39Z",
              "finishedAt": "2023-02-22T05:32:42Z",
              "containerID": "containerd://626b50fcf776237929688e493f4b42d7dd0b979d2b1dda21966ea8012badb77b"
            },
            "name": "prepare-next-stage",
            "container": "step-prepare-next-stage",
            "imageID": "docker-eu-public.artifactory.swg-devops.com/wcp-cd-noncontainerised-team-cd-non-container-base-docker-local/kalyan@sha256:f9c5045ebc6afa517c3a63a8518ef2a8ecca8a009b8eff83c812d0f7f66989c1"
          }
        ],
        "taskResults": [
          {
            "name": "abort-on-failure",
            "type": "string",
            "value": "stopAndFail"
          },
          {
            "name": "configmap",
            "type": "string",
            "value": "not-provided-configmap"
          },
          {
            "name": "dind",
            "type": "string",
            "value": "true"
          },
          {
            "name": "image",
            "type": "string",
            "value": "icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.7@sha256:0444aa3cc5032ba4d7f7a59a4177dd43dc1126ad902f09079b0a66156bbe4bcf"
          },
          {
            "name": "image-pull-policy",
            "type": "string",
            "value": "IfNotPresent"
          },
          {
            "name": "script",
            "type": "string",
            "value": "stage-owasp-zap-JwiE"
          },
          {
            "name": "secret",
            "type": "string",
            "value": "not-provided-secret"
          }
        ],
        "sidecars": [
          {
            "terminated": {
              "exitCode": 9,
              "reason": "Completed",
              "message": "Sidecar container successfully stopped by nop image",
              "startedAt": "2023-02-22T05:22:17Z",
              "finishedAt": "2023-02-22T05:32:45Z",
              "containerID": "containerd://0d3f1dd426f43d83fce6a6ef9369867151648594b2897dfc4e0e4a1bcfe20cdc"
            },
            "name": "dind",
            "container": "sidecar-dind",
            "imageID": "icr.io/continuous-delivery/pipeline/tekton/nop@sha256:8b593b48449fa4d980893352c58100823386fb803f70ff2f5ab4b2961901b2c2"
          }
        ]
      }
    },
    {
      "kind": "TaskRun",
      "apiVersion": "tekton.dev/v1beta1",
      "metadata": {
        "name": "stage-owasp-zap-finish",
        "namespace": "pw-2cea1a71-0232-4b00-8db4-bf22e02644d6",
        "uid": "688da473-c025-43a7-ae26-a4f5162fc81a",
        "resourceVersion": "449857372",
        "generation": 1,
        "creationTimestamp": "2023-02-22T05:32:43Z",
        "labels": {
          "app": "workeragent",
          "app.kubernetes.io/managed-by": "tekton-pipelines",
          "tekton.dev/memberOf": "tasks",
          "tekton.dev/pipeline": "async-stage-pipeline",
          "tekton.dev/pipelineRun": "stage-owasp-zap",
          "tekton.dev/pipelineTask": "finish",
          "tekton.dev/task": "async-stage-finish"
        },
        "annotations": {
          "devops.cloud.ibm.com/build-number": "34",
          "devops.cloud.ibm.com/listener": "async-stage-listener",
          "devops.cloud.ibm.com/operatorName": "private-worker-agent-6d9db8f4d6-h2t44",
          "devops.cloud.ibm.com/owned-by": "kalyan_prasad@in.ibm.com",
          "devops.cloud.ibm.com/pipeline-id": "5dfc056f-d8e4-4151-a0a9-519bed442a8d",
          "devops.cloud.ibm.com/pipeline-run-url": "https://cloud.ibm.com/devops/pipelines/tekton/5dfc056f-d8e4-4151-a0a9-519bed442a8d/runs/2cea1a71-0232-4b00-8db4-bf22e02644d6?env_id=ibm:yp:us-south",
          "devops.cloud.ibm.com/tekton-pipeline": "2cea1a71-0232-4b00-8db4-bf22e02644d6",
          "devops.cloud.ibm.com/trigger-name": "Subpipeline Webhook Trigger",
          "devops.cloud.ibm.com/trigger-type": "generic",
          "devops.cloud.ibm.com/triggered-by": "",
          "devops.cloud.ibm.com/worker-instance": "91bceb74-8060-488f-95f9-64688fff6c06",
          "pipeline.tekton.dev/affinity-assistant": "affinity-assistant-5253723647",
          "pipeline.tekton.dev/release": "a34ad6b-dirty"
        },
        "ownerReferences": [
          {
            "apiVersion": "tekton.dev/v1beta1",
            "kind": "PipelineRun",
            "name": "stage-owasp-zap",
            "uid": "c3a55f48-f0ec-4236-8bfa-e9f1e6654f9b",
            "controller": true,
            "blockOwnerDeletion": true
          }
        ]
      },
      "spec": {
        "params": [
          {
            "name": "compliance-baseimage",
            "value": "docker-eu-public.artifactory.swg-devops.com/wcp-cd-noncontainerised-team-cd-non-container-base-docker-local/kalyan:kalyan-test-git-1@sha256:f9c5045ebc6afa517c3a63a8518ef2a8ecca8a009b8eff83c812d0f7f66989c1"
          },
          {
            "name": "pipeline-debug",
            "value": "1"
          }
        ],
        "resources": {},
        "serviceAccountName": "default",
        "taskRef": {
          "name": "async-stage-finish",
          "kind": "Task"
        },
        "timeout": "5h48m29.210860369s",
        "podTemplate": {
          "affinity": {
            "nodeAffinity": {
              "requiredDuringSchedulingIgnoredDuringExecution": {
                "nodeSelectorTerms": [
                  {
                    "matchExpressions": [
                      {
                        "key": "kubernetes.io/hostname",
                        "operator": "In",
                        "values": [
                          "10.37.91.8"
                        ]
                      }
                    ]
                  }
                ]
              }
            }
          },
          "runtimeClassName": "kata",
          "imagePullSecrets": [
            {
              "name": "artifactory-pull-secret"
            },
            {
              "name": "onepipeline-pull-secret"
            },
            {
              "name": "one-pipeline-pull-secret"
            },
            {
              "name": "pipeline-pull-secret"
            }
          ]
        },
        "workspaces": [
          {
            "name": "artifacts",
            "persistentVolumeClaim": {
              "claimName": "pvc-fc033e2586"
            }
          }
        ]
      },
      "status": {
        "conditions": [
          {
            "type": "Succeeded",
            "status": "Unknown",
            "lastTransitionTime": "2023-02-22T05:33:00Z",
            "reason": "Running",
            "message": "Not all Steps in the Task have finished executing"
          }
        ],
        "podName": "stage-owasp-zap-finish-pod",
        "startTime": "2023-02-22T05:32:43Z",
        "steps": [
          {
            "running": {
              "startedAt": "2023-02-22T05:33:00Z"
            },
            "name": "finish",
            "container": "step-finish",
            "imageID": "docker-eu-public.artifactory.swg-devops.com/wcp-cd-noncontainerised-team-cd-non-container-base-docker-local/kalyan@sha256:f9c5045ebc6afa517c3a63a8518ef2a8ecca8a009b8eff83c812d0f7f66989c1"
          }
        ]
      }
    },
    {
      "kind": "TaskRun",
      "apiVersion": "tekton.dev/v1beta1",
      "metadata": {
        "name": "stage-owasp-zap-setup",
        "namespace": "pw-2cea1a71-0232-4b00-8db4-bf22e02644d6",
        "uid": "b8926749-3786-4b6c-9bb6-a3a3bd51ca5d",
        "resourceVersion": "449838777",
        "generation": 1,
        "creationTimestamp": "2023-02-22T05:21:14Z",
        "labels": {
          "app": "workeragent",
          "app.kubernetes.io/managed-by": "tekton-pipelines",
          "tekton.dev/memberOf": "tasks",
          "tekton.dev/pipeline": "async-stage-pipeline",
          "tekton.dev/pipelineRun": "stage-owasp-zap",
          "tekton.dev/pipelineTask": "setup",
          "tekton.dev/task": "async-stage-setup"
        },
        "annotations": {
          "devops.cloud.ibm.com/build-number": "34",
          "devops.cloud.ibm.com/listener": "async-stage-listener",
          "devops.cloud.ibm.com/operatorName": "private-worker-agent-6d9db8f4d6-h2t44",
          "devops.cloud.ibm.com/owned-by": "kalyan_prasad@in.ibm.com",
          "devops.cloud.ibm.com/pipeline-id": "5dfc056f-d8e4-4151-a0a9-519bed442a8d",
          "devops.cloud.ibm.com/pipeline-run-url": "https://cloud.ibm.com/devops/pipelines/tekton/5dfc056f-d8e4-4151-a0a9-519bed442a8d/runs/2cea1a71-0232-4b00-8db4-bf22e02644d6?env_id=ibm:yp:us-south",
          "devops.cloud.ibm.com/tekton-pipeline": "2cea1a71-0232-4b00-8db4-bf22e02644d6",
          "devops.cloud.ibm.com/trigger-name": "Subpipeline Webhook Trigger",
          "devops.cloud.ibm.com/trigger-type": "generic",
          "devops.cloud.ibm.com/triggered-by": "",
          "devops.cloud.ibm.com/worker-instance": "91bceb74-8060-488f-95f9-64688fff6c06",
          "pipeline.tekton.dev/affinity-assistant": "affinity-assistant-5253723647",
          "pipeline.tekton.dev/release": "a34ad6b-dirty"
        },
        "ownerReferences": [
          {
            "apiVersion": "tekton.dev/v1beta1",
            "kind": "PipelineRun",
            "name": "stage-owasp-zap",
            "uid": "c3a55f48-f0ec-4236-8bfa-e9f1e6654f9b",
            "controller": true,
            "blockOwnerDeletion": true
          }
        ]
      },
      "spec": {
        "params": [
          {
            "name": "compliance-baseimage",
            "value": "docker-eu-public.artifactory.swg-devops.com/wcp-cd-noncontainerised-team-cd-non-container-base-docker-local/kalyan:kalyan-test-git-1@sha256:f9c5045ebc6afa517c3a63a8518ef2a8ecca8a009b8eff83c812d0f7f66989c1"
          },
          {
            "name": "pipeline-debug",
            "value": "1"
          }
        ],
        "resources": {},
        "serviceAccountName": "default",
        "taskRef": {
          "name": "async-stage-setup",
          "kind": "Task"
        },
        "timeout": "5h59m59.796458383s",
        "podTemplate": {
          "affinity": {
            "nodeAffinity": {
              "requiredDuringSchedulingIgnoredDuringExecution": {
                "nodeSelectorTerms": [
                  {
                    "matchExpressions": [
                      {
                        "key": "kubernetes.io/hostname",
                        "operator": "In",
                        "values": [
                          "10.37.91.8"
                        ]
                      }
                    ]
                  }
                ]
              }
            }
          },
          "runtimeClassName": "kata",
          "imagePullSecrets": [
            {
              "name": "artifactory-pull-secret"
            },
            {
              "name": "onepipeline-pull-secret"
            },
            {
              "name": "one-pipeline-pull-secret"
            },
            {
              "name": "pipeline-pull-secret"
            }
          ]
        },
        "workspaces": [
          {
            "name": "artifacts",
            "persistentVolumeClaim": {
              "claimName": "pvc-fc033e2586"
            }
          }
        ]
      },
      "status": {
        "conditions": [
          {
            "type": "Succeeded",
            "status": "True",
            "lastTransitionTime": "2023-02-22T05:22:08Z",
            "reason": "Succeeded",
            "message": "All Steps have completed executing"
          }
        ],
        "podName": "stage-owasp-zap-setup-pod",
        "startTime": "2023-02-22T05:21:14Z",
        "completionTime": "2023-02-22T05:22:08Z",
        "steps": [
          {
            "terminated": {
              "exitCode": 0,
              "reason": "Completed",
              "message": "[{\"key\":\"abort-on-failure\",\"value\":\"stopAndFail\",\"type\":1},{\"key\":\"configmap\",\"value\":\"not-provided-configmap\",\"type\":1},{\"key\":\"dind\",\"value\":\"true\",\"type\":1},{\"key\":\"image\",\"value\":\"icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.7@sha256:0444aa3cc5032ba4d7f7a59a4177dd43dc1126ad902f09079b0a66156bbe4bcf\",\"type\":1},{\"key\":\"image-pull-policy\",\"value\":\"IfNotPresent\",\"type\":1},{\"key\":\"script\",\"value\":\"stage-owasp-zap-WDw8\",\"type\":1},{\"key\":\"secret\",\"value\":\"not-provided-secret\",\"type\":1}]",
              "startedAt": "2023-02-22T05:21:26Z",
              "finishedAt": "2023-02-22T05:22:08Z",
              "containerID": "containerd://a5890b1bd2a45ef82a0c26a85c1e1f465dadcd7ee5e071da753903344dfcdce2"
            },
            "name": "setup",
            "container": "step-setup",
            "imageID": "docker-eu-public.artifactory.swg-devops.com/wcp-cd-noncontainerised-team-cd-non-container-base-docker-local/kalyan@sha256:f9c5045ebc6afa517c3a63a8518ef2a8ecca8a009b8eff83c812d0f7f66989c1"
          }
        ],
        "taskResults": [
          {
            "name": "abort-on-failure",
            "type": "string",
            "value": "stopAndFail"
          },
          {
            "name": "configmap",
            "type": "string",
            "value": "not-provided-configmap"
          },
          {
            "name": "dind",
            "type": "string",
            "value": "true"
          },
          {
            "name": "image",
            "type": "string",
            "value": "icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.7@sha256:0444aa3cc5032ba4d7f7a59a4177dd43dc1126ad902f09079b0a66156bbe4bcf"
          },
          {
            "name": "image-pull-policy",
            "type": "string",
            "value": "IfNotPresent"
          },
          {
            "name": "script",
            "type": "string",
            "value": "stage-owasp-zap-WDw8"
          },
          {
            "name": "secret",
            "type": "string",
            "value": "not-provided-secret"
          }
        ]
      }
    }
  ],
  "agent": "91bceb74-8060-488f-95f9-64688fff6c06",
  "serviceId": "ServiceId-a9311307-8362-4dbf-9897-32b4022d61f4",
  "id": "2cea1a71-0232-4b00-8db4-bf22e02644d6",
  "url": "https://devops-api.us-south.devops.cloud.ibm.com/v1/tekton-pipelines/5dfc056f-d8e4-4151-a0a9-519bed442a8d/runs/2cea1a71-0232-4b00-8db4-bf22e02644d6",
  "html_url": "https://cloud.ibm.com/devops/pipelines/tekton/5dfc056f-d8e4-4151-a0a9-519bed442a8d/runs/2cea1a71-0232-4b00-8db4-bf22e02644d6?env_id=ibm:yp:us-south",
  "definition": {
    "sha": "f2b8d69bd2d15b25a22ac2e04f312bbfcc48e8f7",
    "repoUrl": "https://github.ibm.com/one-pipeline/compliance-pipelines.git",
    "path": "definitions",
    "commitUrl": "https://github.ibm.com/one-pipeline/compliance-pipelines/commit/f2b8d69bd2d15b25a22ac2e04f312bbfcc48e8f7"
  }
}